// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.1.34438 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>ExportXML_FromXSD</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>True</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>True</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>True</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>All</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace ExportXML_FromXSD {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Файл : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокумент документField;
        
        private string идФайлField;
        
        private string версПрогField;
        
        private ФайлВерсФорм версФормField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool документFieldSpecified;
        
        private bool идФайлFieldSpecified;
        
        private bool версПрогFieldSpecified;
        
        private bool версФормFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокумент Документ {
            get {
                if ((this.документField == null)) {
                    this.документField = new ФайлДокумент();
                }
                return this.документField;
            }
            set {
                if ((this.документField != null)) {
                    if ((документField.Equals(value) != true)) {
                        this.документField = value;
                        this.OnPropertyChanged("Документ");
                    }
                }
                else {
                    this.документField = value;
                    this.OnPropertyChanged("Документ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИдФайл {
            get {
                return this.идФайлField;
            }
            set {
                if ((this.идФайлField != null)) {
                    if ((идФайлField.Equals(value) != true)) {
                        this.идФайлField = value;
                        this.OnPropertyChanged("ИдФайл");
                    }
                }
                else {
                    this.идФайлField = value;
                    this.OnPropertyChanged("ИдФайл");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВерсПрог {
            get {
                return this.версПрогField;
            }
            set {
                if ((this.версПрогField != null)) {
                    if ((версПрогField.Equals(value) != true)) {
                        this.версПрогField = value;
                        this.OnPropertyChanged("ВерсПрог");
                    }
                }
                else {
                    this.версПрогField = value;
                    this.OnPropertyChanged("ВерсПрог");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлВерсФорм ВерсФорм {
            get {
                return this.версФормField;
            }
            set {
                if ((версФормField.Equals(value) != true)) {
                    this.версФормField = value;
                    this.OnPropertyChanged("ВерсФорм");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Файл));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДокументSpecified {
            get {
                return документFieldSpecified;
            }
            set {
                документFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИдФайлSpecified {
            get {
                return идФайлFieldSpecified;
            }
            set {
                идФайлFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВерсПрогSpecified {
            get {
                return версПрогFieldSpecified;
            }
            set {
                версПрогFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВерсФормSpecified {
            get {
                return версФормFieldSpecified;
            }
            set {
                версФормFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Файл object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Файл object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Файл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Файл obj, out System.Exception exception) {
            exception = null;
            obj = default(Файл);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Файл obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Файл Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Файл)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Файл object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Файл object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Файл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Файл obj, out System.Exception exception) {
            exception = null;
            obj = default(Файл);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Файл obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Файл LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокумент : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументСвНП свНПField;
        
        private ФайлДокументПодписант подписантField;
        
        private List<ФайлДокументБаланс> балансField;
        
        private List<ФайлДокументПрибУб> прибУбField;
        
        private List<ФайлДокументОтчетИзмКап> отчетИзмКапField;
        
        private List<ФайлДокументДвижениеДен> движениеДенField;
        
        private List<ФайлДокументЦелИсп> целИспField;
        
        private List<ФайлДокументДополнительныеСведения> дополнительныеСведенияField;
        
        private List<ФайлДокументРасшифровкиОбеспечений> расшифровкиОбеспеченийField;
        
        private List<ФайлДокументЗадолженностьПоКредитамЗаймам> задолженностьПоКредитамЗаймамField;
        
        private List<ФайлДокументЛизингОбязательства> лизингОбязательстваField;
        
        private List<ФайлДокументДенежныеСредства> денежныеСредстваField;
        
        private List<ФайлДокументОСВ> оСВField;
        
        private List<ФайлДокументОСВПоСчетам> оСВПоСчетамField;
        
        private List<ФайлДокументАнализСчетов> анализСчетовField;
        
        private byte[] бухОтчНОField;
        
        private ФайлДокументОперБанкСч оперБанкСчField;
        
        private ФайлДокументПрочДохРасх прочДохРасхField;
        
        private ФайлДокументРасшФинВлож расшФинВложField;
        
        private ФайлДокументСтруктВыр структВырField;
        
        private ФайлДокументПрочиеПоказатели прочиеПоказателиField;
        
        private ФайлДокументДебКредЗадолж дебКредЗадолжField;
        
        private byte[] деклПрибыльField;
        
        private byte[] деклНДСField;
        
        private byte[] спрИспОбУплНалField;
        
        private List<ФайлДокументДопФайл> допФайлыField;
        
        private string путьДоОригиналаField;
        
        private ФайлДокументКНД кНДField;
        
        private string датаДокField;
        
        private string датаУтвОтчField;
        
        private string номКоррField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool свНПFieldSpecified;
        
        private bool подписантFieldSpecified;
        
        private bool балансFieldSpecified;
        
        private bool прибУбFieldSpecified;
        
        private bool отчетИзмКапFieldSpecified;
        
        private bool движениеДенFieldSpecified;
        
        private bool целИспFieldSpecified;
        
        private bool дополнительныеСведенияFieldSpecified;
        
        private bool расшифровкиОбеспеченийFieldSpecified;
        
        private bool задолженностьПоКредитамЗаймамFieldSpecified;
        
        private bool лизингОбязательстваFieldSpecified;
        
        private bool денежныеСредстваFieldSpecified;
        
        private bool оСВFieldSpecified;
        
        private bool оСВПоСчетамFieldSpecified;
        
        private bool анализСчетовFieldSpecified;
        
        private bool бухОтчНОFieldSpecified;
        
        private bool оперБанкСчFieldSpecified;
        
        private bool прочДохРасхFieldSpecified;
        
        private bool расшФинВложFieldSpecified;
        
        private bool структВырFieldSpecified;
        
        private bool прочиеПоказателиFieldSpecified;
        
        private bool дебКредЗадолжFieldSpecified;
        
        private bool деклПрибыльFieldSpecified;
        
        private bool деклНДСFieldSpecified;
        
        private bool спрИспОбУплНалFieldSpecified;
        
        private bool допФайлыFieldSpecified;
        
        private bool путьДоОригиналаFieldSpecified;
        
        private bool кНДFieldSpecified;
        
        private bool датаДокFieldSpecified;
        
        private bool датаУтвОтчFieldSpecified;
        
        private bool номКоррFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументСвНП СвНП {
            get {
                if ((this.свНПField == null)) {
                    this.свНПField = new ФайлДокументСвНП();
                }
                return this.свНПField;
            }
            set {
                if ((this.свНПField != null)) {
                    if ((свНПField.Equals(value) != true)) {
                        this.свНПField = value;
                        this.OnPropertyChanged("СвНП");
                    }
                }
                else {
                    this.свНПField = value;
                    this.OnPropertyChanged("СвНП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументПодписант Подписант {
            get {
                if ((this.подписантField == null)) {
                    this.подписантField = new ФайлДокументПодписант();
                }
                return this.подписантField;
            }
            set {
                if ((this.подписантField != null)) {
                    if ((подписантField.Equals(value) != true)) {
                        this.подписантField = value;
                        this.OnPropertyChanged("Подписант");
                    }
                }
                else {
                    this.подписантField = value;
                    this.OnPropertyChanged("Подписант");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Баланс", Order=2)]
        public List<ФайлДокументБаланс> Баланс {
            get {
                if ((this.балансField == null)) {
                    this.балансField = new List<ФайлДокументБаланс>();
                }
                return this.балансField;
            }
            set {
                if ((this.балансField != null)) {
                    if ((балансField.Equals(value) != true)) {
                        this.балансField = value;
                        this.OnPropertyChanged("Баланс");
                    }
                }
                else {
                    this.балансField = value;
                    this.OnPropertyChanged("Баланс");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ПрибУб", Order=3)]
        public List<ФайлДокументПрибУб> ПрибУб {
            get {
                if ((this.прибУбField == null)) {
                    this.прибУбField = new List<ФайлДокументПрибУб>();
                }
                return this.прибУбField;
            }
            set {
                if ((this.прибУбField != null)) {
                    if ((прибУбField.Equals(value) != true)) {
                        this.прибУбField = value;
                        this.OnPropertyChanged("ПрибУб");
                    }
                }
                else {
                    this.прибУбField = value;
                    this.OnPropertyChanged("ПрибУб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ОтчетИзмКап", Order=4)]
        public List<ФайлДокументОтчетИзмКап> ОтчетИзмКап {
            get {
                if ((this.отчетИзмКапField == null)) {
                    this.отчетИзмКапField = new List<ФайлДокументОтчетИзмКап>();
                }
                return this.отчетИзмКапField;
            }
            set {
                if ((this.отчетИзмКапField != null)) {
                    if ((отчетИзмКапField.Equals(value) != true)) {
                        this.отчетИзмКапField = value;
                        this.OnPropertyChanged("ОтчетИзмКап");
                    }
                }
                else {
                    this.отчетИзмКапField = value;
                    this.OnPropertyChanged("ОтчетИзмКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ДвижениеДен", Order=5)]
        public List<ФайлДокументДвижениеДен> ДвижениеДен {
            get {
                if ((this.движениеДенField == null)) {
                    this.движениеДенField = new List<ФайлДокументДвижениеДен>();
                }
                return this.движениеДенField;
            }
            set {
                if ((this.движениеДенField != null)) {
                    if ((движениеДенField.Equals(value) != true)) {
                        this.движениеДенField = value;
                        this.OnPropertyChanged("ДвижениеДен");
                    }
                }
                else {
                    this.движениеДенField = value;
                    this.OnPropertyChanged("ДвижениеДен");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ЦелИсп", Order=6)]
        public List<ФайлДокументЦелИсп> ЦелИсп {
            get {
                if ((this.целИспField == null)) {
                    this.целИспField = new List<ФайлДокументЦелИсп>();
                }
                return this.целИспField;
            }
            set {
                if ((this.целИспField != null)) {
                    if ((целИспField.Equals(value) != true)) {
                        this.целИспField = value;
                        this.OnPropertyChanged("ЦелИсп");
                    }
                }
                else {
                    this.целИспField = value;
                    this.OnPropertyChanged("ЦелИсп");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ДополнительныеСведения", Order=7)]
        public List<ФайлДокументДополнительныеСведения> ДополнительныеСведения {
            get {
                if ((this.дополнительныеСведенияField == null)) {
                    this.дополнительныеСведенияField = new List<ФайлДокументДополнительныеСведения>();
                }
                return this.дополнительныеСведенияField;
            }
            set {
                if ((this.дополнительныеСведенияField != null)) {
                    if ((дополнительныеСведенияField.Equals(value) != true)) {
                        this.дополнительныеСведенияField = value;
                        this.OnPropertyChanged("ДополнительныеСведения");
                    }
                }
                else {
                    this.дополнительныеСведенияField = value;
                    this.OnPropertyChanged("ДополнительныеСведения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("РасшифровкиОбеспечений", Order=8)]
        public List<ФайлДокументРасшифровкиОбеспечений> РасшифровкиОбеспечений {
            get {
                if ((this.расшифровкиОбеспеченийField == null)) {
                    this.расшифровкиОбеспеченийField = new List<ФайлДокументРасшифровкиОбеспечений>();
                }
                return this.расшифровкиОбеспеченийField;
            }
            set {
                if ((this.расшифровкиОбеспеченийField != null)) {
                    if ((расшифровкиОбеспеченийField.Equals(value) != true)) {
                        this.расшифровкиОбеспеченийField = value;
                        this.OnPropertyChanged("РасшифровкиОбеспечений");
                    }
                }
                else {
                    this.расшифровкиОбеспеченийField = value;
                    this.OnPropertyChanged("РасшифровкиОбеспечений");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ЗадолженностьПоКредитамЗаймам", Order=9)]
        public List<ФайлДокументЗадолженностьПоКредитамЗаймам> ЗадолженностьПоКредитамЗаймам {
            get {
                if ((this.задолженностьПоКредитамЗаймамField == null)) {
                    this.задолженностьПоКредитамЗаймамField = new List<ФайлДокументЗадолженностьПоКредитамЗаймам>();
                }
                return this.задолженностьПоКредитамЗаймамField;
            }
            set {
                if ((this.задолженностьПоКредитамЗаймамField != null)) {
                    if ((задолженностьПоКредитамЗаймамField.Equals(value) != true)) {
                        this.задолженностьПоКредитамЗаймамField = value;
                        this.OnPropertyChanged("ЗадолженностьПоКредитамЗаймам");
                    }
                }
                else {
                    this.задолженностьПоКредитамЗаймамField = value;
                    this.OnPropertyChanged("ЗадолженностьПоКредитамЗаймам");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ЛизингОбязательства", Order=10)]
        public List<ФайлДокументЛизингОбязательства> ЛизингОбязательства {
            get {
                if ((this.лизингОбязательстваField == null)) {
                    this.лизингОбязательстваField = new List<ФайлДокументЛизингОбязательства>();
                }
                return this.лизингОбязательстваField;
            }
            set {
                if ((this.лизингОбязательстваField != null)) {
                    if ((лизингОбязательстваField.Equals(value) != true)) {
                        this.лизингОбязательстваField = value;
                        this.OnPropertyChanged("ЛизингОбязательства");
                    }
                }
                else {
                    this.лизингОбязательстваField = value;
                    this.OnPropertyChanged("ЛизингОбязательства");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ДенежныеСредства", Order=11)]
        public List<ФайлДокументДенежныеСредства> ДенежныеСредства {
            get {
                if ((this.денежныеСредстваField == null)) {
                    this.денежныеСредстваField = new List<ФайлДокументДенежныеСредства>();
                }
                return this.денежныеСредстваField;
            }
            set {
                if ((this.денежныеСредстваField != null)) {
                    if ((денежныеСредстваField.Equals(value) != true)) {
                        this.денежныеСредстваField = value;
                        this.OnPropertyChanged("ДенежныеСредства");
                    }
                }
                else {
                    this.денежныеСредстваField = value;
                    this.OnPropertyChanged("ДенежныеСредства");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ОСВ", Order=12)]
        public List<ФайлДокументОСВ> ОСВ {
            get {
                if ((this.оСВField == null)) {
                    this.оСВField = new List<ФайлДокументОСВ>();
                }
                return this.оСВField;
            }
            set {
                if ((this.оСВField != null)) {
                    if ((оСВField.Equals(value) != true)) {
                        this.оСВField = value;
                        this.OnPropertyChanged("ОСВ");
                    }
                }
                else {
                    this.оСВField = value;
                    this.OnPropertyChanged("ОСВ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ОСВПоСчетам", Order=13)]
        public List<ФайлДокументОСВПоСчетам> ОСВПоСчетам {
            get {
                if ((this.оСВПоСчетамField == null)) {
                    this.оСВПоСчетамField = new List<ФайлДокументОСВПоСчетам>();
                }
                return this.оСВПоСчетамField;
            }
            set {
                if ((this.оСВПоСчетамField != null)) {
                    if ((оСВПоСчетамField.Equals(value) != true)) {
                        this.оСВПоСчетамField = value;
                        this.OnPropertyChanged("ОСВПоСчетам");
                    }
                }
                else {
                    this.оСВПоСчетамField = value;
                    this.OnPropertyChanged("ОСВПоСчетам");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("АнализСчетов", Order=14)]
        public List<ФайлДокументАнализСчетов> АнализСчетов {
            get {
                if ((this.анализСчетовField == null)) {
                    this.анализСчетовField = new List<ФайлДокументАнализСчетов>();
                }
                return this.анализСчетовField;
            }
            set {
                if ((this.анализСчетовField != null)) {
                    if ((анализСчетовField.Equals(value) != true)) {
                        this.анализСчетовField = value;
                        this.OnPropertyChanged("АнализСчетов");
                    }
                }
                else {
                    this.анализСчетовField = value;
                    this.OnPropertyChanged("АнализСчетов");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=15)]
        public byte[] БухОтчНО {
            get {
                if ((this.бухОтчНОField == null)) {
                    this.бухОтчНОField = new byte[]();
                }
                return this.бухОтчНОField;
            }
            set {
                if ((this.бухОтчНОField != null)) {
                    if ((бухОтчНОField.Equals(value) != true)) {
                        this.бухОтчНОField = value;
                        this.OnPropertyChanged("БухОтчНО");
                    }
                }
                else {
                    this.бухОтчНОField = value;
                    this.OnPropertyChanged("БухОтчНО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public ФайлДокументОперБанкСч ОперБанкСч {
            get {
                if ((this.оперБанкСчField == null)) {
                    this.оперБанкСчField = new ФайлДокументОперБанкСч();
                }
                return this.оперБанкСчField;
            }
            set {
                if ((this.оперБанкСчField != null)) {
                    if ((оперБанкСчField.Equals(value) != true)) {
                        this.оперБанкСчField = value;
                        this.OnPropertyChanged("ОперБанкСч");
                    }
                }
                else {
                    this.оперБанкСчField = value;
                    this.OnPropertyChanged("ОперБанкСч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public ФайлДокументПрочДохРасх ПрочДохРасх {
            get {
                if ((this.прочДохРасхField == null)) {
                    this.прочДохРасхField = new ФайлДокументПрочДохРасх();
                }
                return this.прочДохРасхField;
            }
            set {
                if ((this.прочДохРасхField != null)) {
                    if ((прочДохРасхField.Equals(value) != true)) {
                        this.прочДохРасхField = value;
                        this.OnPropertyChanged("ПрочДохРасх");
                    }
                }
                else {
                    this.прочДохРасхField = value;
                    this.OnPropertyChanged("ПрочДохРасх");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public ФайлДокументРасшФинВлож РасшФинВлож {
            get {
                if ((this.расшФинВложField == null)) {
                    this.расшФинВложField = new ФайлДокументРасшФинВлож();
                }
                return this.расшФинВложField;
            }
            set {
                if ((this.расшФинВложField != null)) {
                    if ((расшФинВложField.Equals(value) != true)) {
                        this.расшФинВложField = value;
                        this.OnPropertyChanged("РасшФинВлож");
                    }
                }
                else {
                    this.расшФинВложField = value;
                    this.OnPropertyChanged("РасшФинВлож");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public ФайлДокументСтруктВыр СтруктВыр {
            get {
                if ((this.структВырField == null)) {
                    this.структВырField = new ФайлДокументСтруктВыр();
                }
                return this.структВырField;
            }
            set {
                if ((this.структВырField != null)) {
                    if ((структВырField.Equals(value) != true)) {
                        this.структВырField = value;
                        this.OnPropertyChanged("СтруктВыр");
                    }
                }
                else {
                    this.структВырField = value;
                    this.OnPropertyChanged("СтруктВыр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public ФайлДокументПрочиеПоказатели ПрочиеПоказатели {
            get {
                if ((this.прочиеПоказателиField == null)) {
                    this.прочиеПоказателиField = new ФайлДокументПрочиеПоказатели();
                }
                return this.прочиеПоказателиField;
            }
            set {
                if ((this.прочиеПоказателиField != null)) {
                    if ((прочиеПоказателиField.Equals(value) != true)) {
                        this.прочиеПоказателиField = value;
                        this.OnPropertyChanged("ПрочиеПоказатели");
                    }
                }
                else {
                    this.прочиеПоказателиField = value;
                    this.OnPropertyChanged("ПрочиеПоказатели");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=21)]
        public ФайлДокументДебКредЗадолж ДебКредЗадолж {
            get {
                if ((this.дебКредЗадолжField == null)) {
                    this.дебКредЗадолжField = new ФайлДокументДебКредЗадолж();
                }
                return this.дебКредЗадолжField;
            }
            set {
                if ((this.дебКредЗадолжField != null)) {
                    if ((дебКредЗадолжField.Equals(value) != true)) {
                        this.дебКредЗадолжField = value;
                        this.OnPropertyChanged("ДебКредЗадолж");
                    }
                }
                else {
                    this.дебКредЗадолжField = value;
                    this.OnPropertyChanged("ДебКредЗадолж");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=22)]
        public byte[] ДеклПрибыль {
            get {
                if ((this.деклПрибыльField == null)) {
                    this.деклПрибыльField = new byte[]();
                }
                return this.деклПрибыльField;
            }
            set {
                if ((this.деклПрибыльField != null)) {
                    if ((деклПрибыльField.Equals(value) != true)) {
                        this.деклПрибыльField = value;
                        this.OnPropertyChanged("ДеклПрибыль");
                    }
                }
                else {
                    this.деклПрибыльField = value;
                    this.OnPropertyChanged("ДеклПрибыль");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=23)]
        public byte[] ДеклНДС {
            get {
                if ((this.деклНДСField == null)) {
                    this.деклНДСField = new byte[]();
                }
                return this.деклНДСField;
            }
            set {
                if ((this.деклНДСField != null)) {
                    if ((деклНДСField.Equals(value) != true)) {
                        this.деклНДСField = value;
                        this.OnPropertyChanged("ДеклНДС");
                    }
                }
                else {
                    this.деклНДСField = value;
                    this.OnPropertyChanged("ДеклНДС");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", Order=24)]
        public byte[] СпрИспОбУплНал {
            get {
                if ((this.спрИспОбУплНалField == null)) {
                    this.спрИспОбУплНалField = new byte[]();
                }
                return this.спрИспОбУплНалField;
            }
            set {
                if ((this.спрИспОбУплНалField != null)) {
                    if ((спрИспОбУплНалField.Equals(value) != true)) {
                        this.спрИспОбУплНалField = value;
                        this.OnPropertyChanged("СпрИспОбУплНал");
                    }
                }
                else {
                    this.спрИспОбУплНалField = value;
                    this.OnPropertyChanged("СпрИспОбУплНал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=25)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ДопФайл", IsNullable=false)]
        public List<ФайлДокументДопФайл> ДопФайлы {
            get {
                if ((this.допФайлыField == null)) {
                    this.допФайлыField = new List<ФайлДокументДопФайл>();
                }
                return this.допФайлыField;
            }
            set {
                if ((this.допФайлыField != null)) {
                    if ((допФайлыField.Equals(value) != true)) {
                        this.допФайлыField = value;
                        this.OnPropertyChanged("ДопФайлы");
                    }
                }
                else {
                    this.допФайлыField = value;
                    this.OnPropertyChanged("ДопФайлы");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=26)]
        public string ПутьДоОригинала {
            get {
                return this.путьДоОригиналаField;
            }
            set {
                if ((this.путьДоОригиналаField != null)) {
                    if ((путьДоОригиналаField.Equals(value) != true)) {
                        this.путьДоОригиналаField = value;
                        this.OnPropertyChanged("ПутьДоОригинала");
                    }
                }
                else {
                    this.путьДоОригиналаField = value;
                    this.OnPropertyChanged("ПутьДоОригинала");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументКНД КНД {
            get {
                return this.кНДField;
            }
            set {
                if ((кНДField.Equals(value) != true)) {
                    this.кНДField = value;
                    this.OnPropertyChanged("КНД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаДок {
            get {
                return this.датаДокField;
            }
            set {
                if ((this.датаДокField != null)) {
                    if ((датаДокField.Equals(value) != true)) {
                        this.датаДокField = value;
                        this.OnPropertyChanged("ДатаДок");
                    }
                }
                else {
                    this.датаДокField = value;
                    this.OnPropertyChanged("ДатаДок");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаУтвОтч {
            get {
                return this.датаУтвОтчField;
            }
            set {
                if ((this.датаУтвОтчField != null)) {
                    if ((датаУтвОтчField.Equals(value) != true)) {
                        this.датаУтвОтчField = value;
                        this.OnPropertyChanged("ДатаУтвОтч");
                    }
                }
                else {
                    this.датаУтвОтчField = value;
                    this.OnPropertyChanged("ДатаУтвОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НомКорр {
            get {
                return this.номКоррField;
            }
            set {
                if ((this.номКоррField != null)) {
                    if ((номКоррField.Equals(value) != true)) {
                        this.номКоррField = value;
                        this.OnPropertyChanged("НомКорр");
                    }
                }
                else {
                    this.номКоррField = value;
                    this.OnPropertyChanged("НомКорр");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокумент));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СвНПSpecified {
            get {
                return свНПFieldSpecified;
            }
            set {
                свНПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПодписантSpecified {
            get {
                return подписантFieldSpecified;
            }
            set {
                подписантFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool БалансSpecified {
            get {
                return балансFieldSpecified;
            }
            set {
                балансFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрибУбSpecified {
            get {
                return прибУбFieldSpecified;
            }
            set {
                прибУбFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетИзмКапSpecified {
            get {
                return отчетИзмКапFieldSpecified;
            }
            set {
                отчетИзмКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДвижениеДенSpecified {
            get {
                return движениеДенFieldSpecified;
            }
            set {
                движениеДенFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЦелИспSpecified {
            get {
                return целИспFieldSpecified;
            }
            set {
                целИспFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДополнительныеСведенияSpecified {
            get {
                return дополнительныеСведенияFieldSpecified;
            }
            set {
                дополнительныеСведенияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РасшифровкиОбеспеченийSpecified {
            get {
                return расшифровкиОбеспеченийFieldSpecified;
            }
            set {
                расшифровкиОбеспеченийFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолженностьПоКредитамЗаймамSpecified {
            get {
                return задолженностьПоКредитамЗаймамFieldSpecified;
            }
            set {
                задолженностьПоКредитамЗаймамFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЛизингОбязательстваSpecified {
            get {
                return лизингОбязательстваFieldSpecified;
            }
            set {
                лизингОбязательстваFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДенежныеСредстваSpecified {
            get {
                return денежныеСредстваFieldSpecified;
            }
            set {
                денежныеСредстваFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОСВSpecified {
            get {
                return оСВFieldSpecified;
            }
            set {
                оСВFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОСВПоСчетамSpecified {
            get {
                return оСВПоСчетамFieldSpecified;
            }
            set {
                оСВПоСчетамFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool АнализСчетовSpecified {
            get {
                return анализСчетовFieldSpecified;
            }
            set {
                анализСчетовFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool БухОтчНОSpecified {
            get {
                return бухОтчНОFieldSpecified;
            }
            set {
                бухОтчНОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОперБанкСчSpecified {
            get {
                return оперБанкСчFieldSpecified;
            }
            set {
                оперБанкСчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочДохРасхSpecified {
            get {
                return прочДохРасхFieldSpecified;
            }
            set {
                прочДохРасхFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РасшФинВложSpecified {
            get {
                return расшФинВложFieldSpecified;
            }
            set {
                расшФинВложFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СтруктВырSpecified {
            get {
                return структВырFieldSpecified;
            }
            set {
                структВырFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочиеПоказателиSpecified {
            get {
                return прочиеПоказателиFieldSpecified;
            }
            set {
                прочиеПоказателиFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДебКредЗадолжSpecified {
            get {
                return дебКредЗадолжFieldSpecified;
            }
            set {
                дебКредЗадолжFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДеклПрибыльSpecified {
            get {
                return деклПрибыльFieldSpecified;
            }
            set {
                деклПрибыльFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДеклНДСSpecified {
            get {
                return деклНДСFieldSpecified;
            }
            set {
                деклНДСFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СпрИспОбУплНалSpecified {
            get {
                return спрИспОбУплНалFieldSpecified;
            }
            set {
                спрИспОбУплНалFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДопФайлыSpecified {
            get {
                return допФайлыFieldSpecified;
            }
            set {
                допФайлыFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПутьДоОригиналаSpecified {
            get {
                return путьДоОригиналаFieldSpecified;
            }
            set {
                путьДоОригиналаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КНДSpecified {
            get {
                return кНДFieldSpecified;
            }
            set {
                кНДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаДокSpecified {
            get {
                return датаДокFieldSpecified;
            }
            set {
                датаДокFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаУтвОтчSpecified {
            get {
                return датаУтвОтчFieldSpecified;
            }
            set {
                датаУтвОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомКоррSpecified {
            get {
                return номКоррFieldSpecified;
            }
            set {
                номКоррFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокумент object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокумент object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокумент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокумент obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокумент);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокумент obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокумент Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокумент)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокумент object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокумент object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокумент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокумент obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокумент);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокумент obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокумент LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументСвНП : System.ComponentModel.INotifyPropertyChanged {
        
        private object itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool itemFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("НПФЛ", typeof(ФайлДокументСвНПНПФЛ), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("НПЮЛ", typeof(ФайлДокументСвНПНПЮЛ), Order=0)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвНП));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ItemSpecified {
            get {
                return itemFieldSpecified;
            }
            set {
                itemFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвНП object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвНП object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвНП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвНП obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСвНП);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументСвНП obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументСвНП Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвНП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументСвНП object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвНП object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвНП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументСвНП obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСвНП);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументСвНП obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументСвНП LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументСвНПНПФЛ : System.ComponentModel.INotifyPropertyChanged {
        
        private ФИОТип фИОField;
        
        private string иННФЛField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool фИОFieldSpecified;
        
        private bool иННФЛFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФИОТип ФИО {
            get {
                if ((this.фИОField == null)) {
                    this.фИОField = new ФИОТип();
                }
                return this.фИОField;
            }
            set {
                if ((this.фИОField != null)) {
                    if ((фИОField.Equals(value) != true)) {
                        this.фИОField = value;
                        this.OnPropertyChanged("ФИО");
                    }
                }
                else {
                    this.фИОField = value;
                    this.OnPropertyChanged("ФИО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННФЛ {
            get {
                return this.иННФЛField;
            }
            set {
                if ((this.иННФЛField != null)) {
                    if ((иННФЛField.Equals(value) != true)) {
                        this.иННФЛField = value;
                        this.OnPropertyChanged("ИННФЛ");
                    }
                }
                else {
                    this.иННФЛField = value;
                    this.OnPropertyChanged("ИННФЛ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвНПНПФЛ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ФИОSpecified {
            get {
                return фИОFieldSpecified;
            }
            set {
                фИОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННФЛSpecified {
            get {
                return иННФЛFieldSpecified;
            }
            set {
                иННФЛFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвНПНПФЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвНПНПФЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвНПНПФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвНПНПФЛ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСвНПНПФЛ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументСвНПНПФЛ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументСвНПНПФЛ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвНПНПФЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументСвНПНПФЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвНПНПФЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвНПНПФЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументСвНПНПФЛ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСвНПНПФЛ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументСвНПНПФЛ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументСвНПНПФЛ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ФИОТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string фамилияField;
        
        private string имяField;
        
        private string отчествоField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool фамилияFieldSpecified;
        
        private bool имяFieldSpecified;
        
        private bool отчествоFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Фамилия {
            get {
                return this.фамилияField;
            }
            set {
                if ((this.фамилияField != null)) {
                    if ((фамилияField.Equals(value) != true)) {
                        this.фамилияField = value;
                        this.OnPropertyChanged("Фамилия");
                    }
                }
                else {
                    this.фамилияField = value;
                    this.OnPropertyChanged("Фамилия");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Имя {
            get {
                return this.имяField;
            }
            set {
                if ((this.имяField != null)) {
                    if ((имяField.Equals(value) != true)) {
                        this.имяField = value;
                        this.OnPropertyChanged("Имя");
                    }
                }
                else {
                    this.имяField = value;
                    this.OnPropertyChanged("Имя");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Отчество {
            get {
                return this.отчествоField;
            }
            set {
                if ((this.отчествоField != null)) {
                    if ((отчествоField.Equals(value) != true)) {
                        this.отчествоField = value;
                        this.OnPropertyChanged("Отчество");
                    }
                }
                else {
                    this.отчествоField = value;
                    this.OnPropertyChanged("Отчество");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФИОТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ФамилияSpecified {
            get {
                return фамилияFieldSpecified;
            }
            set {
                фамилияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИмяSpecified {
            get {
                return имяFieldSpecified;
            }
            set {
                имяFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчествоSpecified {
            get {
                return отчествоFieldSpecified;
            }
            set {
                отчествоFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФИОТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФИОТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФИОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФИОТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ФИОТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФИОТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФИОТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФИОТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФИОТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФИОТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФИОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФИОТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ФИОТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФИОТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФИОТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ФинВложенияТип : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФинВложенияТипВложение> вложениеField;
        
        private decimal итогоСтоимВлField;
        
        private decimal итогоПросрЗадField;
        
        private bool итогоПросрЗадFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool вложениеFieldSpecified;
        
        private bool итогоСтоимВлFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Вложение", Order=0)]
        public List<ФинВложенияТипВложение> Вложение {
            get {
                if ((this.вложениеField == null)) {
                    this.вложениеField = new List<ФинВложенияТипВложение>();
                }
                return this.вложениеField;
            }
            set {
                if ((this.вложениеField != null)) {
                    if ((вложениеField.Equals(value) != true)) {
                        this.вложениеField = value;
                        this.OnPropertyChanged("Вложение");
                    }
                }
                else {
                    this.вложениеField = value;
                    this.OnPropertyChanged("Вложение");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ИтогоСтоимВл {
            get {
                return this.итогоСтоимВлField;
            }
            set {
                if ((this.итогоСтоимВлField != null)) {
                    if ((итогоСтоимВлField.Equals(value) != true)) {
                        this.итогоСтоимВлField = value;
                        this.OnPropertyChanged("ИтогоСтоимВл");
                    }
                }
                else {
                    this.итогоСтоимВлField = value;
                    this.OnPropertyChanged("ИтогоСтоимВл");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ИтогоПросрЗад {
            get {
                return this.итогоПросрЗадField;
            }
            set {
                if ((this.итогоПросрЗадField != null)) {
                    if ((итогоПросрЗадField.Equals(value) != true)) {
                        this.итогоПросрЗадField = value;
                        this.OnPropertyChanged("ИтогоПросрЗад");
                    }
                }
                else {
                    this.итогоПросрЗадField = value;
                    this.OnPropertyChanged("ИтогоПросрЗад");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ИтогоПросрЗадSpecified {
            get {
                return this.итогоПросрЗадFieldSpecified;
            }
            set {
                if ((итогоПросрЗадFieldSpecified.Equals(value) != true)) {
                    this.итогоПросрЗадFieldSpecified = value;
                    this.OnPropertyChanged("ИтогоПросрЗадSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФинВложенияТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВложениеSpecified {
            get {
                return вложениеFieldSpecified;
            }
            set {
                вложениеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогоСтоимВлSpecified {
            get {
                return итогоСтоимВлFieldSpecified;
            }
            set {
                итогоСтоимВлFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФинВложенияТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФинВложенияТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФинВложенияТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФинВложенияТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ФинВложенияТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФинВложенияТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФинВложенияТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФинВложенияТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФинВложенияТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФинВложенияТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФинВложенияТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФинВложенияТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ФинВложенияТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФинВложенияТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФинВложенияТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФинВложенияТипВложение : System.ComponentModel.INotifyPropertyChanged {
        
        private ФинВложенияТипВложениеКонтрагент контрагентField;
        
        private ФинВложенияТипВложениеПросрЗад просрЗадField;
        
        private string комментField;
        
        private string видField;
        
        private string датаПриобрField;
        
        private string датаВыбField;
        
        private decimal стоимВлField;
        
        private string кодВалField;
        
        private decimal стоимВлВалField;
        
        private bool стоимВлВалFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool контрагентFieldSpecified;
        
        private bool просрЗадFieldSpecified;
        
        private bool комментFieldSpecified;
        
        private bool видFieldSpecified;
        
        private bool датаПриобрFieldSpecified;
        
        private bool датаВыбFieldSpecified;
        
        private bool стоимВлFieldSpecified;
        
        private bool кодВалFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФинВложенияТипВложениеКонтрагент Контрагент {
            get {
                if ((this.контрагентField == null)) {
                    this.контрагентField = new ФинВложенияТипВложениеКонтрагент();
                }
                return this.контрагентField;
            }
            set {
                if ((this.контрагентField != null)) {
                    if ((контрагентField.Equals(value) != true)) {
                        this.контрагентField = value;
                        this.OnPropertyChanged("Контрагент");
                    }
                }
                else {
                    this.контрагентField = value;
                    this.OnPropertyChanged("Контрагент");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФинВложенияТипВложениеПросрЗад ПросрЗад {
            get {
                if ((this.просрЗадField == null)) {
                    this.просрЗадField = new ФинВложенияТипВложениеПросрЗад();
                }
                return this.просрЗадField;
            }
            set {
                if ((this.просрЗадField != null)) {
                    if ((просрЗадField.Equals(value) != true)) {
                        this.просрЗадField = value;
                        this.OnPropertyChanged("ПросрЗад");
                    }
                }
                else {
                    this.просрЗадField = value;
                    this.OnPropertyChanged("ПросрЗад");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Вид {
            get {
                return this.видField;
            }
            set {
                if ((this.видField != null)) {
                    if ((видField.Equals(value) != true)) {
                        this.видField = value;
                        this.OnPropertyChanged("Вид");
                    }
                }
                else {
                    this.видField = value;
                    this.OnPropertyChanged("Вид");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаПриобр {
            get {
                return this.датаПриобрField;
            }
            set {
                if ((this.датаПриобрField != null)) {
                    if ((датаПриобрField.Equals(value) != true)) {
                        this.датаПриобрField = value;
                        this.OnPropertyChanged("ДатаПриобр");
                    }
                }
                else {
                    this.датаПриобрField = value;
                    this.OnPropertyChanged("ДатаПриобр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВыб {
            get {
                return this.датаВыбField;
            }
            set {
                if ((this.датаВыбField != null)) {
                    if ((датаВыбField.Equals(value) != true)) {
                        this.датаВыбField = value;
                        this.OnPropertyChanged("ДатаВыб");
                    }
                }
                else {
                    this.датаВыбField = value;
                    this.OnPropertyChanged("ДатаВыб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СтоимВл {
            get {
                return this.стоимВлField;
            }
            set {
                if ((this.стоимВлField != null)) {
                    if ((стоимВлField.Equals(value) != true)) {
                        this.стоимВлField = value;
                        this.OnPropertyChanged("СтоимВл");
                    }
                }
                else {
                    this.стоимВлField = value;
                    this.OnPropertyChanged("СтоимВл");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВал {
            get {
                return this.кодВалField;
            }
            set {
                if ((this.кодВалField != null)) {
                    if ((кодВалField.Equals(value) != true)) {
                        this.кодВалField = value;
                        this.OnPropertyChanged("КодВал");
                    }
                }
                else {
                    this.кодВалField = value;
                    this.OnPropertyChanged("КодВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СтоимВлВал {
            get {
                return this.стоимВлВалField;
            }
            set {
                if ((this.стоимВлВалField != null)) {
                    if ((стоимВлВалField.Equals(value) != true)) {
                        this.стоимВлВалField = value;
                        this.OnPropertyChanged("СтоимВлВал");
                    }
                }
                else {
                    this.стоимВлВалField = value;
                    this.OnPropertyChanged("СтоимВлВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СтоимВлВалSpecified {
            get {
                return this.стоимВлВалFieldSpecified;
            }
            set {
                if ((стоимВлВалFieldSpecified.Equals(value) != true)) {
                    this.стоимВлВалFieldSpecified = value;
                    this.OnPropertyChanged("СтоимВлВалSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФинВложенияТипВложение));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КонтрагентSpecified {
            get {
                return контрагентFieldSpecified;
            }
            set {
                контрагентFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрЗадSpecified {
            get {
                return просрЗадFieldSpecified;
            }
            set {
                просрЗадFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВидSpecified {
            get {
                return видFieldSpecified;
            }
            set {
                видFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаПриобрSpecified {
            get {
                return датаПриобрFieldSpecified;
            }
            set {
                датаПриобрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВыбSpecified {
            get {
                return датаВыбFieldSpecified;
            }
            set {
                датаВыбFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СтоимВлSpecified {
            get {
                return стоимВлFieldSpecified;
            }
            set {
                стоимВлFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодВалSpecified {
            get {
                return кодВалFieldSpecified;
            }
            set {
                кодВалFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФинВложенияТипВложение object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФинВложенияТипВложение object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФинВложенияТипВложение object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФинВложенияТипВложение obj, out System.Exception exception) {
            exception = null;
            obj = default(ФинВложенияТипВложение);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФинВложенияТипВложение obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФинВложенияТипВложение Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФинВложенияТипВложение)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФинВложенияТипВложение object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФинВложенияТипВложение object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФинВложенияТипВложение object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФинВложенияТипВложение obj, out System.Exception exception) {
            exception = null;
            obj = default(ФинВложенияТипВложение);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФинВложенияТипВложение obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФинВложенияТипВложение LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФинВложенияТипВложениеКонтрагент : System.ComponentModel.INotifyPropertyChanged {
        
        private string наименованиеField;
        
        private string иННField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наименованиеFieldSpecified;
        
        private bool иННFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФинВложенияТипВложениеКонтрагент));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФинВложенияТипВложениеКонтрагент object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФинВложенияТипВложениеКонтрагент object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФинВложенияТипВложениеКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФинВложенияТипВложениеКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(ФинВложенияТипВложениеКонтрагент);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФинВложенияТипВложениеКонтрагент obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФинВложенияТипВложениеКонтрагент Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФинВложенияТипВложениеКонтрагент)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФинВложенияТипВложениеКонтрагент object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФинВложенияТипВложениеКонтрагент object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФинВложенияТипВложениеКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФинВложенияТипВложениеКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(ФинВложенияТипВложениеКонтрагент);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФинВложенияТипВложениеКонтрагент obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФинВложенияТипВложениеКонтрагент LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФинВложенияТипВложениеПросрЗад : System.ComponentModel.INotifyPropertyChanged {
        
        private string датаВознField;
        
        private decimal суммаField;
        
        private decimal суммаВалField;
        
        private bool суммаВалFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool датаВознFieldSpecified;
        
        private bool суммаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Сумма {
            get {
                return this.суммаField;
            }
            set {
                if ((this.суммаField != null)) {
                    if ((суммаField.Equals(value) != true)) {
                        this.суммаField = value;
                        this.OnPropertyChanged("Сумма");
                    }
                }
                else {
                    this.суммаField = value;
                    this.OnPropertyChanged("Сумма");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаВал {
            get {
                return this.суммаВалField;
            }
            set {
                if ((this.суммаВалField != null)) {
                    if ((суммаВалField.Equals(value) != true)) {
                        this.суммаВалField = value;
                        this.OnPropertyChanged("СуммаВал");
                    }
                }
                else {
                    this.суммаВалField = value;
                    this.OnPropertyChanged("СуммаВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СуммаВалSpecified {
            get {
                return this.суммаВалFieldSpecified;
            }
            set {
                if ((суммаВалFieldSpecified.Equals(value) != true)) {
                    this.суммаВалFieldSpecified = value;
                    this.OnPropertyChanged("СуммаВалSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФинВложенияТипВложениеПросрЗад));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаSpecified {
            get {
                return суммаFieldSpecified;
            }
            set {
                суммаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФинВложенияТипВложениеПросрЗад object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФинВложенияТипВложениеПросрЗад object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФинВложенияТипВложениеПросрЗад object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФинВложенияТипВложениеПросрЗад obj, out System.Exception exception) {
            exception = null;
            obj = default(ФинВложенияТипВложениеПросрЗад);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФинВложенияТипВложениеПросрЗад obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФинВложенияТипВложениеПросрЗад Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФинВложенияТипВложениеПросрЗад)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФинВложенияТипВложениеПросрЗад object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФинВложенияТипВложениеПросрЗад object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФинВложенияТипВложениеПросрЗад object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФинВложенияТипВложениеПросрЗад obj, out System.Exception exception) {
            exception = null;
            obj = default(ФинВложенияТипВложениеПросрЗад);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФинВложенияТипВложениеПросрЗад obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФинВложенияТипВложениеПросрЗад LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СубконтоПоПредставлениюТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string представлениеField;
        
        private string типСубконтоField;
        
        private string иННField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool представлениеFieldSpecified;
        
        private bool типСубконтоFieldSpecified;
        
        private bool иННFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Представление {
            get {
                return this.представлениеField;
            }
            set {
                if ((this.представлениеField != null)) {
                    if ((представлениеField.Equals(value) != true)) {
                        this.представлениеField = value;
                        this.OnPropertyChanged("Представление");
                    }
                }
                else {
                    this.представлениеField = value;
                    this.OnPropertyChanged("Представление");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ТипСубконто {
            get {
                return this.типСубконтоField;
            }
            set {
                if ((this.типСубконтоField != null)) {
                    if ((типСубконтоField.Equals(value) != true)) {
                        this.типСубконтоField = value;
                        this.OnPropertyChanged("ТипСубконто");
                    }
                }
                else {
                    this.типСубконтоField = value;
                    this.OnPropertyChanged("ТипСубконто");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СубконтоПоПредставлениюТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПредставлениеSpecified {
            get {
                return представлениеFieldSpecified;
            }
            set {
                представлениеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипСубконтоSpecified {
            get {
                return типСубконтоFieldSpecified;
            }
            set {
                типСубконтоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СубконтоПоПредставлениюТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СубконтоПоПредставлениюТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СубконтоПоПредставлениюТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СубконтоПоПредставлениюТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СубконтоПоПредставлениюТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СубконтоПоПредставлениюТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СубконтоПоПредставлениюТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СубконтоПоПредставлениюТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СубконтоПоПредставлениюТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СубконтоПоПредставлениюТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СубконтоПоПредставлениюТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СубконтоПоПредставлениюТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СубконтоПоПредставлениюТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СубконтоПоПредставлениюТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СубконтоПоПредставлениюТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class БанковскийСчетТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string наименованиеField;
        
        private string наименованиеБанкаField;
        
        private string бИКField;
        
        private string номерСчетаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наименованиеFieldSpecified;
        
        private bool наименованиеБанкаFieldSpecified;
        
        private bool бИКFieldSpecified;
        
        private bool номерСчетаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеБанка {
            get {
                return this.наименованиеБанкаField;
            }
            set {
                if ((this.наименованиеБанкаField != null)) {
                    if ((наименованиеБанкаField.Equals(value) != true)) {
                        this.наименованиеБанкаField = value;
                        this.OnPropertyChanged("НаименованиеБанка");
                    }
                }
                else {
                    this.наименованиеБанкаField = value;
                    this.OnPropertyChanged("НаименованиеБанка");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string БИК {
            get {
                return this.бИКField;
            }
            set {
                if ((this.бИКField != null)) {
                    if ((бИКField.Equals(value) != true)) {
                        this.бИКField = value;
                        this.OnPropertyChanged("БИК");
                    }
                }
                else {
                    this.бИКField = value;
                    this.OnPropertyChanged("БИК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НомерСчета {
            get {
                return this.номерСчетаField;
            }
            set {
                if ((this.номерСчетаField != null)) {
                    if ((номерСчетаField.Equals(value) != true)) {
                        this.номерСчетаField = value;
                        this.OnPropertyChanged("НомерСчета");
                    }
                }
                else {
                    this.номерСчетаField = value;
                    this.OnPropertyChanged("НомерСчета");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(БанковскийСчетТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеБанкаSpecified {
            get {
                return наименованиеБанкаFieldSpecified;
            }
            set {
                наименованиеБанкаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool БИКSpecified {
            get {
                return бИКFieldSpecified;
            }
            set {
                бИКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерСчетаSpecified {
            get {
                return номерСчетаFieldSpecified;
            }
            set {
                номерСчетаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current БанковскийСчетТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an БанковскийСчетТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output БанковскийСчетТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out БанковскийСчетТип obj, out System.Exception exception) {
            exception = null;
            obj = default(БанковскийСчетТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out БанковскийСчетТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static БанковскийСчетТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((БанковскийСчетТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current БанковскийСчетТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an БанковскийСчетТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output БанковскийСчетТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out БанковскийСчетТип obj, out System.Exception exception) {
            exception = null;
            obj = default(БанковскийСчетТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out БанковскийСчетТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static БанковскийСчетТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class КонтрагентТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string наименованиеField;
        
        private string иННField;
        
        private string кППField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наименованиеFieldSpecified;
        
        private bool иННFieldSpecified;
        
        private bool кППFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(КонтрагентТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current КонтрагентТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an КонтрагентТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output КонтрагентТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out КонтрагентТип obj, out System.Exception exception) {
            exception = null;
            obj = default(КонтрагентТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out КонтрагентТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static КонтрагентТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((КонтрагентТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current КонтрагентТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an КонтрагентТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output КонтрагентТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out КонтрагентТип obj, out System.Exception exception) {
            exception = null;
            obj = default(КонтрагентТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out КонтрагентТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static КонтрагентТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СтрокаКредЗаймТочн3Тип : System.ComponentModel.INotifyPropertyChanged {
        
        private СтрокаКредЗаймТочн3ТипСчет счетField;
        
        private СтрокаКредЗаймТочн3ТипПросрЗад просрЗадField;
        
        private СтрокаКредЗаймТочн3ТипОбесп обеспField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool счетFieldSpecified;
        
        private bool просрЗадFieldSpecified;
        
        private bool обеспFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public СтрокаКредЗаймТочн3ТипСчет Счет {
            get {
                if ((this.счетField == null)) {
                    this.счетField = new СтрокаКредЗаймТочн3ТипСчет();
                }
                return this.счетField;
            }
            set {
                if ((this.счетField != null)) {
                    if ((счетField.Equals(value) != true)) {
                        this.счетField = value;
                        this.OnPropertyChanged("Счет");
                    }
                }
                else {
                    this.счетField = value;
                    this.OnPropertyChanged("Счет");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public СтрокаКредЗаймТочн3ТипПросрЗад ПросрЗад {
            get {
                if ((this.просрЗадField == null)) {
                    this.просрЗадField = new СтрокаКредЗаймТочн3ТипПросрЗад();
                }
                return this.просрЗадField;
            }
            set {
                if ((this.просрЗадField != null)) {
                    if ((просрЗадField.Equals(value) != true)) {
                        this.просрЗадField = value;
                        this.OnPropertyChanged("ПросрЗад");
                    }
                }
                else {
                    this.просрЗадField = value;
                    this.OnPropertyChanged("ПросрЗад");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public СтрокаКредЗаймТочн3ТипОбесп Обесп {
            get {
                if ((this.обеспField == null)) {
                    this.обеспField = new СтрокаКредЗаймТочн3ТипОбесп();
                }
                return this.обеспField;
            }
            set {
                if ((this.обеспField != null)) {
                    if ((обеспField.Equals(value) != true)) {
                        this.обеспField = value;
                        this.OnPropertyChanged("Обесп");
                    }
                }
                else {
                    this.обеспField = value;
                    this.OnPropertyChanged("Обесп");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаКредЗаймТочн3Тип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СчетSpecified {
            get {
                return счетFieldSpecified;
            }
            set {
                счетFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрЗадSpecified {
            get {
                return просрЗадFieldSpecified;
            }
            set {
                просрЗадFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбеспSpecified {
            get {
                return обеспFieldSpecified;
            }
            set {
                обеспFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3Тип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаКредЗаймТочн3Тип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3Тип obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3Тип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3Тип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3Тип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаКредЗаймТочн3Тип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3Тип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаКредЗаймТочн3Тип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3Тип obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3Тип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3Тип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3Тип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаКредЗаймТочн3ТипСчет : System.ComponentModel.INotifyPropertyChanged {
        
        private СтрокаКредЗаймТочн3ТипСчетКонтрагент контрагентField;
        
        private СтрокаКредЗаймТочн3ТипСчетДоговор договорField;
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаField;
        
        private string кодСчетаРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРField;
        
        private bool типСчетаРFieldSpecified;
        
        private string кодСчетаРРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРРField;
        
        private bool типСчетаРРFieldSpecified;
        
        private decimal сНДField;
        
        private decimal сНКField;
        
        private decimal доField;
        
        private decimal коField;
        
        private decimal сКДField;
        
        private decimal сККField;
        
        private decimal сНДВалField;
        
        private bool сНДВалFieldSpecified;
        
        private decimal сНКВалField;
        
        private bool сНКВалFieldSpecified;
        
        private decimal дОВалField;
        
        private bool дОВалFieldSpecified;
        
        private decimal кОВалField;
        
        private bool кОВалFieldSpecified;
        
        private decimal сКДВалField;
        
        private bool сКДВалFieldSpecified;
        
        private decimal сККВалField;
        
        private bool сККВалFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool контрагентFieldSpecified;
        
        private bool договорFieldSpecified;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        private bool типСчетаFieldSpecified;
        
        private bool кодСчетаРFieldSpecified;
        
        private bool кодСчетаРРFieldSpecified;
        
        private bool сНДFieldSpecified;
        
        private bool сНКFieldSpecified;
        
        private bool дОFieldSpecified;
        
        private bool кОFieldSpecified;
        
        private bool сКДFieldSpecified;
        
        private bool сККFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public СтрокаКредЗаймТочн3ТипСчетКонтрагент Контрагент {
            get {
                if ((this.контрагентField == null)) {
                    this.контрагентField = new СтрокаКредЗаймТочн3ТипСчетКонтрагент();
                }
                return this.контрагентField;
            }
            set {
                if ((this.контрагентField != null)) {
                    if ((контрагентField.Equals(value) != true)) {
                        this.контрагентField = value;
                        this.OnPropertyChanged("Контрагент");
                    }
                }
                else {
                    this.контрагентField = value;
                    this.OnPropertyChanged("Контрагент");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public СтрокаКредЗаймТочн3ТипСчетДоговор Договор {
            get {
                if ((this.договорField == null)) {
                    this.договорField = new СтрокаКредЗаймТочн3ТипСчетДоговор();
                }
                return this.договорField;
            }
            set {
                if ((this.договорField != null)) {
                    if ((договорField.Equals(value) != true)) {
                        this.договорField = value;
                        this.OnPropertyChanged("Договор");
                    }
                }
                else {
                    this.договорField = value;
                    this.OnPropertyChanged("Договор");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчета {
            get {
                return this.типСчетаField;
            }
            set {
                if ((типСчетаField.Equals(value) != true)) {
                    this.типСчетаField = value;
                    this.OnPropertyChanged("ТипСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаР {
            get {
                return this.кодСчетаРField;
            }
            set {
                if ((this.кодСчетаРField != null)) {
                    if ((кодСчетаРField.Equals(value) != true)) {
                        this.кодСчетаРField = value;
                        this.OnPropertyChanged("КодСчетаР");
                    }
                }
                else {
                    this.кодСчетаРField = value;
                    this.OnPropertyChanged("КодСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаР {
            get {
                return this.типСчетаРField;
            }
            set {
                if ((типСчетаРField.Equals(value) != true)) {
                    this.типСчетаРField = value;
                    this.OnPropertyChanged("ТипСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРSpecified {
            get {
                return this.типСчетаРFieldSpecified;
            }
            set {
                if ((типСчетаРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаРР {
            get {
                return this.кодСчетаРРField;
            }
            set {
                if ((this.кодСчетаРРField != null)) {
                    if ((кодСчетаРРField.Equals(value) != true)) {
                        this.кодСчетаРРField = value;
                        this.OnPropertyChanged("КодСчетаРР");
                    }
                }
                else {
                    this.кодСчетаРРField = value;
                    this.OnPropertyChanged("КодСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаРР {
            get {
                return this.типСчетаРРField;
            }
            set {
                if ((типСчетаРРField.Equals(value) != true)) {
                    this.типСчетаРРField = value;
                    this.OnPropertyChanged("ТипСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРРSpecified {
            get {
                return this.типСчетаРРFieldSpecified;
            }
            set {
                if ((типСчетаРРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНД {
            get {
                return this.сНДField;
            }
            set {
                if ((this.сНДField != null)) {
                    if ((сНДField.Equals(value) != true)) {
                        this.сНДField = value;
                        this.OnPropertyChanged("СНД");
                    }
                }
                else {
                    this.сНДField = value;
                    this.OnPropertyChanged("СНД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНК {
            get {
                return this.сНКField;
            }
            set {
                if ((this.сНКField != null)) {
                    if ((сНКField.Equals(value) != true)) {
                        this.сНКField = value;
                        this.OnPropertyChanged("СНК");
                    }
                }
                else {
                    this.сНКField = value;
                    this.OnPropertyChanged("СНК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДО {
            get {
                return this.доField;
            }
            set {
                if ((this.доField != null)) {
                    if ((доField.Equals(value) != true)) {
                        this.доField = value;
                        this.OnPropertyChanged("ДО");
                    }
                }
                else {
                    this.доField = value;
                    this.OnPropertyChanged("ДО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal КО {
            get {
                return this.коField;
            }
            set {
                if ((this.коField != null)) {
                    if ((коField.Equals(value) != true)) {
                        this.коField = value;
                        this.OnPropertyChanged("КО");
                    }
                }
                else {
                    this.коField = value;
                    this.OnPropertyChanged("КО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКД {
            get {
                return this.сКДField;
            }
            set {
                if ((this.сКДField != null)) {
                    if ((сКДField.Equals(value) != true)) {
                        this.сКДField = value;
                        this.OnPropertyChanged("СКД");
                    }
                }
                else {
                    this.сКДField = value;
                    this.OnPropertyChanged("СКД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКК {
            get {
                return this.сККField;
            }
            set {
                if ((this.сККField != null)) {
                    if ((сККField.Equals(value) != true)) {
                        this.сККField = value;
                        this.OnPropertyChanged("СКК");
                    }
                }
                else {
                    this.сККField = value;
                    this.OnPropertyChanged("СКК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНДВал {
            get {
                return this.сНДВалField;
            }
            set {
                if ((this.сНДВалField != null)) {
                    if ((сНДВалField.Equals(value) != true)) {
                        this.сНДВалField = value;
                        this.OnPropertyChanged("СНДВал");
                    }
                }
                else {
                    this.сНДВалField = value;
                    this.OnPropertyChanged("СНДВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СНДВалSpecified {
            get {
                return this.сНДВалFieldSpecified;
            }
            set {
                if ((сНДВалFieldSpecified.Equals(value) != true)) {
                    this.сНДВалFieldSpecified = value;
                    this.OnPropertyChanged("СНДВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНКВал {
            get {
                return this.сНКВалField;
            }
            set {
                if ((this.сНКВалField != null)) {
                    if ((сНКВалField.Equals(value) != true)) {
                        this.сНКВалField = value;
                        this.OnPropertyChanged("СНКВал");
                    }
                }
                else {
                    this.сНКВалField = value;
                    this.OnPropertyChanged("СНКВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СНКВалSpecified {
            get {
                return this.сНКВалFieldSpecified;
            }
            set {
                if ((сНКВалFieldSpecified.Equals(value) != true)) {
                    this.сНКВалFieldSpecified = value;
                    this.OnPropertyChanged("СНКВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДОВал {
            get {
                return this.дОВалField;
            }
            set {
                if ((this.дОВалField != null)) {
                    if ((дОВалField.Equals(value) != true)) {
                        this.дОВалField = value;
                        this.OnPropertyChanged("ДОВал");
                    }
                }
                else {
                    this.дОВалField = value;
                    this.OnPropertyChanged("ДОВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДОВалSpecified {
            get {
                return this.дОВалFieldSpecified;
            }
            set {
                if ((дОВалFieldSpecified.Equals(value) != true)) {
                    this.дОВалFieldSpecified = value;
                    this.OnPropertyChanged("ДОВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal КОВал {
            get {
                return this.кОВалField;
            }
            set {
                if ((this.кОВалField != null)) {
                    if ((кОВалField.Equals(value) != true)) {
                        this.кОВалField = value;
                        this.OnPropertyChanged("КОВал");
                    }
                }
                else {
                    this.кОВалField = value;
                    this.OnPropertyChanged("КОВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool КОВалSpecified {
            get {
                return this.кОВалFieldSpecified;
            }
            set {
                if ((кОВалFieldSpecified.Equals(value) != true)) {
                    this.кОВалFieldSpecified = value;
                    this.OnPropertyChanged("КОВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКДВал {
            get {
                return this.сКДВалField;
            }
            set {
                if ((this.сКДВалField != null)) {
                    if ((сКДВалField.Equals(value) != true)) {
                        this.сКДВалField = value;
                        this.OnPropertyChanged("СКДВал");
                    }
                }
                else {
                    this.сКДВалField = value;
                    this.OnPropertyChanged("СКДВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СКДВалSpecified {
            get {
                return this.сКДВалFieldSpecified;
            }
            set {
                if ((сКДВалFieldSpecified.Equals(value) != true)) {
                    this.сКДВалFieldSpecified = value;
                    this.OnPropertyChanged("СКДВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СККВал {
            get {
                return this.сККВалField;
            }
            set {
                if ((this.сККВалField != null)) {
                    if ((сККВалField.Equals(value) != true)) {
                        this.сККВалField = value;
                        this.OnPropertyChanged("СККВал");
                    }
                }
                else {
                    this.сККВалField = value;
                    this.OnPropertyChanged("СККВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СККВалSpecified {
            get {
                return this.сККВалFieldSpecified;
            }
            set {
                if ((сККВалFieldSpecified.Equals(value) != true)) {
                    this.сККВалFieldSpecified = value;
                    this.OnPropertyChanged("СККВалSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаКредЗаймТочн3ТипСчет));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КонтрагентSpecified {
            get {
                return контрагентFieldSpecified;
            }
            set {
                контрагентFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДоговорSpecified {
            get {
                return договорFieldSpecified;
            }
            set {
                договорFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипСчетаSpecified {
            get {
                return типСчетаFieldSpecified;
            }
            set {
                типСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРSpecified {
            get {
                return кодСчетаРFieldSpecified;
            }
            set {
                кодСчетаРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРРSpecified {
            get {
                return кодСчетаРРFieldSpecified;
            }
            set {
                кодСчетаРРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНДSpecified {
            get {
                return сНДFieldSpecified;
            }
            set {
                сНДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНКSpecified {
            get {
                return сНКFieldSpecified;
            }
            set {
                сНКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДОSpecified {
            get {
                return дОFieldSpecified;
            }
            set {
                дОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КОSpecified {
            get {
                return кОFieldSpecified;
            }
            set {
                кОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СКДSpecified {
            get {
                return сКДFieldSpecified;
            }
            set {
                сКДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СККSpecified {
            get {
                return сККFieldSpecified;
            }
            set {
                сККFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипСчет object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаКредЗаймТочн3ТипСчет object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипСчет);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипСчет obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипСчет Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаКредЗаймТочн3ТипСчет)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипСчет object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаКредЗаймТочн3ТипСчет object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипСчет);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипСчет obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипСчет LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаКредЗаймТочн3ТипСчетКонтрагент : System.ComponentModel.INotifyPropertyChanged {
        
        private string наименованиеField;
        
        private string иННField;
        
        private string кППField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наименованиеFieldSpecified;
        
        private bool иННFieldSpecified;
        
        private bool кППFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаКредЗаймТочн3ТипСчетКонтрагент));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипСчетКонтрагент object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаКредЗаймТочн3ТипСчетКонтрагент object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипСчетКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипСчетКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипСчетКонтрагент);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипСчетКонтрагент obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипСчетКонтрагент Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаКредЗаймТочн3ТипСчетКонтрагент)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипСчетКонтрагент object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаКредЗаймТочн3ТипСчетКонтрагент object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипСчетКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипСчетКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипСчетКонтрагент);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипСчетКонтрагент obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипСчетКонтрагент LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаКредЗаймТочн3ТипСчетДоговор : System.ComponentModel.INotifyPropertyChanged {
        
        private List<СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа> датаПлатежаField;
        
        private string представлениеField;
        
        private string номерField;
        
        private string датаField;
        
        private string срокПогашенияField;
        
        private string продуктField;
        
        private decimal суммаПоДоговоруField;
        
        private bool суммаПоДоговоруFieldSpecified;
        
        private string кодВалютыField;
        
        private decimal ставкаField;
        
        private bool ставкаFieldSpecified;
        
        private decimal сумДогВалField;
        
        private bool сумДогВалFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool датаПлатежаFieldSpecified;
        
        private bool представлениеFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool датаFieldSpecified;
        
        private bool срокПогашенияFieldSpecified;
        
        private bool продуктFieldSpecified;
        
        private bool кодВалютыFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ДатаПлатежа", Order=0)]
        public List<СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа> ДатаПлатежа {
            get {
                if ((this.датаПлатежаField == null)) {
                    this.датаПлатежаField = new List<СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа>();
                }
                return this.датаПлатежаField;
            }
            set {
                if ((this.датаПлатежаField != null)) {
                    if ((датаПлатежаField.Equals(value) != true)) {
                        this.датаПлатежаField = value;
                        this.OnPropertyChanged("ДатаПлатежа");
                    }
                }
                else {
                    this.датаПлатежаField = value;
                    this.OnPropertyChanged("ДатаПлатежа");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Представление {
            get {
                return this.представлениеField;
            }
            set {
                if ((this.представлениеField != null)) {
                    if ((представлениеField.Equals(value) != true)) {
                        this.представлениеField = value;
                        this.OnPropertyChanged("Представление");
                    }
                }
                else {
                    this.представлениеField = value;
                    this.OnPropertyChanged("Представление");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СрокПогашения {
            get {
                return this.срокПогашенияField;
            }
            set {
                if ((this.срокПогашенияField != null)) {
                    if ((срокПогашенияField.Equals(value) != true)) {
                        this.срокПогашенияField = value;
                        this.OnPropertyChanged("СрокПогашения");
                    }
                }
                else {
                    this.срокПогашенияField = value;
                    this.OnPropertyChanged("СрокПогашения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Продукт {
            get {
                return this.продуктField;
            }
            set {
                if ((this.продуктField != null)) {
                    if ((продуктField.Equals(value) != true)) {
                        this.продуктField = value;
                        this.OnPropertyChanged("Продукт");
                    }
                }
                else {
                    this.продуктField = value;
                    this.OnPropertyChanged("Продукт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаПоДоговору {
            get {
                return this.суммаПоДоговоруField;
            }
            set {
                if ((this.суммаПоДоговоруField != null)) {
                    if ((суммаПоДоговоруField.Equals(value) != true)) {
                        this.суммаПоДоговоруField = value;
                        this.OnPropertyChanged("СуммаПоДоговору");
                    }
                }
                else {
                    this.суммаПоДоговоруField = value;
                    this.OnPropertyChanged("СуммаПоДоговору");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СуммаПоДоговоруSpecified {
            get {
                return this.суммаПоДоговоруFieldSpecified;
            }
            set {
                if ((суммаПоДоговоруFieldSpecified.Equals(value) != true)) {
                    this.суммаПоДоговоруFieldSpecified = value;
                    this.OnPropertyChanged("СуммаПоДоговоруSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВалюты {
            get {
                return this.кодВалютыField;
            }
            set {
                if ((this.кодВалютыField != null)) {
                    if ((кодВалютыField.Equals(value) != true)) {
                        this.кодВалютыField = value;
                        this.OnPropertyChanged("КодВалюты");
                    }
                }
                else {
                    this.кодВалютыField = value;
                    this.OnPropertyChanged("КодВалюты");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Ставка {
            get {
                return this.ставкаField;
            }
            set {
                if ((this.ставкаField != null)) {
                    if ((ставкаField.Equals(value) != true)) {
                        this.ставкаField = value;
                        this.OnPropertyChanged("Ставка");
                    }
                }
                else {
                    this.ставкаField = value;
                    this.OnPropertyChanged("Ставка");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СтавкаSpecified {
            get {
                return this.ставкаFieldSpecified;
            }
            set {
                if ((ставкаFieldSpecified.Equals(value) != true)) {
                    this.ставкаFieldSpecified = value;
                    this.OnPropertyChanged("СтавкаSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СумДогВал {
            get {
                return this.сумДогВалField;
            }
            set {
                if ((this.сумДогВалField != null)) {
                    if ((сумДогВалField.Equals(value) != true)) {
                        this.сумДогВалField = value;
                        this.OnPropertyChanged("СумДогВал");
                    }
                }
                else {
                    this.сумДогВалField = value;
                    this.OnPropertyChanged("СумДогВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СумДогВалSpecified {
            get {
                return this.сумДогВалFieldSpecified;
            }
            set {
                if ((сумДогВалFieldSpecified.Equals(value) != true)) {
                    this.сумДогВалFieldSpecified = value;
                    this.OnPropertyChanged("СумДогВалSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаКредЗаймТочн3ТипСчетДоговор));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаПлатежаSpecified {
            get {
                return датаПлатежаFieldSpecified;
            }
            set {
                датаПлатежаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПредставлениеSpecified {
            get {
                return представлениеFieldSpecified;
            }
            set {
                представлениеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СрокПогашенияSpecified {
            get {
                return срокПогашенияFieldSpecified;
            }
            set {
                срокПогашенияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПродуктSpecified {
            get {
                return продуктFieldSpecified;
            }
            set {
                продуктFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодВалютыSpecified {
            get {
                return кодВалютыFieldSpecified;
            }
            set {
                кодВалютыFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипСчетДоговор object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаКредЗаймТочн3ТипСчетДоговор object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипСчетДоговор object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипСчетДоговор obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипСчетДоговор);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипСчетДоговор obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипСчетДоговор Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаКредЗаймТочн3ТипСчетДоговор)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипСчетДоговор object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаКредЗаймТочн3ТипСчетДоговор object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипСчетДоговор object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипСчетДоговор obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипСчетДоговор);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипСчетДоговор obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипСчетДоговор LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа : System.ComponentModel.INotifyPropertyChanged {
        
        private string датаField;
        
        private decimal суммаField;
        
        private decimal оснДолгField;
        
        private bool оснДолгFieldSpecified;
        
        private decimal суммаВалField;
        
        private bool суммаВалFieldSpecified;
        
        private decimal оснДолгВалField;
        
        private bool оснДолгВалFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool датаFieldSpecified;
        
        private bool суммаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Сумма {
            get {
                return this.суммаField;
            }
            set {
                if ((this.суммаField != null)) {
                    if ((суммаField.Equals(value) != true)) {
                        this.суммаField = value;
                        this.OnPropertyChanged("Сумма");
                    }
                }
                else {
                    this.суммаField = value;
                    this.OnPropertyChanged("Сумма");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОснДолг {
            get {
                return this.оснДолгField;
            }
            set {
                if ((this.оснДолгField != null)) {
                    if ((оснДолгField.Equals(value) != true)) {
                        this.оснДолгField = value;
                        this.OnPropertyChanged("ОснДолг");
                    }
                }
                else {
                    this.оснДолгField = value;
                    this.OnPropertyChanged("ОснДолг");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ОснДолгSpecified {
            get {
                return this.оснДолгFieldSpecified;
            }
            set {
                if ((оснДолгFieldSpecified.Equals(value) != true)) {
                    this.оснДолгFieldSpecified = value;
                    this.OnPropertyChanged("ОснДолгSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаВал {
            get {
                return this.суммаВалField;
            }
            set {
                if ((this.суммаВалField != null)) {
                    if ((суммаВалField.Equals(value) != true)) {
                        this.суммаВалField = value;
                        this.OnPropertyChanged("СуммаВал");
                    }
                }
                else {
                    this.суммаВалField = value;
                    this.OnPropertyChanged("СуммаВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СуммаВалSpecified {
            get {
                return this.суммаВалFieldSpecified;
            }
            set {
                if ((суммаВалFieldSpecified.Equals(value) != true)) {
                    this.суммаВалFieldSpecified = value;
                    this.OnPropertyChanged("СуммаВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОснДолгВал {
            get {
                return this.оснДолгВалField;
            }
            set {
                if ((this.оснДолгВалField != null)) {
                    if ((оснДолгВалField.Equals(value) != true)) {
                        this.оснДолгВалField = value;
                        this.OnPropertyChanged("ОснДолгВал");
                    }
                }
                else {
                    this.оснДолгВалField = value;
                    this.OnPropertyChanged("ОснДолгВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ОснДолгВалSpecified {
            get {
                return this.оснДолгВалFieldSpecified;
            }
            set {
                if ((оснДолгВалFieldSpecified.Equals(value) != true)) {
                    this.оснДолгВалFieldSpecified = value;
                    this.OnPropertyChanged("ОснДолгВалSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаSpecified {
            get {
                return суммаFieldSpecified;
            }
            set {
                суммаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипСчетДоговорДатаПлатежа LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlRootAttribute("ВидСчетаТип", Namespace="", IsNullable=false)]
    public enum СтрокаОСВСТочностью3ТипСчетТипСчета {
        
        /// <remarks/>
        А,
        
        /// <remarks/>
        АП,
        
        /// <remarks/>
        П,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаКредЗаймТочн3ТипПросрЗад : System.ComponentModel.INotifyPropertyChanged {
        
        private string датаОбразField;
        
        private string датаПогашField;
        
        private decimal суммаField;
        
        private decimal суммаВалField;
        
        private bool суммаВалFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool датаОбразFieldSpecified;
        
        private bool датаПогашFieldSpecified;
        
        private bool суммаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаОбраз {
            get {
                return this.датаОбразField;
            }
            set {
                if ((this.датаОбразField != null)) {
                    if ((датаОбразField.Equals(value) != true)) {
                        this.датаОбразField = value;
                        this.OnPropertyChanged("ДатаОбраз");
                    }
                }
                else {
                    this.датаОбразField = value;
                    this.OnPropertyChanged("ДатаОбраз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаПогаш {
            get {
                return this.датаПогашField;
            }
            set {
                if ((this.датаПогашField != null)) {
                    if ((датаПогашField.Equals(value) != true)) {
                        this.датаПогашField = value;
                        this.OnPropertyChanged("ДатаПогаш");
                    }
                }
                else {
                    this.датаПогашField = value;
                    this.OnPropertyChanged("ДатаПогаш");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Сумма {
            get {
                return this.суммаField;
            }
            set {
                if ((this.суммаField != null)) {
                    if ((суммаField.Equals(value) != true)) {
                        this.суммаField = value;
                        this.OnPropertyChanged("Сумма");
                    }
                }
                else {
                    this.суммаField = value;
                    this.OnPropertyChanged("Сумма");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаВал {
            get {
                return this.суммаВалField;
            }
            set {
                if ((this.суммаВалField != null)) {
                    if ((суммаВалField.Equals(value) != true)) {
                        this.суммаВалField = value;
                        this.OnPropertyChanged("СуммаВал");
                    }
                }
                else {
                    this.суммаВалField = value;
                    this.OnPropertyChanged("СуммаВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СуммаВалSpecified {
            get {
                return this.суммаВалFieldSpecified;
            }
            set {
                if ((суммаВалFieldSpecified.Equals(value) != true)) {
                    this.суммаВалFieldSpecified = value;
                    this.OnPropertyChanged("СуммаВалSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаКредЗаймТочн3ТипПросрЗад));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаОбразSpecified {
            get {
                return датаОбразFieldSpecified;
            }
            set {
                датаОбразFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаПогашSpecified {
            get {
                return датаПогашFieldSpecified;
            }
            set {
                датаПогашFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаSpecified {
            get {
                return суммаFieldSpecified;
            }
            set {
                суммаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипПросрЗад object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаКредЗаймТочн3ТипПросрЗад object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипПросрЗад object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипПросрЗад obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипПросрЗад);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипПросрЗад obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипПросрЗад Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаКредЗаймТочн3ТипПросрЗад)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипПросрЗад object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаКредЗаймТочн3ТипПросрЗад object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипПросрЗад object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипПросрЗад obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипПросрЗад);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипПросрЗад obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипПросрЗад LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаКредЗаймТочн3ТипОбесп : System.ComponentModel.INotifyPropertyChanged {
        
        private string видОбеспField;
        
        private string датаОбеспField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool видОбеспFieldSpecified;
        
        private bool датаОбеспFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВидОбесп {
            get {
                return this.видОбеспField;
            }
            set {
                if ((this.видОбеспField != null)) {
                    if ((видОбеспField.Equals(value) != true)) {
                        this.видОбеспField = value;
                        this.OnPropertyChanged("ВидОбесп");
                    }
                }
                else {
                    this.видОбеспField = value;
                    this.OnPropertyChanged("ВидОбесп");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаОбесп {
            get {
                return this.датаОбеспField;
            }
            set {
                if ((this.датаОбеспField != null)) {
                    if ((датаОбеспField.Equals(value) != true)) {
                        this.датаОбеспField = value;
                        this.OnPropertyChanged("ДатаОбесп");
                    }
                }
                else {
                    this.датаОбеспField = value;
                    this.OnPropertyChanged("ДатаОбесп");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаКредЗаймТочн3ТипОбесп));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВидОбеспSpecified {
            get {
                return видОбеспFieldSpecified;
            }
            set {
                видОбеспFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаОбеспSpecified {
            get {
                return датаОбеспFieldSpecified;
            }
            set {
                датаОбеспFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипОбесп object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаКредЗаймТочн3ТипОбесп object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипОбесп object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипОбесп obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипОбесп);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаКредЗаймТочн3ТипОбесп obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипОбесп Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаКредЗаймТочн3ТипОбесп)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаКредЗаймТочн3ТипОбесп object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаКредЗаймТочн3ТипОбесп object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаКредЗаймТочн3ТипОбесп object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипОбесп obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаКредЗаймТочн3ТипОбесп);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаКредЗаймТочн3ТипОбесп obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаКредЗаймТочн3ТипОбесп LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СтрокаОСВСТочностью3Тип : System.ComponentModel.INotifyPropertyChanged {
        
        private СтрокаОСВСТочностью3ТипСчет счетField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool счетFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public СтрокаОСВСТочностью3ТипСчет Счет {
            get {
                if ((this.счетField == null)) {
                    this.счетField = new СтрокаОСВСТочностью3ТипСчет();
                }
                return this.счетField;
            }
            set {
                if ((this.счетField != null)) {
                    if ((счетField.Equals(value) != true)) {
                        this.счетField = value;
                        this.OnPropertyChanged("Счет");
                    }
                }
                else {
                    this.счетField = value;
                    this.OnPropertyChanged("Счет");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВСТочностью3Тип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СчетSpecified {
            get {
                return счетFieldSpecified;
            }
            set {
                счетFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3Тип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВСТочностью3Тип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3Тип obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3Тип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3Тип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3Тип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВСТочностью3Тип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3Тип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВСТочностью3Тип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3Тип obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3Тип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3Тип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3Тип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВСТочностью3ТипСчет : System.ComponentModel.INotifyPropertyChanged {
        
        private СтрокаОСВСТочностью3ТипСчетКонтрагент контрагентField;
        
        private СтрокаОСВСТочностью3ТипСчетДоговор договорField;
        
        private СтрокаОСВСТочностью3ТипСчетДокументРасчетов документРасчетовField;
        
        private СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода видДоходаРасходаField;
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаField;
        
        private string кодСчетаРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРField;
        
        private bool типСчетаРFieldSpecified;
        
        private string кодСчетаРРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРРField;
        
        private bool типСчетаРРFieldSpecified;
        
        private decimal сНДField;
        
        private decimal сНКField;
        
        private decimal доField;
        
        private decimal коField;
        
        private decimal сКДField;
        
        private decimal сККField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool контрагентFieldSpecified;
        
        private bool договорFieldSpecified;
        
        private bool документРасчетовFieldSpecified;
        
        private bool видДоходаРасходаFieldSpecified;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        private bool типСчетаFieldSpecified;
        
        private bool кодСчетаРFieldSpecified;
        
        private bool кодСчетаРРFieldSpecified;
        
        private bool сНДFieldSpecified;
        
        private bool сНКFieldSpecified;
        
        private bool дОFieldSpecified;
        
        private bool кОFieldSpecified;
        
        private bool сКДFieldSpecified;
        
        private bool сККFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public СтрокаОСВСТочностью3ТипСчетКонтрагент Контрагент {
            get {
                if ((this.контрагентField == null)) {
                    this.контрагентField = new СтрокаОСВСТочностью3ТипСчетКонтрагент();
                }
                return this.контрагентField;
            }
            set {
                if ((this.контрагентField != null)) {
                    if ((контрагентField.Equals(value) != true)) {
                        this.контрагентField = value;
                        this.OnPropertyChanged("Контрагент");
                    }
                }
                else {
                    this.контрагентField = value;
                    this.OnPropertyChanged("Контрагент");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public СтрокаОСВСТочностью3ТипСчетДоговор Договор {
            get {
                if ((this.договорField == null)) {
                    this.договорField = new СтрокаОСВСТочностью3ТипСчетДоговор();
                }
                return this.договорField;
            }
            set {
                if ((this.договорField != null)) {
                    if ((договорField.Equals(value) != true)) {
                        this.договорField = value;
                        this.OnPropertyChanged("Договор");
                    }
                }
                else {
                    this.договорField = value;
                    this.OnPropertyChanged("Договор");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public СтрокаОСВСТочностью3ТипСчетДокументРасчетов ДокументРасчетов {
            get {
                if ((this.документРасчетовField == null)) {
                    this.документРасчетовField = new СтрокаОСВСТочностью3ТипСчетДокументРасчетов();
                }
                return this.документРасчетовField;
            }
            set {
                if ((this.документРасчетовField != null)) {
                    if ((документРасчетовField.Equals(value) != true)) {
                        this.документРасчетовField = value;
                        this.OnPropertyChanged("ДокументРасчетов");
                    }
                }
                else {
                    this.документРасчетовField = value;
                    this.OnPropertyChanged("ДокументРасчетов");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода ВидДоходаРасхода {
            get {
                if ((this.видДоходаРасходаField == null)) {
                    this.видДоходаРасходаField = new СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода();
                }
                return this.видДоходаРасходаField;
            }
            set {
                if ((this.видДоходаРасходаField != null)) {
                    if ((видДоходаРасходаField.Equals(value) != true)) {
                        this.видДоходаРасходаField = value;
                        this.OnPropertyChanged("ВидДоходаРасхода");
                    }
                }
                else {
                    this.видДоходаРасходаField = value;
                    this.OnPropertyChanged("ВидДоходаРасхода");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчета {
            get {
                return this.типСчетаField;
            }
            set {
                if ((типСчетаField.Equals(value) != true)) {
                    this.типСчетаField = value;
                    this.OnPropertyChanged("ТипСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаР {
            get {
                return this.кодСчетаРField;
            }
            set {
                if ((this.кодСчетаРField != null)) {
                    if ((кодСчетаРField.Equals(value) != true)) {
                        this.кодСчетаРField = value;
                        this.OnPropertyChanged("КодСчетаР");
                    }
                }
                else {
                    this.кодСчетаРField = value;
                    this.OnPropertyChanged("КодСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаР {
            get {
                return this.типСчетаРField;
            }
            set {
                if ((типСчетаРField.Equals(value) != true)) {
                    this.типСчетаРField = value;
                    this.OnPropertyChanged("ТипСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРSpecified {
            get {
                return this.типСчетаРFieldSpecified;
            }
            set {
                if ((типСчетаРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаРР {
            get {
                return this.кодСчетаРРField;
            }
            set {
                if ((this.кодСчетаРРField != null)) {
                    if ((кодСчетаРРField.Equals(value) != true)) {
                        this.кодСчетаРРField = value;
                        this.OnPropertyChanged("КодСчетаРР");
                    }
                }
                else {
                    this.кодСчетаРРField = value;
                    this.OnPropertyChanged("КодСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаРР {
            get {
                return this.типСчетаРРField;
            }
            set {
                if ((типСчетаРРField.Equals(value) != true)) {
                    this.типСчетаРРField = value;
                    this.OnPropertyChanged("ТипСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРРSpecified {
            get {
                return this.типСчетаРРFieldSpecified;
            }
            set {
                if ((типСчетаРРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНД {
            get {
                return this.сНДField;
            }
            set {
                if ((this.сНДField != null)) {
                    if ((сНДField.Equals(value) != true)) {
                        this.сНДField = value;
                        this.OnPropertyChanged("СНД");
                    }
                }
                else {
                    this.сНДField = value;
                    this.OnPropertyChanged("СНД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНК {
            get {
                return this.сНКField;
            }
            set {
                if ((this.сНКField != null)) {
                    if ((сНКField.Equals(value) != true)) {
                        this.сНКField = value;
                        this.OnPropertyChanged("СНК");
                    }
                }
                else {
                    this.сНКField = value;
                    this.OnPropertyChanged("СНК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДО {
            get {
                return this.доField;
            }
            set {
                if ((this.доField != null)) {
                    if ((доField.Equals(value) != true)) {
                        this.доField = value;
                        this.OnPropertyChanged("ДО");
                    }
                }
                else {
                    this.доField = value;
                    this.OnPropertyChanged("ДО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal КО {
            get {
                return this.коField;
            }
            set {
                if ((this.коField != null)) {
                    if ((коField.Equals(value) != true)) {
                        this.коField = value;
                        this.OnPropertyChanged("КО");
                    }
                }
                else {
                    this.коField = value;
                    this.OnPropertyChanged("КО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКД {
            get {
                return this.сКДField;
            }
            set {
                if ((this.сКДField != null)) {
                    if ((сКДField.Equals(value) != true)) {
                        this.сКДField = value;
                        this.OnPropertyChanged("СКД");
                    }
                }
                else {
                    this.сКДField = value;
                    this.OnPropertyChanged("СКД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКК {
            get {
                return this.сККField;
            }
            set {
                if ((this.сККField != null)) {
                    if ((сККField.Equals(value) != true)) {
                        this.сККField = value;
                        this.OnPropertyChanged("СКК");
                    }
                }
                else {
                    this.сККField = value;
                    this.OnPropertyChanged("СКК");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВСТочностью3ТипСчет));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КонтрагентSpecified {
            get {
                return контрагентFieldSpecified;
            }
            set {
                контрагентFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДоговорSpecified {
            get {
                return договорFieldSpecified;
            }
            set {
                договорFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДокументРасчетовSpecified {
            get {
                return документРасчетовFieldSpecified;
            }
            set {
                документРасчетовFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВидДоходаРасходаSpecified {
            get {
                return видДоходаРасходаFieldSpecified;
            }
            set {
                видДоходаРасходаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипСчетаSpecified {
            get {
                return типСчетаFieldSpecified;
            }
            set {
                типСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРSpecified {
            get {
                return кодСчетаРFieldSpecified;
            }
            set {
                кодСчетаРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРРSpecified {
            get {
                return кодСчетаРРFieldSpecified;
            }
            set {
                кодСчетаРРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНДSpecified {
            get {
                return сНДFieldSpecified;
            }
            set {
                сНДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНКSpecified {
            get {
                return сНКFieldSpecified;
            }
            set {
                сНКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДОSpecified {
            get {
                return дОFieldSpecified;
            }
            set {
                дОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КОSpecified {
            get {
                return кОFieldSpecified;
            }
            set {
                кОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СКДSpecified {
            get {
                return сКДFieldSpecified;
            }
            set {
                сКДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СККSpecified {
            get {
                return сККFieldSpecified;
            }
            set {
                сККFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчет object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВСТочностью3ТипСчет object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчет);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчет obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчет Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВСТочностью3ТипСчет)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчет object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВСТочностью3ТипСчет object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчет);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчет obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчет LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВСТочностью3ТипСчетКонтрагент : System.ComponentModel.INotifyPropertyChanged {
        
        private string наименованиеField;
        
        private string иННField;
        
        private string кППField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наименованиеFieldSpecified;
        
        private bool иННFieldSpecified;
        
        private bool кППFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВСТочностью3ТипСчетКонтрагент));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчетКонтрагент object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВСТочностью3ТипСчетКонтрагент object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчетКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчетКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчетКонтрагент);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчетКонтрагент obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчетКонтрагент Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВСТочностью3ТипСчетКонтрагент)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчетКонтрагент object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВСТочностью3ТипСчетКонтрагент object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчетКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчетКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчетКонтрагент);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчетКонтрагент obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчетКонтрагент LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВСТочностью3ТипСчетДоговор : System.ComponentModel.INotifyPropertyChanged {
        
        private List<СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа> датаПлатежаField;
        
        private string представлениеField;
        
        private string номерField;
        
        private string датаField;
        
        private string срокОплатыField;
        
        private string срокПогашенияField;
        
        private string срокОкончанияField;
        
        private string продуктField;
        
        private decimal суммаПоДоговоруField;
        
        private bool суммаПоДоговоруFieldSpecified;
        
        private string кодВалютыField;
        
        private decimal ставкаField;
        
        private bool ставкаFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool датаПлатежаFieldSpecified;
        
        private bool представлениеFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool датаFieldSpecified;
        
        private bool срокОплатыFieldSpecified;
        
        private bool срокПогашенияFieldSpecified;
        
        private bool срокОкончанияFieldSpecified;
        
        private bool продуктFieldSpecified;
        
        private bool кодВалютыFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ДатаПлатежа", Order=0)]
        public List<СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа> ДатаПлатежа {
            get {
                if ((this.датаПлатежаField == null)) {
                    this.датаПлатежаField = new List<СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа>();
                }
                return this.датаПлатежаField;
            }
            set {
                if ((this.датаПлатежаField != null)) {
                    if ((датаПлатежаField.Equals(value) != true)) {
                        this.датаПлатежаField = value;
                        this.OnPropertyChanged("ДатаПлатежа");
                    }
                }
                else {
                    this.датаПлатежаField = value;
                    this.OnPropertyChanged("ДатаПлатежа");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Представление {
            get {
                return this.представлениеField;
            }
            set {
                if ((this.представлениеField != null)) {
                    if ((представлениеField.Equals(value) != true)) {
                        this.представлениеField = value;
                        this.OnPropertyChanged("Представление");
                    }
                }
                else {
                    this.представлениеField = value;
                    this.OnPropertyChanged("Представление");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СрокОплаты {
            get {
                return this.срокОплатыField;
            }
            set {
                if ((this.срокОплатыField != null)) {
                    if ((срокОплатыField.Equals(value) != true)) {
                        this.срокОплатыField = value;
                        this.OnPropertyChanged("СрокОплаты");
                    }
                }
                else {
                    this.срокОплатыField = value;
                    this.OnPropertyChanged("СрокОплаты");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СрокПогашения {
            get {
                return this.срокПогашенияField;
            }
            set {
                if ((this.срокПогашенияField != null)) {
                    if ((срокПогашенияField.Equals(value) != true)) {
                        this.срокПогашенияField = value;
                        this.OnPropertyChanged("СрокПогашения");
                    }
                }
                else {
                    this.срокПогашенияField = value;
                    this.OnPropertyChanged("СрокПогашения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СрокОкончания {
            get {
                return this.срокОкончанияField;
            }
            set {
                if ((this.срокОкончанияField != null)) {
                    if ((срокОкончанияField.Equals(value) != true)) {
                        this.срокОкончанияField = value;
                        this.OnPropertyChanged("СрокОкончания");
                    }
                }
                else {
                    this.срокОкончанияField = value;
                    this.OnPropertyChanged("СрокОкончания");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Продукт {
            get {
                return this.продуктField;
            }
            set {
                if ((this.продуктField != null)) {
                    if ((продуктField.Equals(value) != true)) {
                        this.продуктField = value;
                        this.OnPropertyChanged("Продукт");
                    }
                }
                else {
                    this.продуктField = value;
                    this.OnPropertyChanged("Продукт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаПоДоговору {
            get {
                return this.суммаПоДоговоруField;
            }
            set {
                if ((this.суммаПоДоговоруField != null)) {
                    if ((суммаПоДоговоруField.Equals(value) != true)) {
                        this.суммаПоДоговоруField = value;
                        this.OnPropertyChanged("СуммаПоДоговору");
                    }
                }
                else {
                    this.суммаПоДоговоруField = value;
                    this.OnPropertyChanged("СуммаПоДоговору");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СуммаПоДоговоруSpecified {
            get {
                return this.суммаПоДоговоруFieldSpecified;
            }
            set {
                if ((суммаПоДоговоруFieldSpecified.Equals(value) != true)) {
                    this.суммаПоДоговоруFieldSpecified = value;
                    this.OnPropertyChanged("СуммаПоДоговоруSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВалюты {
            get {
                return this.кодВалютыField;
            }
            set {
                if ((this.кодВалютыField != null)) {
                    if ((кодВалютыField.Equals(value) != true)) {
                        this.кодВалютыField = value;
                        this.OnPropertyChanged("КодВалюты");
                    }
                }
                else {
                    this.кодВалютыField = value;
                    this.OnPropertyChanged("КодВалюты");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Ставка {
            get {
                return this.ставкаField;
            }
            set {
                if ((this.ставкаField != null)) {
                    if ((ставкаField.Equals(value) != true)) {
                        this.ставкаField = value;
                        this.OnPropertyChanged("Ставка");
                    }
                }
                else {
                    this.ставкаField = value;
                    this.OnPropertyChanged("Ставка");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СтавкаSpecified {
            get {
                return this.ставкаFieldSpecified;
            }
            set {
                if ((ставкаFieldSpecified.Equals(value) != true)) {
                    this.ставкаFieldSpecified = value;
                    this.OnPropertyChanged("СтавкаSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВСТочностью3ТипСчетДоговор));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаПлатежаSpecified {
            get {
                return датаПлатежаFieldSpecified;
            }
            set {
                датаПлатежаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПредставлениеSpecified {
            get {
                return представлениеFieldSpecified;
            }
            set {
                представлениеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СрокОплатыSpecified {
            get {
                return срокОплатыFieldSpecified;
            }
            set {
                срокОплатыFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СрокПогашенияSpecified {
            get {
                return срокПогашенияFieldSpecified;
            }
            set {
                срокПогашенияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СрокОкончанияSpecified {
            get {
                return срокОкончанияFieldSpecified;
            }
            set {
                срокОкончанияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПродуктSpecified {
            get {
                return продуктFieldSpecified;
            }
            set {
                продуктFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодВалютыSpecified {
            get {
                return кодВалютыFieldSpecified;
            }
            set {
                кодВалютыFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчетДоговор object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВСТочностью3ТипСчетДоговор object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчетДоговор object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчетДоговор obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчетДоговор);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчетДоговор obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчетДоговор Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВСТочностью3ТипСчетДоговор)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчетДоговор object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВСТочностью3ТипСчетДоговор object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчетДоговор object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчетДоговор obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчетДоговор);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчетДоговор obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчетДоговор LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа : System.ComponentModel.INotifyPropertyChanged {
        
        private string датаField;
        
        private decimal суммаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool датаFieldSpecified;
        
        private bool суммаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Сумма {
            get {
                return this.суммаField;
            }
            set {
                if ((this.суммаField != null)) {
                    if ((суммаField.Equals(value) != true)) {
                        this.суммаField = value;
                        this.OnPropertyChanged("Сумма");
                    }
                }
                else {
                    this.суммаField = value;
                    this.OnPropertyChanged("Сумма");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаSpecified {
            get {
                return суммаFieldSpecified;
            }
            set {
                суммаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчетДоговорДатаПлатежа LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВСТочностью3ТипСчетДокументРасчетов : System.ComponentModel.INotifyPropertyChanged {
        
        private string представлениеField;
        
        private string номерField;
        
        private string датаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool представлениеFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool датаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Представление {
            get {
                return this.представлениеField;
            }
            set {
                if ((this.представлениеField != null)) {
                    if ((представлениеField.Equals(value) != true)) {
                        this.представлениеField = value;
                        this.OnPropertyChanged("Представление");
                    }
                }
                else {
                    this.представлениеField = value;
                    this.OnPropertyChanged("Представление");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВСТочностью3ТипСчетДокументРасчетов));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПредставлениеSpecified {
            get {
                return представлениеFieldSpecified;
            }
            set {
                представлениеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчетДокументРасчетов object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВСТочностью3ТипСчетДокументРасчетов object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчетДокументРасчетов object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчетДокументРасчетов obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчетДокументРасчетов);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчетДокументРасчетов obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчетДокументРасчетов Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВСТочностью3ТипСчетДокументРасчетов)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчетДокументРасчетов object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВСТочностью3ТипСчетДокументРасчетов object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчетДокументРасчетов object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчетДокументРасчетов obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчетДокументРасчетов);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчетДокументРасчетов obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчетДокументРасчетов LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода : System.ComponentModel.INotifyPropertyChanged {
        
        private string наименованиеField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наименованиеFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВСТочностью3ТипСчетВидДоходаРасхода LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОП_ДТип : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ВПокОПТип> вПокОПField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool вПокОПFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокОП", Order=0)]
        public List<ВПокОПТип> ВПокОП {
            get {
                if ((this.вПокОПField == null)) {
                    this.вПокОПField = new List<ВПокОПТип>();
                }
                return this.вПокОПField;
            }
            set {
                if ((this.вПокОПField != null)) {
                    if ((вПокОПField.Equals(value) != true)) {
                        this.вПокОПField = value;
                        this.OnPropertyChanged("ВПокОП");
                    }
                }
                else {
                    this.вПокОПField = value;
                    this.OnPropertyChanged("ВПокОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОП_ДТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокОПSpecified {
            get {
                return вПокОПFieldSpecified;
            }
            set {
                вПокОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОП_ДТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОП_ДТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОП_ДТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОП_ДТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОП_ДТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОП_ДТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОП_ДТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОП_ДТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОП_ДТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОП_ДТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОП_ДТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОП_ДТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОП_ДТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОП_ДТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОП_ДТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ВПокОПТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string наимПокField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наимПокFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПок {
            get {
                return this.наимПокField;
            }
            set {
                if ((this.наимПокField != null)) {
                    if ((наимПокField.Equals(value) != true)) {
                        this.наимПокField = value;
                        this.OnPropertyChanged("НаимПок");
                    }
                }
                else {
                    this.наимПокField = value;
                    this.OnPropertyChanged("НаимПок");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВПокОПТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаимПокSpecified {
            get {
                return наимПокFieldSpecified;
            }
            set {
                наимПокFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ВПокОПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ВПокОПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ВПокОПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ВПокОПТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ВПокОПТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ВПокОПТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ВПокОПТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ВПокОПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ВПокОПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ВПокОПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ВПокОПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ВПокОПТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ВПокОПТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ВПокОПТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ВПокОПТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОПТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОПТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОПТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОПТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОПТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОПТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОПТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОПТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОПТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОПТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class КорКапПрТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string на31ДекПрПредField;
        
        private string измКапЧистПрField;
        
        private string измКапИнФактField;
        
        private string на31ДекПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool на31ДекПрПредFieldSpecified;
        
        private bool измКапЧистПрFieldSpecified;
        
        private bool измКапИнФактFieldSpecified;
        
        private bool на31ДекПредFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string На31ДекПрПред {
            get {
                return this.на31ДекПрПредField;
            }
            set {
                if ((this.на31ДекПрПредField != null)) {
                    if ((на31ДекПрПредField.Equals(value) != true)) {
                        this.на31ДекПрПредField = value;
                        this.OnPropertyChanged("На31ДекПрПред");
                    }
                }
                else {
                    this.на31ДекПрПредField = value;
                    this.OnPropertyChanged("На31ДекПрПред");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ИзмКапЧистПр {
            get {
                return this.измКапЧистПрField;
            }
            set {
                if ((this.измКапЧистПрField != null)) {
                    if ((измКапЧистПрField.Equals(value) != true)) {
                        this.измКапЧистПрField = value;
                        this.OnPropertyChanged("ИзмКапЧистПр");
                    }
                }
                else {
                    this.измКапЧистПрField = value;
                    this.OnPropertyChanged("ИзмКапЧистПр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ИзмКапИнФакт {
            get {
                return this.измКапИнФактField;
            }
            set {
                if ((this.измКапИнФактField != null)) {
                    if ((измКапИнФактField.Equals(value) != true)) {
                        this.измКапИнФактField = value;
                        this.OnPropertyChanged("ИзмКапИнФакт");
                    }
                }
                else {
                    this.измКапИнФактField = value;
                    this.OnPropertyChanged("ИзмКапИнФакт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string На31ДекПред {
            get {
                return this.на31ДекПредField;
            }
            set {
                if ((this.на31ДекПредField != null)) {
                    if ((на31ДекПредField.Equals(value) != true)) {
                        this.на31ДекПредField = value;
                        this.OnPropertyChanged("На31ДекПред");
                    }
                }
                else {
                    this.на31ДекПредField = value;
                    this.OnPropertyChanged("На31ДекПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(КорКапПрТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool На31ДекПрПредSpecified {
            get {
                return на31ДекПрПредFieldSpecified;
            }
            set {
                на31ДекПрПредFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмКапЧистПрSpecified {
            get {
                return измКапЧистПрFieldSpecified;
            }
            set {
                измКапЧистПрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмКапИнФактSpecified {
            get {
                return измКапИнФактFieldSpecified;
            }
            set {
                измКапИнФактFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool На31ДекПредSpecified {
            get {
                return на31ДекПредFieldSpecified;
            }
            set {
                на31ДекПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current КорКапПрТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an КорКапПрТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output КорКапПрТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out КорКапПрТип obj, out System.Exception exception) {
            exception = null;
            obj = default(КорКапПрТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out КорКапПрТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static КорКапПрТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((КорКапПрТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current КорКапПрТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an КорКапПрТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output КорКапПрТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out КорКапПрТип obj, out System.Exception exception) {
            exception = null;
            obj = default(КорКапПрТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out КорКапПрТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static КорКапПрТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class КорКапТип : System.ComponentModel.INotifyPropertyChanged {
        
        private КорКапПрТип доКорректField;
        
        private КорКапПрТип корИзмУчПолField;
        
        private КорКапПрТип корИспрОшField;
        
        private КорКапПрТип послеКорректField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool доКорректFieldSpecified;
        
        private bool корИзмУчПолFieldSpecified;
        
        private bool корИспрОшFieldSpecified;
        
        private bool послеКорректFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public КорКапПрТип ДоКоррект {
            get {
                if ((this.доКорректField == null)) {
                    this.доКорректField = new КорКапПрТип();
                }
                return this.доКорректField;
            }
            set {
                if ((this.доКорректField != null)) {
                    if ((доКорректField.Equals(value) != true)) {
                        this.доКорректField = value;
                        this.OnPropertyChanged("ДоКоррект");
                    }
                }
                else {
                    this.доКорректField = value;
                    this.OnPropertyChanged("ДоКоррект");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public КорКапПрТип КорИзмУчПол {
            get {
                if ((this.корИзмУчПолField == null)) {
                    this.корИзмУчПолField = new КорКапПрТип();
                }
                return this.корИзмУчПолField;
            }
            set {
                if ((this.корИзмУчПолField != null)) {
                    if ((корИзмУчПолField.Equals(value) != true)) {
                        this.корИзмУчПолField = value;
                        this.OnPropertyChanged("КорИзмУчПол");
                    }
                }
                else {
                    this.корИзмУчПолField = value;
                    this.OnPropertyChanged("КорИзмУчПол");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public КорКапПрТип КорИспрОш {
            get {
                if ((this.корИспрОшField == null)) {
                    this.корИспрОшField = new КорКапПрТип();
                }
                return this.корИспрОшField;
            }
            set {
                if ((this.корИспрОшField != null)) {
                    if ((корИспрОшField.Equals(value) != true)) {
                        this.корИспрОшField = value;
                        this.OnPropertyChanged("КорИспрОш");
                    }
                }
                else {
                    this.корИспрОшField = value;
                    this.OnPropertyChanged("КорИспрОш");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public КорКапПрТип ПослеКоррект {
            get {
                if ((this.послеКорректField == null)) {
                    this.послеКорректField = new КорКапПрТип();
                }
                return this.послеКорректField;
            }
            set {
                if ((this.послеКорректField != null)) {
                    if ((послеКорректField.Equals(value) != true)) {
                        this.послеКорректField = value;
                        this.OnPropertyChanged("ПослеКоррект");
                    }
                }
                else {
                    this.послеКорректField = value;
                    this.OnPropertyChanged("ПослеКоррект");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(КорКапТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДоКорректSpecified {
            get {
                return доКорректFieldSpecified;
            }
            set {
                доКорректFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КорИзмУчПолSpecified {
            get {
                return корИзмУчПолFieldSpecified;
            }
            set {
                корИзмУчПолFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КорИспрОшSpecified {
            get {
                return корИспрОшFieldSpecified;
            }
            set {
                корИспрОшFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПослеКорректSpecified {
            get {
                return послеКорректFieldSpecified;
            }
            set {
                послеКорректFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current КорКапТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an КорКапТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output КорКапТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out КорКапТип obj, out System.Exception exception) {
            exception = null;
            obj = default(КорКапТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out КорКапТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static КорКапТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((КорКапТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current КорКапТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an КорКапТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output КорКапТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out КорКапТип obj, out System.Exception exception) {
            exception = null;
            obj = default(КорКапТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out КорКапТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static КорКапТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ВПокДвижКапПГод : System.ComponentModel.INotifyPropertyChanged {
        
        private string наимПокField;
        
        private string устКапиталField;
        
        private string собВыкупАкцField;
        
        private string добКапиталField;
        
        private string резКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наимПокFieldSpecified;
        
        private bool устКапиталFieldSpecified;
        
        private bool собВыкупАкцFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool резКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПок {
            get {
                return this.наимПокField;
            }
            set {
                if ((this.наимПокField != null)) {
                    if ((наимПокField.Equals(value) != true)) {
                        this.наимПокField = value;
                        this.OnPropertyChanged("НаимПок");
                    }
                }
                else {
                    this.наимПокField = value;
                    this.OnPropertyChanged("НаимПок");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string УстКапитал {
            get {
                return this.устКапиталField;
            }
            set {
                if ((this.устКапиталField != null)) {
                    if ((устКапиталField.Equals(value) != true)) {
                        this.устКапиталField = value;
                        this.OnPropertyChanged("УстКапитал");
                    }
                }
                else {
                    this.устКапиталField = value;
                    this.OnPropertyChanged("УстКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СобВыкупАкц {
            get {
                return this.собВыкупАкцField;
            }
            set {
                if ((this.собВыкупАкцField != null)) {
                    if ((собВыкупАкцField.Equals(value) != true)) {
                        this.собВыкупАкцField = value;
                        this.OnPropertyChanged("СобВыкупАкц");
                    }
                }
                else {
                    this.собВыкупАкцField = value;
                    this.OnPropertyChanged("СобВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string РезКапитал {
            get {
                return this.резКапиталField;
            }
            set {
                if ((this.резКапиталField != null)) {
                    if ((резКапиталField.Equals(value) != true)) {
                        this.резКапиталField = value;
                        this.OnPropertyChanged("РезКапитал");
                    }
                }
                else {
                    this.резКапиталField = value;
                    this.OnPropertyChanged("РезКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВПокДвижКапПГод));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаимПокSpecified {
            get {
                return наимПокFieldSpecified;
            }
            set {
                наимПокFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УстКапиталSpecified {
            get {
                return устКапиталFieldSpecified;
            }
            set {
                устКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобВыкупАкцSpecified {
            get {
                return собВыкупАкцFieldSpecified;
            }
            set {
                собВыкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезКапиталSpecified {
            get {
                return резКапиталFieldSpecified;
            }
            set {
                резКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ВПокДвижКапПГод object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ВПокДвижКапПГод object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ВПокДвижКапПГод object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ВПокДвижКапПГод obj, out System.Exception exception) {
            exception = null;
            obj = default(ВПокДвижКапПГод);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ВПокДвижКапПГод obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ВПокДвижКапПГод Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ВПокДвижКапПГод)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ВПокДвижКапПГод object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ВПокДвижКапПГод object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ВПокДвижКапПГод object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ВПокДвижКапПГод obj, out System.Exception exception) {
            exception = null;
            obj = default(ВПокДвижКапПГод);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ВПокДвижКапПГод obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ВПокДвижКапПГод LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ДвижКапГодТип : System.ComponentModel.INotifyPropertyChanged {
        
        private ДвижКапГодТипУвеличКапитал увеличКапиталField;
        
        private ДвижКапГодТипУменКапитал уменКапиталField;
        
        private ДвижКапГодТипИзмДобавКап измДобавКапField;
        
        private ДвижКапГодТипИзмРезервКап измРезервКапField;
        
        private List<ВПокДвижКапПГод> вПокДвижКапField;
        
        private ДвижКапПГод кап31декField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool увеличКапиталFieldSpecified;
        
        private bool уменКапиталFieldSpecified;
        
        private bool измДобавКапFieldSpecified;
        
        private bool измРезервКапFieldSpecified;
        
        private bool вПокДвижКапFieldSpecified;
        
        private bool кап31декFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ДвижКапГодТипУвеличКапитал УвеличКапитал {
            get {
                if ((this.увеличКапиталField == null)) {
                    this.увеличКапиталField = new ДвижКапГодТипУвеличКапитал();
                }
                return this.увеличКапиталField;
            }
            set {
                if ((this.увеличКапиталField != null)) {
                    if ((увеличКапиталField.Equals(value) != true)) {
                        this.увеличКапиталField = value;
                        this.OnPropertyChanged("УвеличКапитал");
                    }
                }
                else {
                    this.увеличКапиталField = value;
                    this.OnPropertyChanged("УвеличКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ДвижКапГодТипУменКапитал УменКапитал {
            get {
                if ((this.уменКапиталField == null)) {
                    this.уменКапиталField = new ДвижКапГодТипУменКапитал();
                }
                return this.уменКапиталField;
            }
            set {
                if ((this.уменКапиталField != null)) {
                    if ((уменКапиталField.Equals(value) != true)) {
                        this.уменКапиталField = value;
                        this.OnPropertyChanged("УменКапитал");
                    }
                }
                else {
                    this.уменКапиталField = value;
                    this.OnPropertyChanged("УменКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ДвижКапГодТипИзмДобавКап ИзмДобавКап {
            get {
                if ((this.измДобавКапField == null)) {
                    this.измДобавКапField = new ДвижКапГодТипИзмДобавКап();
                }
                return this.измДобавКапField;
            }
            set {
                if ((this.измДобавКапField != null)) {
                    if ((измДобавКапField.Equals(value) != true)) {
                        this.измДобавКапField = value;
                        this.OnPropertyChanged("ИзмДобавКап");
                    }
                }
                else {
                    this.измДобавКапField = value;
                    this.OnPropertyChanged("ИзмДобавКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ДвижКапГодТипИзмРезервКап ИзмРезервКап {
            get {
                if ((this.измРезервКапField == null)) {
                    this.измРезервКапField = new ДвижКапГодТипИзмРезервКап();
                }
                return this.измРезервКапField;
            }
            set {
                if ((this.измРезервКапField != null)) {
                    if ((измРезервКапField.Equals(value) != true)) {
                        this.измРезервКапField = value;
                        this.OnPropertyChanged("ИзмРезервКап");
                    }
                }
                else {
                    this.измРезервКапField = value;
                    this.OnPropertyChanged("ИзмРезервКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокДвижКап", Order=4)]
        public List<ВПокДвижКапПГод> ВПокДвижКап {
            get {
                if ((this.вПокДвижКапField == null)) {
                    this.вПокДвижКапField = new List<ВПокДвижКапПГод>();
                }
                return this.вПокДвижКапField;
            }
            set {
                if ((this.вПокДвижКапField != null)) {
                    if ((вПокДвижКапField.Equals(value) != true)) {
                        this.вПокДвижКапField = value;
                        this.OnPropertyChanged("ВПокДвижКап");
                    }
                }
                else {
                    this.вПокДвижКапField = value;
                    this.OnPropertyChanged("ВПокДвижКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ДвижКапПГод Кап31дек {
            get {
                if ((this.кап31декField == null)) {
                    this.кап31декField = new ДвижКапПГод();
                }
                return this.кап31декField;
            }
            set {
                if ((this.кап31декField != null)) {
                    if ((кап31декField.Equals(value) != true)) {
                        this.кап31декField = value;
                        this.OnPropertyChanged("Кап31дек");
                    }
                }
                else {
                    this.кап31декField = value;
                    this.OnPropertyChanged("Кап31дек");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УвеличКапиталSpecified {
            get {
                return увеличКапиталFieldSpecified;
            }
            set {
                увеличКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УменКапиталSpecified {
            get {
                return уменКапиталFieldSpecified;
            }
            set {
                уменКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмДобавКапSpecified {
            get {
                return измДобавКапFieldSpecified;
            }
            set {
                измДобавКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмРезервКапSpecified {
            get {
                return измРезервКапFieldSpecified;
            }
            set {
                измРезервКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокДвижКапSpecified {
            get {
                return вПокДвижКапFieldSpecified;
            }
            set {
                вПокДвижКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool Кап31декSpecified {
            get {
                return кап31декFieldSpecified;
            }
            set {
                кап31декFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУвеличКапитал : System.ComponentModel.INotifyPropertyChanged {
        
        private ДвижКапПГод увеличКапВсField;
        
        private ДвижКапГодТипУвеличКапиталЧистПриб чистПрибField;
        
        private ДвижКапГодТипУвеличКапиталПереоцИмущ переоцИмущField;
        
        private ДвижКапГодТипУвеличКапиталДохУвелКап дохУвелКапField;
        
        private ДвижКапГодТипУвеличКапиталДопВыпАкций допВыпАкцийField;
        
        private ДвижКапГодТипУвеличКапиталУвеличНомАкц увеличНомАкцField;
        
        private ДвижКапПГод реорганизацияField;
        
        private List<ВПокДвижКапПГод> вПокУвелКапField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool увеличКапВсFieldSpecified;
        
        private bool чистПрибFieldSpecified;
        
        private bool переоцИмущFieldSpecified;
        
        private bool дохУвелКапFieldSpecified;
        
        private bool допВыпАкцийFieldSpecified;
        
        private bool увеличНомАкцFieldSpecified;
        
        private bool реорганизацияFieldSpecified;
        
        private bool вПокУвелКапFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ДвижКапПГод УвеличКапВс {
            get {
                if ((this.увеличКапВсField == null)) {
                    this.увеличКапВсField = new ДвижКапПГод();
                }
                return this.увеличКапВсField;
            }
            set {
                if ((this.увеличКапВсField != null)) {
                    if ((увеличКапВсField.Equals(value) != true)) {
                        this.увеличКапВсField = value;
                        this.OnPropertyChanged("УвеличКапВс");
                    }
                }
                else {
                    this.увеличКапВсField = value;
                    this.OnPropertyChanged("УвеличКапВс");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ДвижКапГодТипУвеличКапиталЧистПриб ЧистПриб {
            get {
                if ((this.чистПрибField == null)) {
                    this.чистПрибField = new ДвижКапГодТипУвеличКапиталЧистПриб();
                }
                return this.чистПрибField;
            }
            set {
                if ((this.чистПрибField != null)) {
                    if ((чистПрибField.Equals(value) != true)) {
                        this.чистПрибField = value;
                        this.OnPropertyChanged("ЧистПриб");
                    }
                }
                else {
                    this.чистПрибField = value;
                    this.OnPropertyChanged("ЧистПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ДвижКапГодТипУвеличКапиталПереоцИмущ ПереоцИмущ {
            get {
                if ((this.переоцИмущField == null)) {
                    this.переоцИмущField = new ДвижКапГодТипУвеличКапиталПереоцИмущ();
                }
                return this.переоцИмущField;
            }
            set {
                if ((this.переоцИмущField != null)) {
                    if ((переоцИмущField.Equals(value) != true)) {
                        this.переоцИмущField = value;
                        this.OnPropertyChanged("ПереоцИмущ");
                    }
                }
                else {
                    this.переоцИмущField = value;
                    this.OnPropertyChanged("ПереоцИмущ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ДвижКапГодТипУвеличКапиталДохУвелКап ДохУвелКап {
            get {
                if ((this.дохУвелКапField == null)) {
                    this.дохУвелКапField = new ДвижКапГодТипУвеличКапиталДохУвелКап();
                }
                return this.дохУвелКапField;
            }
            set {
                if ((this.дохУвелКапField != null)) {
                    if ((дохУвелКапField.Equals(value) != true)) {
                        this.дохУвелКапField = value;
                        this.OnPropertyChanged("ДохУвелКап");
                    }
                }
                else {
                    this.дохУвелКапField = value;
                    this.OnPropertyChanged("ДохУвелКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ДвижКапГодТипУвеличКапиталДопВыпАкций ДопВыпАкций {
            get {
                if ((this.допВыпАкцийField == null)) {
                    this.допВыпАкцийField = new ДвижКапГодТипУвеличКапиталДопВыпАкций();
                }
                return this.допВыпАкцийField;
            }
            set {
                if ((this.допВыпАкцийField != null)) {
                    if ((допВыпАкцийField.Equals(value) != true)) {
                        this.допВыпАкцийField = value;
                        this.OnPropertyChanged("ДопВыпАкций");
                    }
                }
                else {
                    this.допВыпАкцийField = value;
                    this.OnPropertyChanged("ДопВыпАкций");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ДвижКапГодТипУвеличКапиталУвеличНомАкц УвеличНомАкц {
            get {
                if ((this.увеличНомАкцField == null)) {
                    this.увеличНомАкцField = new ДвижКапГодТипУвеличКапиталУвеличНомАкц();
                }
                return this.увеличНомАкцField;
            }
            set {
                if ((this.увеличНомАкцField != null)) {
                    if ((увеличНомАкцField.Equals(value) != true)) {
                        this.увеличНомАкцField = value;
                        this.OnPropertyChanged("УвеличНомАкц");
                    }
                }
                else {
                    this.увеличНомАкцField = value;
                    this.OnPropertyChanged("УвеличНомАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ДвижКапПГод Реорганизация {
            get {
                if ((this.реорганизацияField == null)) {
                    this.реорганизацияField = new ДвижКапПГод();
                }
                return this.реорганизацияField;
            }
            set {
                if ((this.реорганизацияField != null)) {
                    if ((реорганизацияField.Equals(value) != true)) {
                        this.реорганизацияField = value;
                        this.OnPropertyChanged("Реорганизация");
                    }
                }
                else {
                    this.реорганизацияField = value;
                    this.OnPropertyChanged("Реорганизация");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокУвелКап", Order=7)]
        public List<ВПокДвижКапПГод> ВПокУвелКап {
            get {
                if ((this.вПокУвелКапField == null)) {
                    this.вПокУвелКапField = new List<ВПокДвижКапПГод>();
                }
                return this.вПокУвелКапField;
            }
            set {
                if ((this.вПокУвелКапField != null)) {
                    if ((вПокУвелКапField.Equals(value) != true)) {
                        this.вПокУвелКапField = value;
                        this.OnPropertyChanged("ВПокУвелКап");
                    }
                }
                else {
                    this.вПокУвелКапField = value;
                    this.OnPropertyChanged("ВПокУвелКап");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУвеличКапитал));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УвеличКапВсSpecified {
            get {
                return увеличКапВсFieldSpecified;
            }
            set {
                увеличКапВсFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЧистПрибSpecified {
            get {
                return чистПрибFieldSpecified;
            }
            set {
                чистПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПереоцИмущSpecified {
            get {
                return переоцИмущFieldSpecified;
            }
            set {
                переоцИмущFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДохУвелКапSpecified {
            get {
                return дохУвелКапFieldSpecified;
            }
            set {
                дохУвелКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДопВыпАкцийSpecified {
            get {
                return допВыпАкцийFieldSpecified;
            }
            set {
                допВыпАкцийFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УвеличНомАкцSpecified {
            get {
                return увеличНомАкцFieldSpecified;
            }
            set {
                увеличНомАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РеорганизацияSpecified {
            get {
                return реорганизацияFieldSpecified;
            }
            set {
                реорганизацияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокУвелКапSpecified {
            get {
                return вПокУвелКапFieldSpecified;
            }
            set {
                вПокУвелКапFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапитал object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУвеличКапитал object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапитал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапитал obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапитал);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапитал obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапитал Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУвеличКапитал)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапитал object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУвеличКапитал object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапитал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапитал obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапитал);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапитал obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапитал LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ДвижКапПГод : System.ComponentModel.INotifyPropertyChanged {
        
        private string устКапиталField;
        
        private string собВыкупАкцField;
        
        private string добКапиталField;
        
        private string резКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool устКапиталFieldSpecified;
        
        private bool собВыкупАкцFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool резКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string УстКапитал {
            get {
                return this.устКапиталField;
            }
            set {
                if ((this.устКапиталField != null)) {
                    if ((устКапиталField.Equals(value) != true)) {
                        this.устКапиталField = value;
                        this.OnPropertyChanged("УстКапитал");
                    }
                }
                else {
                    this.устКапиталField = value;
                    this.OnPropertyChanged("УстКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СобВыкупАкц {
            get {
                return this.собВыкупАкцField;
            }
            set {
                if ((this.собВыкупАкцField != null)) {
                    if ((собВыкупАкцField.Equals(value) != true)) {
                        this.собВыкупАкцField = value;
                        this.OnPropertyChanged("СобВыкупАкц");
                    }
                }
                else {
                    this.собВыкупАкцField = value;
                    this.OnPropertyChanged("СобВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string РезКапитал {
            get {
                return this.резКапиталField;
            }
            set {
                if ((this.резКапиталField != null)) {
                    if ((резКапиталField.Equals(value) != true)) {
                        this.резКапиталField = value;
                        this.OnPropertyChanged("РезКапитал");
                    }
                }
                else {
                    this.резКапиталField = value;
                    this.OnPropertyChanged("РезКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапПГод));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УстКапиталSpecified {
            get {
                return устКапиталFieldSpecified;
            }
            set {
                устКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобВыкупАкцSpecified {
            get {
                return собВыкупАкцFieldSpecified;
            }
            set {
                собВыкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезКапиталSpecified {
            get {
                return резКапиталFieldSpecified;
            }
            set {
                резКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапПГод object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапПГод object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапПГод object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапПГод obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапПГод);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапПГод obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапПГод Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапПГод)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапПГод object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапПГод object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапПГод object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапПГод obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапПГод);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапПГод obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапПГод LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУвеличКапиталЧистПриб : System.ComponentModel.INotifyPropertyChanged {
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУвеличКапиталЧистПриб));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапиталЧистПриб object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУвеличКапиталЧистПриб object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапиталЧистПриб object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапиталЧистПриб obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапиталЧистПриб);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапиталЧистПриб obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапиталЧистПриб Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУвеличКапиталЧистПриб)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапиталЧистПриб object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУвеличКапиталЧистПриб object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапиталЧистПриб object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапиталЧистПриб obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапиталЧистПриб);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапиталЧистПриб obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапиталЧистПриб LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУвеличКапиталПереоцИмущ : System.ComponentModel.INotifyPropertyChanged {
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУвеличКапиталПереоцИмущ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапиталПереоцИмущ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУвеличКапиталПереоцИмущ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапиталПереоцИмущ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапиталПереоцИмущ obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапиталПереоцИмущ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапиталПереоцИмущ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапиталПереоцИмущ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУвеличКапиталПереоцИмущ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапиталПереоцИмущ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУвеличКапиталПереоцИмущ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапиталПереоцИмущ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапиталПереоцИмущ obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапиталПереоцИмущ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапиталПереоцИмущ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапиталПереоцИмущ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУвеличКапиталДохУвелКап : System.ComponentModel.INotifyPropertyChanged {
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУвеличКапиталДохУвелКап));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапиталДохУвелКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУвеличКапиталДохУвелКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапиталДохУвелКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапиталДохУвелКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапиталДохУвелКап);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапиталДохУвелКап obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапиталДохУвелКап Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУвеличКапиталДохУвелКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапиталДохУвелКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУвеличКапиталДохУвелКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапиталДохУвелКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапиталДохУвелКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапиталДохУвелКап);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапиталДохУвелКап obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапиталДохУвелКап LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУвеличКапиталДопВыпАкций : System.ComponentModel.INotifyPropertyChanged {
        
        private string устКапиталField;
        
        private string собВыкупАкцField;
        
        private string добКапиталField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool устКапиталFieldSpecified;
        
        private bool собВыкупАкцFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string УстКапитал {
            get {
                return this.устКапиталField;
            }
            set {
                if ((this.устКапиталField != null)) {
                    if ((устКапиталField.Equals(value) != true)) {
                        this.устКапиталField = value;
                        this.OnPropertyChanged("УстКапитал");
                    }
                }
                else {
                    this.устКапиталField = value;
                    this.OnPropertyChanged("УстКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СобВыкупАкц {
            get {
                return this.собВыкупАкцField;
            }
            set {
                if ((this.собВыкупАкцField != null)) {
                    if ((собВыкупАкцField.Equals(value) != true)) {
                        this.собВыкупАкцField = value;
                        this.OnPropertyChanged("СобВыкупАкц");
                    }
                }
                else {
                    this.собВыкупАкцField = value;
                    this.OnPropertyChanged("СобВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУвеличКапиталДопВыпАкций));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УстКапиталSpecified {
            get {
                return устКапиталFieldSpecified;
            }
            set {
                устКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобВыкупАкцSpecified {
            get {
                return собВыкупАкцFieldSpecified;
            }
            set {
                собВыкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапиталДопВыпАкций object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУвеличКапиталДопВыпАкций object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапиталДопВыпАкций object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапиталДопВыпАкций obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапиталДопВыпАкций);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапиталДопВыпАкций obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапиталДопВыпАкций Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУвеличКапиталДопВыпАкций)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапиталДопВыпАкций object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУвеличКапиталДопВыпАкций object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапиталДопВыпАкций object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапиталДопВыпАкций obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапиталДопВыпАкций);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапиталДопВыпАкций obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапиталДопВыпАкций LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУвеличКапиталУвеличНомАкц : System.ComponentModel.INotifyPropertyChanged {
        
        private string устКапиталField;
        
        private string собВыкупАкцField;
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool устКапиталFieldSpecified;
        
        private bool собВыкупАкцFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string УстКапитал {
            get {
                return this.устКапиталField;
            }
            set {
                if ((this.устКапиталField != null)) {
                    if ((устКапиталField.Equals(value) != true)) {
                        this.устКапиталField = value;
                        this.OnPropertyChanged("УстКапитал");
                    }
                }
                else {
                    this.устКапиталField = value;
                    this.OnPropertyChanged("УстКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СобВыкупАкц {
            get {
                return this.собВыкупАкцField;
            }
            set {
                if ((this.собВыкупАкцField != null)) {
                    if ((собВыкупАкцField.Equals(value) != true)) {
                        this.собВыкупАкцField = value;
                        this.OnPropertyChanged("СобВыкупАкц");
                    }
                }
                else {
                    this.собВыкупАкцField = value;
                    this.OnPropertyChanged("СобВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУвеличКапиталУвеличНомАкц));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УстКапиталSpecified {
            get {
                return устКапиталFieldSpecified;
            }
            set {
                устКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобВыкупАкцSpecified {
            get {
                return собВыкупАкцFieldSpecified;
            }
            set {
                собВыкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапиталУвеличНомАкц object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУвеличКапиталУвеличНомАкц object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапиталУвеличНомАкц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапиталУвеличНомАкц obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапиталУвеличНомАкц);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУвеличКапиталУвеличНомАкц obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапиталУвеличНомАкц Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУвеличКапиталУвеличНомАкц)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУвеличКапиталУвеличНомАкц object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУвеличКапиталУвеличНомАкц object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУвеличКапиталУвеличНомАкц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапиталУвеличНомАкц obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУвеличКапиталУвеличНомАкц);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУвеличКапиталУвеличНомАкц obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУвеличКапиталУвеличНомАкц LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУменКапитал : System.ComponentModel.INotifyPropertyChanged {
        
        private ДвижКапПГод уменКапВсField;
        
        private ДвижКапГодТипУменКапиталУбыток убытокField;
        
        private ДвижКапГодТипУменКапиталПереоцИмущ переоцИмущField;
        
        private ДвижКапГодТипУменКапиталРасхУменКап расхУменКапField;
        
        private ДвижКапГодТипУменКапиталУменНомАкц уменНомАкцField;
        
        private ДвижКапГодТипУменКапиталУменКолАкций уменКолАкцийField;
        
        private ДвижКапПГод реорганизацияField;
        
        private ДвижКапГодТипУменКапиталДивиденды дивидендыField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool уменКапВсFieldSpecified;
        
        private bool убытокFieldSpecified;
        
        private bool переоцИмущFieldSpecified;
        
        private bool расхУменКапFieldSpecified;
        
        private bool уменНомАкцFieldSpecified;
        
        private bool уменКолАкцийFieldSpecified;
        
        private bool реорганизацияFieldSpecified;
        
        private bool дивидендыFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ДвижКапПГод УменКапВс {
            get {
                if ((this.уменКапВсField == null)) {
                    this.уменКапВсField = new ДвижКапПГод();
                }
                return this.уменКапВсField;
            }
            set {
                if ((this.уменКапВсField != null)) {
                    if ((уменКапВсField.Equals(value) != true)) {
                        this.уменКапВсField = value;
                        this.OnPropertyChanged("УменКапВс");
                    }
                }
                else {
                    this.уменКапВсField = value;
                    this.OnPropertyChanged("УменКапВс");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ДвижКапГодТипУменКапиталУбыток Убыток {
            get {
                if ((this.убытокField == null)) {
                    this.убытокField = new ДвижКапГодТипУменКапиталУбыток();
                }
                return this.убытокField;
            }
            set {
                if ((this.убытокField != null)) {
                    if ((убытокField.Equals(value) != true)) {
                        this.убытокField = value;
                        this.OnPropertyChanged("Убыток");
                    }
                }
                else {
                    this.убытокField = value;
                    this.OnPropertyChanged("Убыток");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ДвижКапГодТипУменКапиталПереоцИмущ ПереоцИмущ {
            get {
                if ((this.переоцИмущField == null)) {
                    this.переоцИмущField = new ДвижКапГодТипУменКапиталПереоцИмущ();
                }
                return this.переоцИмущField;
            }
            set {
                if ((this.переоцИмущField != null)) {
                    if ((переоцИмущField.Equals(value) != true)) {
                        this.переоцИмущField = value;
                        this.OnPropertyChanged("ПереоцИмущ");
                    }
                }
                else {
                    this.переоцИмущField = value;
                    this.OnPropertyChanged("ПереоцИмущ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ДвижКапГодТипУменКапиталРасхУменКап РасхУменКап {
            get {
                if ((this.расхУменКапField == null)) {
                    this.расхУменКапField = new ДвижКапГодТипУменКапиталРасхУменКап();
                }
                return this.расхУменКапField;
            }
            set {
                if ((this.расхУменКапField != null)) {
                    if ((расхУменКапField.Equals(value) != true)) {
                        this.расхУменКапField = value;
                        this.OnPropertyChanged("РасхУменКап");
                    }
                }
                else {
                    this.расхУменКапField = value;
                    this.OnPropertyChanged("РасхУменКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ДвижКапГодТипУменКапиталУменНомАкц УменНомАкц {
            get {
                if ((this.уменНомАкцField == null)) {
                    this.уменНомАкцField = new ДвижКапГодТипУменКапиталУменНомАкц();
                }
                return this.уменНомАкцField;
            }
            set {
                if ((this.уменНомАкцField != null)) {
                    if ((уменНомАкцField.Equals(value) != true)) {
                        this.уменНомАкцField = value;
                        this.OnPropertyChanged("УменНомАкц");
                    }
                }
                else {
                    this.уменНомАкцField = value;
                    this.OnPropertyChanged("УменНомАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ДвижКапГодТипУменКапиталУменКолАкций УменКолАкций {
            get {
                if ((this.уменКолАкцийField == null)) {
                    this.уменКолАкцийField = new ДвижКапГодТипУменКапиталУменКолАкций();
                }
                return this.уменКолАкцийField;
            }
            set {
                if ((this.уменКолАкцийField != null)) {
                    if ((уменКолАкцийField.Equals(value) != true)) {
                        this.уменКолАкцийField = value;
                        this.OnPropertyChanged("УменКолАкций");
                    }
                }
                else {
                    this.уменКолАкцийField = value;
                    this.OnPropertyChanged("УменКолАкций");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ДвижКапПГод Реорганизация {
            get {
                if ((this.реорганизацияField == null)) {
                    this.реорганизацияField = new ДвижКапПГод();
                }
                return this.реорганизацияField;
            }
            set {
                if ((this.реорганизацияField != null)) {
                    if ((реорганизацияField.Equals(value) != true)) {
                        this.реорганизацияField = value;
                        this.OnPropertyChanged("Реорганизация");
                    }
                }
                else {
                    this.реорганизацияField = value;
                    this.OnPropertyChanged("Реорганизация");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public ДвижКапГодТипУменКапиталДивиденды Дивиденды {
            get {
                if ((this.дивидендыField == null)) {
                    this.дивидендыField = new ДвижКапГодТипУменКапиталДивиденды();
                }
                return this.дивидендыField;
            }
            set {
                if ((this.дивидендыField != null)) {
                    if ((дивидендыField.Equals(value) != true)) {
                        this.дивидендыField = value;
                        this.OnPropertyChanged("Дивиденды");
                    }
                }
                else {
                    this.дивидендыField = value;
                    this.OnPropertyChanged("Дивиденды");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУменКапитал));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УменКапВсSpecified {
            get {
                return уменКапВсFieldSpecified;
            }
            set {
                уменКапВсFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УбытокSpecified {
            get {
                return убытокFieldSpecified;
            }
            set {
                убытокFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПереоцИмущSpecified {
            get {
                return переоцИмущFieldSpecified;
            }
            set {
                переоцИмущFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РасхУменКапSpecified {
            get {
                return расхУменКапFieldSpecified;
            }
            set {
                расхУменКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УменНомАкцSpecified {
            get {
                return уменНомАкцFieldSpecified;
            }
            set {
                уменНомАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УменКолАкцийSpecified {
            get {
                return уменКолАкцийFieldSpecified;
            }
            set {
                уменКолАкцийFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РеорганизацияSpecified {
            get {
                return реорганизацияFieldSpecified;
            }
            set {
                реорганизацияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДивидендыSpecified {
            get {
                return дивидендыFieldSpecified;
            }
            set {
                дивидендыFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапитал object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУменКапитал object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапитал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапитал obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапитал);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапитал obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапитал Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУменКапитал)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапитал object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУменКапитал object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапитал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапитал obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапитал);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапитал obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапитал LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУменКапиталУбыток : System.ComponentModel.INotifyPropertyChanged {
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУменКапиталУбыток));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталУбыток object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУменКапиталУбыток object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталУбыток object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталУбыток obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталУбыток);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталУбыток obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталУбыток Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУменКапиталУбыток)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталУбыток object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУменКапиталУбыток object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталУбыток object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталУбыток obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталУбыток);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталУбыток obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталУбыток LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУменКапиталПереоцИмущ : System.ComponentModel.INotifyPropertyChanged {
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУменКапиталПереоцИмущ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталПереоцИмущ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУменКапиталПереоцИмущ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталПереоцИмущ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталПереоцИмущ obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталПереоцИмущ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталПереоцИмущ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталПереоцИмущ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУменКапиталПереоцИмущ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталПереоцИмущ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУменКапиталПереоцИмущ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталПереоцИмущ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталПереоцИмущ obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталПереоцИмущ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталПереоцИмущ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталПереоцИмущ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУменКапиталРасхУменКап : System.ComponentModel.INotifyPropertyChanged {
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУменКапиталРасхУменКап));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталРасхУменКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУменКапиталРасхУменКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталРасхУменКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталРасхУменКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталРасхУменКап);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталРасхУменКап obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталРасхУменКап Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУменКапиталРасхУменКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталРасхУменКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУменКапиталРасхУменКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталРасхУменКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталРасхУменКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталРасхУменКап);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталРасхУменКап obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталРасхУменКап LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУменКапиталУменНомАкц : System.ComponentModel.INotifyPropertyChanged {
        
        private string устКапиталField;
        
        private string собВыкупАкцField;
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool устКапиталFieldSpecified;
        
        private bool собВыкупАкцFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string УстКапитал {
            get {
                return this.устКапиталField;
            }
            set {
                if ((this.устКапиталField != null)) {
                    if ((устКапиталField.Equals(value) != true)) {
                        this.устКапиталField = value;
                        this.OnPropertyChanged("УстКапитал");
                    }
                }
                else {
                    this.устКапиталField = value;
                    this.OnPropertyChanged("УстКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СобВыкупАкц {
            get {
                return this.собВыкупАкцField;
            }
            set {
                if ((this.собВыкупАкцField != null)) {
                    if ((собВыкупАкцField.Equals(value) != true)) {
                        this.собВыкупАкцField = value;
                        this.OnPropertyChanged("СобВыкупАкц");
                    }
                }
                else {
                    this.собВыкупАкцField = value;
                    this.OnPropertyChanged("СобВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУменКапиталУменНомАкц));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УстКапиталSpecified {
            get {
                return устКапиталFieldSpecified;
            }
            set {
                устКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобВыкупАкцSpecified {
            get {
                return собВыкупАкцFieldSpecified;
            }
            set {
                собВыкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталУменНомАкц object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУменКапиталУменНомАкц object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталУменНомАкц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталУменНомАкц obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталУменНомАкц);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталУменНомАкц obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталУменНомАкц Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУменКапиталУменНомАкц)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталУменНомАкц object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУменКапиталУменНомАкц object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталУменНомАкц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталУменНомАкц obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталУменНомАкц);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталУменНомАкц obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталУменНомАкц LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУменКапиталУменКолАкций : System.ComponentModel.INotifyPropertyChanged {
        
        private string устКапиталField;
        
        private string собВыкупАкцField;
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool устКапиталFieldSpecified;
        
        private bool собВыкупАкцFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string УстКапитал {
            get {
                return this.устКапиталField;
            }
            set {
                if ((this.устКапиталField != null)) {
                    if ((устКапиталField.Equals(value) != true)) {
                        this.устКапиталField = value;
                        this.OnPropertyChanged("УстКапитал");
                    }
                }
                else {
                    this.устКапиталField = value;
                    this.OnPropertyChanged("УстКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СобВыкупАкц {
            get {
                return this.собВыкупАкцField;
            }
            set {
                if ((this.собВыкупАкцField != null)) {
                    if ((собВыкупАкцField.Equals(value) != true)) {
                        this.собВыкупАкцField = value;
                        this.OnPropertyChanged("СобВыкупАкц");
                    }
                }
                else {
                    this.собВыкупАкцField = value;
                    this.OnPropertyChanged("СобВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУменКапиталУменКолАкций));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УстКапиталSpecified {
            get {
                return устКапиталFieldSpecified;
            }
            set {
                устКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобВыкупАкцSpecified {
            get {
                return собВыкупАкцFieldSpecified;
            }
            set {
                собВыкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталУменКолАкций object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУменКапиталУменКолАкций object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталУменКолАкций object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталУменКолАкций obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталУменКолАкций);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталУменКолАкций obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталУменКолАкций Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУменКапиталУменКолАкций)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталУменКолАкций object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУменКапиталУменКолАкций object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталУменКолАкций object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталУменКолАкций obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталУменКолАкций);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталУменКолАкций obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталУменКолАкций LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУменКапиталДивиденды : System.ComponentModel.INotifyPropertyChanged {
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУменКапиталДивиденды));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталДивиденды object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУменКапиталДивиденды object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталДивиденды object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталДивиденды obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталДивиденды);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУменКапиталДивиденды obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталДивиденды Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУменКапиталДивиденды)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУменКапиталДивиденды object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУменКапиталДивиденды object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУменКапиталДивиденды object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталДивиденды obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУменКапиталДивиденды);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУменКапиталДивиденды obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУменКапиталДивиденды LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипИзмДобавКап : System.ComponentModel.INotifyPropertyChanged {
        
        private string добКапиталField;
        
        private string резКапиталField;
        
        private string нераспПрибField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool добКапиталFieldSpecified;
        
        private bool резКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string РезКапитал {
            get {
                return this.резКапиталField;
            }
            set {
                if ((this.резКапиталField != null)) {
                    if ((резКапиталField.Equals(value) != true)) {
                        this.резКапиталField = value;
                        this.OnPropertyChanged("РезКапитал");
                    }
                }
                else {
                    this.резКапиталField = value;
                    this.OnPropertyChanged("РезКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипИзмДобавКап));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезКапиталSpecified {
            get {
                return резКапиталFieldSpecified;
            }
            set {
                резКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипИзмДобавКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипИзмДобавКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипИзмДобавКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипИзмДобавКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипИзмДобавКап);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипИзмДобавКап obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипИзмДобавКап Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипИзмДобавКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипИзмДобавКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипИзмДобавКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипИзмДобавКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипИзмДобавКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипИзмДобавКап);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипИзмДобавКап obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипИзмДобавКап LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипИзмРезервКап : System.ComponentModel.INotifyPropertyChanged {
        
        private string резКапиталField;
        
        private string нераспПрибField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool резКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string РезКапитал {
            get {
                return this.резКапиталField;
            }
            set {
                if ((this.резКапиталField != null)) {
                    if ((резКапиталField.Equals(value) != true)) {
                        this.резКапиталField = value;
                        this.OnPropertyChanged("РезКапитал");
                    }
                }
                else {
                    this.резКапиталField = value;
                    this.OnPropertyChanged("РезКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипИзмРезервКап));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool РезКапиталSpecified {
            get {
                return резКапиталFieldSpecified;
            }
            set {
                резКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипИзмРезервКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипИзмРезервКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипИзмРезервКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипИзмРезервКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипИзмРезервКап);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипИзмРезервКап obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипИзмРезервКап Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипИзмРезервКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипИзмРезервКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипИзмРезервКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипИзмРезервКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипИзмРезервКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипИзмРезервКап);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипИзмРезервКап obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипИзмРезервКап LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОтчПредОТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОтчПредОТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОтчПредОТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОтчПредОТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОтчПредОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОтчПредОТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредОТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОтчПредОТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОтчПредОТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОтчПредОТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОтчПредОТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОтчПредОТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОтчПредОТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОтчПредОТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредОТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОтчПредОТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОтчПредОТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОтчПредНТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОтчПредНТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОтчПредНТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОтчПредНТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОтчПредНТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОтчПредНТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредНТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОтчПредНТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОтчПредНТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОтчПредНТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОтчПредНТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОтчПредНТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОтчПредНТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОтчПредНТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредНТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОтчПредНТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОтчПредНТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОтчПредОДопТип : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ДопПокОПТип> допПокОПField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool допПокОПFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ДопПокОП", Order=0)]
        public List<ДопПокОПТип> ДопПокОП {
            get {
                if ((this.допПокОПField == null)) {
                    this.допПокОПField = new List<ДопПокОПТип>();
                }
                return this.допПокОПField;
            }
            set {
                if ((this.допПокОПField != null)) {
                    if ((допПокОПField.Equals(value) != true)) {
                        this.допПокОПField = value;
                        this.OnPropertyChanged("ДопПокОП");
                    }
                }
                else {
                    this.допПокОПField = value;
                    this.OnPropertyChanged("ДопПокОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОтчПредОДопТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДопПокОПSpecified {
            get {
                return допПокОПFieldSpecified;
            }
            set {
                допПокОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОтчПредОДопТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОтчПредОДопТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОтчПредОДопТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОтчПредОДопТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредОДопТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОтчПредОДопТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОтчПредОДопТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОтчПредОДопТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОтчПредОДопТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОтчПредОДопТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОтчПредОДопТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОтчПредОДопТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредОДопТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОтчПредОДопТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОтчПредОДопТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ДопПокОПТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string поясненияField;
        
        private string наимПокField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поясненияFieldSpecified;
        
        private bool наимПокFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПок {
            get {
                return this.наимПокField;
            }
            set {
                if ((this.наимПокField != null)) {
                    if ((наимПокField.Equals(value) != true)) {
                        this.наимПокField = value;
                        this.OnPropertyChanged("НаимПок");
                    }
                }
                else {
                    this.наимПокField = value;
                    this.OnPropertyChanged("НаимПок");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДопПокОПТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимПокSpecified {
            get {
                return наимПокFieldSpecified;
            }
            set {
                наимПокFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДопПокОПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДопПокОПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДопПокОПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДопПокОПТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ДопПокОПТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДопПокОПТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДопПокОПТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДопПокОПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДопПокОПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДопПокОПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДопПокОПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДопПокОПТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ДопПокОПТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДопПокОПТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДопПокОПТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОтчПредНДопТип : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ДопПокОПТип> допПокОПField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool допПокОПFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ДопПокОП", Order=0)]
        public List<ДопПокОПТип> ДопПокОП {
            get {
                if ((this.допПокОПField == null)) {
                    this.допПокОПField = new List<ДопПокОПТип>();
                }
                return this.допПокОПField;
            }
            set {
                if ((this.допПокОПField != null)) {
                    if ((допПокОПField.Equals(value) != true)) {
                        this.допПокОПField = value;
                        this.OnPropertyChanged("ДопПокОП");
                    }
                }
                else {
                    this.допПокОПField = value;
                    this.OnPropertyChanged("ДопПокОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОтчПредНДопТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДопПокОПSpecified {
            get {
                return допПокОПFieldSpecified;
            }
            set {
                допПокОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОтчПредНДопТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОтчПредНДопТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОтчПредНДопТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОтчПредНДопТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредНДопТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОтчПредНДопТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОтчПредНДопТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОтчПредНДопТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОтчПредНДопТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОтчПредНДопТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОтчПредНДопТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОтчПредНДопТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредНДопТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОтчПредНДопТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОтчПредНДопТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ВПокОППТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string поясненияField;
        
        private string наимПокField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поясненияFieldSpecified;
        
        private bool наимПокFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПок {
            get {
                return this.наимПокField;
            }
            set {
                if ((this.наимПокField != null)) {
                    if ((наимПокField.Equals(value) != true)) {
                        this.наимПокField = value;
                        this.OnPropertyChanged("НаимПок");
                    }
                }
                else {
                    this.наимПокField = value;
                    this.OnPropertyChanged("НаимПок");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ВПокОППТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимПокSpecified {
            get {
                return наимПокFieldSpecified;
            }
            set {
                наимПокFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ВПокОППТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ВПокОППТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ВПокОППТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ВПокОППТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ВПокОППТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ВПокОППТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ВПокОППТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ВПокОППТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ВПокОППТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ВПокОППТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ВПокОППТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ВПокОППТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ВПокОППТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ВПокОППТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ВПокОППТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОПП_ВПТип : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ВПокОППТип> вПокОППField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool вПокОППFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокОПП", Order=0)]
        public List<ВПокОППТип> ВПокОПП {
            get {
                if ((this.вПокОППField == null)) {
                    this.вПокОППField = new List<ВПокОППТип>();
                }
                return this.вПокОППField;
            }
            set {
                if ((this.вПокОППField != null)) {
                    if ((вПокОППField.Equals(value) != true)) {
                        this.вПокОППField = value;
                        this.OnPropertyChanged("ВПокОПП");
                    }
                }
                else {
                    this.вПокОППField = value;
                    this.OnPropertyChanged("ВПокОПП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОПП_ВПТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокОППSpecified {
            get {
                return вПокОППFieldSpecified;
            }
            set {
                вПокОППFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОПП_ВПТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОПП_ВПТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОПП_ВПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОПП_ВПТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОПП_ВПТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОПП_ВПТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОПП_ВПТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОПП_ВПТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОПП_ВПТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОПП_ВПТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОПП_ВПТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОПП_ВПТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОПП_ВПТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОПП_ВПТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОПП_ВПТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументСвНПНПЮЛ : System.ComponentModel.INotifyPropertyChanged {
        
        private string наимОргField;
        
        private string наимОргКраткоеField;
        
        private string иННЮЛField;
        
        private string кППField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наимОргFieldSpecified;
        
        private bool наимОргКраткоеFieldSpecified;
        
        private bool иННЮЛFieldSpecified;
        
        private bool кППFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимОрг {
            get {
                return this.наимОргField;
            }
            set {
                if ((this.наимОргField != null)) {
                    if ((наимОргField.Equals(value) != true)) {
                        this.наимОргField = value;
                        this.OnPropertyChanged("НаимОрг");
                    }
                }
                else {
                    this.наимОргField = value;
                    this.OnPropertyChanged("НаимОрг");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимОргКраткое {
            get {
                return this.наимОргКраткоеField;
            }
            set {
                if ((this.наимОргКраткоеField != null)) {
                    if ((наимОргКраткоеField.Equals(value) != true)) {
                        this.наимОргКраткоеField = value;
                        this.OnPropertyChanged("НаимОргКраткое");
                    }
                }
                else {
                    this.наимОргКраткоеField = value;
                    this.OnPropertyChanged("НаимОргКраткое");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННЮЛ {
            get {
                return this.иННЮЛField;
            }
            set {
                if ((this.иННЮЛField != null)) {
                    if ((иННЮЛField.Equals(value) != true)) {
                        this.иННЮЛField = value;
                        this.OnPropertyChanged("ИННЮЛ");
                    }
                }
                else {
                    this.иННЮЛField = value;
                    this.OnPropertyChanged("ИННЮЛ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСвНПНПЮЛ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаимОргSpecified {
            get {
                return наимОргFieldSpecified;
            }
            set {
                наимОргFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимОргКраткоеSpecified {
            get {
                return наимОргКраткоеFieldSpecified;
            }
            set {
                наимОргКраткоеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННЮЛSpecified {
            get {
                return иННЮЛFieldSpecified;
            }
            set {
                иННЮЛFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСвНПНПЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСвНПНПЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСвНПНПЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСвНПНПЮЛ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСвНПНПЮЛ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументСвНПНПЮЛ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументСвНПНПЮЛ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСвНПНПЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументСвНПНПЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСвНПНПЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСвНПНПЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументСвНПНПЮЛ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСвНПНПЮЛ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументСвНПНПЮЛ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументСвНПНПЮЛ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПодписант : System.ComponentModel.INotifyPropertyChanged {
        
        private ФИОТип фИОField;
        
        private ФайлДокументПодписантСвПред свПредField;
        
        private ФайлДокументПодписантПрПодп прПодпField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool фИОFieldSpecified;
        
        private bool свПредFieldSpecified;
        
        private bool прПодпFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФИОТип ФИО {
            get {
                if ((this.фИОField == null)) {
                    this.фИОField = new ФИОТип();
                }
                return this.фИОField;
            }
            set {
                if ((this.фИОField != null)) {
                    if ((фИОField.Equals(value) != true)) {
                        this.фИОField = value;
                        this.OnPropertyChanged("ФИО");
                    }
                }
                else {
                    this.фИОField = value;
                    this.OnPropertyChanged("ФИО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументПодписантСвПред СвПред {
            get {
                if ((this.свПредField == null)) {
                    this.свПредField = new ФайлДокументПодписантСвПред();
                }
                return this.свПредField;
            }
            set {
                if ((this.свПредField != null)) {
                    if ((свПредField.Equals(value) != true)) {
                        this.свПредField = value;
                        this.OnPropertyChanged("СвПред");
                    }
                }
                else {
                    this.свПредField = value;
                    this.OnPropertyChanged("СвПред");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПодписантПрПодп ПрПодп {
            get {
                return this.прПодпField;
            }
            set {
                if ((прПодпField.Equals(value) != true)) {
                    this.прПодпField = value;
                    this.OnPropertyChanged("ПрПодп");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПодписант));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ФИОSpecified {
            get {
                return фИОFieldSpecified;
            }
            set {
                фИОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СвПредSpecified {
            get {
                return свПредFieldSpecified;
            }
            set {
                свПредFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрПодпSpecified {
            get {
                return прПодпFieldSpecified;
            }
            set {
                прПодпFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПодписант object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПодписант object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПодписант object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПодписант obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПодписант);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПодписант obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПодписант Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПодписант)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПодписант object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПодписант object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПодписант object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПодписант obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПодписант);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПодписант obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПодписант LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПодписантСвПред : System.ComponentModel.INotifyPropertyChanged {
        
        private string наимДокField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наимДокFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимДок {
            get {
                return this.наимДокField;
            }
            set {
                if ((this.наимДокField != null)) {
                    if ((наимДокField.Equals(value) != true)) {
                        this.наимДокField = value;
                        this.OnPropertyChanged("НаимДок");
                    }
                }
                else {
                    this.наимДокField = value;
                    this.OnPropertyChanged("НаимДок");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПодписантСвПред));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаимДокSpecified {
            get {
                return наимДокFieldSpecified;
            }
            set {
                наимДокFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПодписантСвПред object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПодписантСвПред object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПодписантСвПред object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПодписантСвПред obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПодписантСвПред);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПодписантСвПред obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПодписантСвПред Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПодписантСвПред)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПодписантСвПред object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПодписантСвПред object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПодписантСвПред object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПодписантСвПред obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПодписантСвПред);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПодписантСвПред obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПодписантСвПред LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПодписантПрПодп {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументБаланс : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументБалансАктив активField;
        
        private ФайлДокументБалансПассив пассивField;
        
        private string процентРаспознаванияField;
        
        private ФайлДокументБалансОКУД оКУДField;
        
        private ПериодКварталТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументБалансОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool активFieldSpecified;
        
        private bool пассивFieldSpecified;
        
        private bool процентРаспознаванияFieldSpecified;
        
        private bool оКУДFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументБалансАктив Актив {
            get {
                if ((this.активField == null)) {
                    this.активField = new ФайлДокументБалансАктив();
                }
                return this.активField;
            }
            set {
                if ((this.активField != null)) {
                    if ((активField.Equals(value) != true)) {
                        this.активField = value;
                        this.OnPropertyChanged("Актив");
                    }
                }
                else {
                    this.активField = value;
                    this.OnPropertyChanged("Актив");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументБалансПассив Пассив {
            get {
                if ((this.пассивField == null)) {
                    this.пассивField = new ФайлДокументБалансПассив();
                }
                return this.пассивField;
            }
            set {
                if ((this.пассивField != null)) {
                    if ((пассивField.Equals(value) != true)) {
                        this.пассивField = value;
                        this.OnPropertyChanged("Пассив");
                    }
                }
                else {
                    this.пассивField = value;
                    this.OnPropertyChanged("Пассив");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer", Order=2)]
        public string ПроцентРаспознавания {
            get {
                return this.процентРаспознаванияField;
            }
            set {
                if ((this.процентРаспознаванияField != null)) {
                    if ((процентРаспознаванияField.Equals(value) != true)) {
                        this.процентРаспознаванияField = value;
                        this.OnPropertyChanged("ПроцентРаспознавания");
                    }
                }
                else {
                    this.процентРаспознаванияField = value;
                    this.OnPropertyChanged("ПроцентРаспознавания");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументБалансОКУД ОКУД {
            get {
                return this.оКУДField;
            }
            set {
                if ((оКУДField.Equals(value) != true)) {
                    this.оКУДField = value;
                    this.OnPropertyChanged("ОКУД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодКварталТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументБалансОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументБаланс));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool АктивSpecified {
            get {
                return активFieldSpecified;
            }
            set {
                активFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПассивSpecified {
            get {
                return пассивFieldSpecified;
            }
            set {
                пассивFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПроцентРаспознаванияSpecified {
            get {
                return процентРаспознаванияFieldSpecified;
            }
            set {
                процентРаспознаванияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКУДSpecified {
            get {
                return оКУДFieldSpecified;
            }
            set {
                оКУДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументБаланс object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументБаланс object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументБаланс object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументБаланс obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБаланс);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументБаланс obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументБаланс Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументБаланс)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументБаланс object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументБаланс object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументБаланс object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументБаланс obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБаланс);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументБаланс obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументБаланс LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументБалансАктив : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументБалансАктивВнеОбА внеОбАField;
        
        private ФайлДокументБалансАктивОбА обАField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool внеОбАFieldSpecified;
        
        private bool обАFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументБалансАктивВнеОбА ВнеОбА {
            get {
                if ((this.внеОбАField == null)) {
                    this.внеОбАField = new ФайлДокументБалансАктивВнеОбА();
                }
                return this.внеОбАField;
            }
            set {
                if ((this.внеОбАField != null)) {
                    if ((внеОбАField.Equals(value) != true)) {
                        this.внеОбАField = value;
                        this.OnPropertyChanged("ВнеОбА");
                    }
                }
                else {
                    this.внеОбАField = value;
                    this.OnPropertyChanged("ВнеОбА");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументБалансАктивОбА ОбА {
            get {
                if ((this.обАField == null)) {
                    this.обАField = new ФайлДокументБалансАктивОбА();
                }
                return this.обАField;
            }
            set {
                if ((this.обАField != null)) {
                    if ((обАField.Equals(value) != true)) {
                        this.обАField = value;
                        this.OnPropertyChanged("ОбА");
                    }
                }
                else {
                    this.обАField = value;
                    this.OnPropertyChanged("ОбА");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументБалансАктив));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВнеОбАSpecified {
            get {
                return внеОбАFieldSpecified;
            }
            set {
                внеОбАFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбАSpecified {
            get {
                return обАFieldSpecified;
            }
            set {
                обАFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументБалансАктив object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументБалансАктив object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансАктив object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументБалансАктив obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансАктив);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументБалансАктив obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументБалансАктив Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументБалансАктив)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументБалансАктив object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументБалансАктив object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансАктив object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансАктив obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансАктив);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансАктив obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументБалансАктив LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументБалансАктивВнеОбА : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПП_ВПТип нематАктField;
        
        private ОПП_ВПТип резИсследField;
        
        private ОПП_ВПТип неМатПоискАктField;
        
        private ОПП_ВПТип матПоискАктField;
        
        private ОПП_ВПТип оснСрField;
        
        private ОПП_ВПТип влМатЦенField;
        
        private ОПП_ВПТип финВложField;
        
        private ОПП_ВПТип отлНалАктField;
        
        private List<ВПокОППТип> вПокВнеОбАField;
        
        private ОПП_ВПТип прочВнеОбАField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool нематАктFieldSpecified;
        
        private bool резИсследFieldSpecified;
        
        private bool неМатПоискАктFieldSpecified;
        
        private bool матПоискАктFieldSpecified;
        
        private bool оснСрFieldSpecified;
        
        private bool влМатЦенFieldSpecified;
        
        private bool финВложFieldSpecified;
        
        private bool отлНалАктFieldSpecified;
        
        private bool вПокВнеОбАFieldSpecified;
        
        private bool прочВнеОбАFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПП_ВПТип НематАкт {
            get {
                if ((this.нематАктField == null)) {
                    this.нематАктField = new ОПП_ВПТип();
                }
                return this.нематАктField;
            }
            set {
                if ((this.нематАктField != null)) {
                    if ((нематАктField.Equals(value) != true)) {
                        this.нематАктField = value;
                        this.OnPropertyChanged("НематАкт");
                    }
                }
                else {
                    this.нематАктField = value;
                    this.OnPropertyChanged("НематАкт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПП_ВПТип РезИсслед {
            get {
                if ((this.резИсследField == null)) {
                    this.резИсследField = new ОПП_ВПТип();
                }
                return this.резИсследField;
            }
            set {
                if ((this.резИсследField != null)) {
                    if ((резИсследField.Equals(value) != true)) {
                        this.резИсследField = value;
                        this.OnPropertyChanged("РезИсслед");
                    }
                }
                else {
                    this.резИсследField = value;
                    this.OnPropertyChanged("РезИсслед");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПП_ВПТип НеМатПоискАкт {
            get {
                if ((this.неМатПоискАктField == null)) {
                    this.неМатПоискАктField = new ОПП_ВПТип();
                }
                return this.неМатПоискАктField;
            }
            set {
                if ((this.неМатПоискАктField != null)) {
                    if ((неМатПоискАктField.Equals(value) != true)) {
                        this.неМатПоискАктField = value;
                        this.OnPropertyChanged("НеМатПоискАкт");
                    }
                }
                else {
                    this.неМатПоискАктField = value;
                    this.OnPropertyChanged("НеМатПоискАкт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПП_ВПТип МатПоискАкт {
            get {
                if ((this.матПоискАктField == null)) {
                    this.матПоискАктField = new ОПП_ВПТип();
                }
                return this.матПоискАктField;
            }
            set {
                if ((this.матПоискАктField != null)) {
                    if ((матПоискАктField.Equals(value) != true)) {
                        this.матПоискАктField = value;
                        this.OnPropertyChanged("МатПоискАкт");
                    }
                }
                else {
                    this.матПоискАктField = value;
                    this.OnPropertyChanged("МатПоискАкт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОПП_ВПТип ОснСр {
            get {
                if ((this.оснСрField == null)) {
                    this.оснСрField = new ОПП_ВПТип();
                }
                return this.оснСрField;
            }
            set {
                if ((this.оснСрField != null)) {
                    if ((оснСрField.Equals(value) != true)) {
                        this.оснСрField = value;
                        this.OnPropertyChanged("ОснСр");
                    }
                }
                else {
                    this.оснСрField = value;
                    this.OnPropertyChanged("ОснСр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ОПП_ВПТип ВлМатЦен {
            get {
                if ((this.влМатЦенField == null)) {
                    this.влМатЦенField = new ОПП_ВПТип();
                }
                return this.влМатЦенField;
            }
            set {
                if ((this.влМатЦенField != null)) {
                    if ((влМатЦенField.Equals(value) != true)) {
                        this.влМатЦенField = value;
                        this.OnPropertyChanged("ВлМатЦен");
                    }
                }
                else {
                    this.влМатЦенField = value;
                    this.OnPropertyChanged("ВлМатЦен");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ОПП_ВПТип ФинВлож {
            get {
                if ((this.финВложField == null)) {
                    this.финВложField = new ОПП_ВПТип();
                }
                return this.финВложField;
            }
            set {
                if ((this.финВложField != null)) {
                    if ((финВложField.Equals(value) != true)) {
                        this.финВложField = value;
                        this.OnPropertyChanged("ФинВлож");
                    }
                }
                else {
                    this.финВложField = value;
                    this.OnPropertyChanged("ФинВлож");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public ОПП_ВПТип ОтлНалАкт {
            get {
                if ((this.отлНалАктField == null)) {
                    this.отлНалАктField = new ОПП_ВПТип();
                }
                return this.отлНалАктField;
            }
            set {
                if ((this.отлНалАктField != null)) {
                    if ((отлНалАктField.Equals(value) != true)) {
                        this.отлНалАктField = value;
                        this.OnPropertyChanged("ОтлНалАкт");
                    }
                }
                else {
                    this.отлНалАктField = value;
                    this.OnPropertyChanged("ОтлНалАкт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокВнеОбА", Order=8)]
        public List<ВПокОППТип> ВПокВнеОбА {
            get {
                if ((this.вПокВнеОбАField == null)) {
                    this.вПокВнеОбАField = new List<ВПокОППТип>();
                }
                return this.вПокВнеОбАField;
            }
            set {
                if ((this.вПокВнеОбАField != null)) {
                    if ((вПокВнеОбАField.Equals(value) != true)) {
                        this.вПокВнеОбАField = value;
                        this.OnPropertyChanged("ВПокВнеОбА");
                    }
                }
                else {
                    this.вПокВнеОбАField = value;
                    this.OnPropertyChanged("ВПокВнеОбА");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public ОПП_ВПТип ПрочВнеОбА {
            get {
                if ((this.прочВнеОбАField == null)) {
                    this.прочВнеОбАField = new ОПП_ВПТип();
                }
                return this.прочВнеОбАField;
            }
            set {
                if ((this.прочВнеОбАField != null)) {
                    if ((прочВнеОбАField.Equals(value) != true)) {
                        this.прочВнеОбАField = value;
                        this.OnPropertyChanged("ПрочВнеОбА");
                    }
                }
                else {
                    this.прочВнеОбАField = value;
                    this.OnPropertyChanged("ПрочВнеОбА");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументБалансАктивВнеОбА));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НематАктSpecified {
            get {
                return нематАктFieldSpecified;
            }
            set {
                нематАктFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезИсследSpecified {
            get {
                return резИсследFieldSpecified;
            }
            set {
                резИсследFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НеМатПоискАктSpecified {
            get {
                return неМатПоискАктFieldSpecified;
            }
            set {
                неМатПоискАктFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool МатПоискАктSpecified {
            get {
                return матПоискАктFieldSpecified;
            }
            set {
                матПоискАктFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОснСрSpecified {
            get {
                return оснСрFieldSpecified;
            }
            set {
                оснСрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВлМатЦенSpecified {
            get {
                return влМатЦенFieldSpecified;
            }
            set {
                влМатЦенFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ФинВложSpecified {
            get {
                return финВложFieldSpecified;
            }
            set {
                финВложFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтлНалАктSpecified {
            get {
                return отлНалАктFieldSpecified;
            }
            set {
                отлНалАктFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокВнеОбАSpecified {
            get {
                return вПокВнеОбАFieldSpecified;
            }
            set {
                вПокВнеОбАFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочВнеОбАSpecified {
            get {
                return прочВнеОбАFieldSpecified;
            }
            set {
                прочВнеОбАFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументБалансАктивВнеОбА object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументБалансАктивВнеОбА object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансАктивВнеОбА object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументБалансАктивВнеОбА obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансАктивВнеОбА);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументБалансАктивВнеОбА obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументБалансАктивВнеОбА Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументБалансАктивВнеОбА)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументБалансАктивВнеОбА object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументБалансАктивВнеОбА object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансАктивВнеОбА object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансАктивВнеОбА obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансАктивВнеОбА);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансАктивВнеОбА obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументБалансАктивВнеОбА LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументБалансАктивОбА : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПП_ВПТип запасыField;
        
        private ОПП_ВПТип нДСПриобрЦенField;
        
        private ОПП_ВПТип дебЗадField;
        
        private ОПП_ВПТип финВложField;
        
        private ОПП_ВПТип денежнСрField;
        
        private List<ВПокОППТип> вПокОбАField;
        
        private ОПП_ВПТип прочОбАField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool запасыFieldSpecified;
        
        private bool нДСПриобрЦенFieldSpecified;
        
        private bool дебЗадFieldSpecified;
        
        private bool финВложFieldSpecified;
        
        private bool денежнСрFieldSpecified;
        
        private bool вПокОбАFieldSpecified;
        
        private bool прочОбАFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПП_ВПТип Запасы {
            get {
                if ((this.запасыField == null)) {
                    this.запасыField = new ОПП_ВПТип();
                }
                return this.запасыField;
            }
            set {
                if ((this.запасыField != null)) {
                    if ((запасыField.Equals(value) != true)) {
                        this.запасыField = value;
                        this.OnPropertyChanged("Запасы");
                    }
                }
                else {
                    this.запасыField = value;
                    this.OnPropertyChanged("Запасы");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПП_ВПТип НДСПриобрЦен {
            get {
                if ((this.нДСПриобрЦенField == null)) {
                    this.нДСПриобрЦенField = new ОПП_ВПТип();
                }
                return this.нДСПриобрЦенField;
            }
            set {
                if ((this.нДСПриобрЦенField != null)) {
                    if ((нДСПриобрЦенField.Equals(value) != true)) {
                        this.нДСПриобрЦенField = value;
                        this.OnPropertyChanged("НДСПриобрЦен");
                    }
                }
                else {
                    this.нДСПриобрЦенField = value;
                    this.OnPropertyChanged("НДСПриобрЦен");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПП_ВПТип ДебЗад {
            get {
                if ((this.дебЗадField == null)) {
                    this.дебЗадField = new ОПП_ВПТип();
                }
                return this.дебЗадField;
            }
            set {
                if ((this.дебЗадField != null)) {
                    if ((дебЗадField.Equals(value) != true)) {
                        this.дебЗадField = value;
                        this.OnPropertyChanged("ДебЗад");
                    }
                }
                else {
                    this.дебЗадField = value;
                    this.OnPropertyChanged("ДебЗад");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПП_ВПТип ФинВлож {
            get {
                if ((this.финВложField == null)) {
                    this.финВложField = new ОПП_ВПТип();
                }
                return this.финВложField;
            }
            set {
                if ((this.финВложField != null)) {
                    if ((финВложField.Equals(value) != true)) {
                        this.финВложField = value;
                        this.OnPropertyChanged("ФинВлож");
                    }
                }
                else {
                    this.финВложField = value;
                    this.OnPropertyChanged("ФинВлож");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОПП_ВПТип ДенежнСр {
            get {
                if ((this.денежнСрField == null)) {
                    this.денежнСрField = new ОПП_ВПТип();
                }
                return this.денежнСрField;
            }
            set {
                if ((this.денежнСрField != null)) {
                    if ((денежнСрField.Equals(value) != true)) {
                        this.денежнСрField = value;
                        this.OnPropertyChanged("ДенежнСр");
                    }
                }
                else {
                    this.денежнСрField = value;
                    this.OnPropertyChanged("ДенежнСр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокОбА", Order=5)]
        public List<ВПокОППТип> ВПокОбА {
            get {
                if ((this.вПокОбАField == null)) {
                    this.вПокОбАField = new List<ВПокОППТип>();
                }
                return this.вПокОбАField;
            }
            set {
                if ((this.вПокОбАField != null)) {
                    if ((вПокОбАField.Equals(value) != true)) {
                        this.вПокОбАField = value;
                        this.OnPropertyChanged("ВПокОбА");
                    }
                }
                else {
                    this.вПокОбАField = value;
                    this.OnPropertyChanged("ВПокОбА");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ОПП_ВПТип ПрочОбА {
            get {
                if ((this.прочОбАField == null)) {
                    this.прочОбАField = new ОПП_ВПТип();
                }
                return this.прочОбАField;
            }
            set {
                if ((this.прочОбАField != null)) {
                    if ((прочОбАField.Equals(value) != true)) {
                        this.прочОбАField = value;
                        this.OnPropertyChanged("ПрочОбА");
                    }
                }
                else {
                    this.прочОбАField = value;
                    this.OnPropertyChanged("ПрочОбА");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументБалансАктивОбА));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ЗапасыSpecified {
            get {
                return запасыFieldSpecified;
            }
            set {
                запасыFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НДСПриобрЦенSpecified {
            get {
                return нДСПриобрЦенFieldSpecified;
            }
            set {
                нДСПриобрЦенFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДебЗадSpecified {
            get {
                return дебЗадFieldSpecified;
            }
            set {
                дебЗадFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ФинВложSpecified {
            get {
                return финВложFieldSpecified;
            }
            set {
                финВложFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДенежнСрSpecified {
            get {
                return денежнСрFieldSpecified;
            }
            set {
                денежнСрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокОбАSpecified {
            get {
                return вПокОбАFieldSpecified;
            }
            set {
                вПокОбАFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочОбАSpecified {
            get {
                return прочОбАFieldSpecified;
            }
            set {
                прочОбАFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументБалансАктивОбА object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументБалансАктивОбА object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансАктивОбА object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументБалансАктивОбА obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансАктивОбА);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументБалансАктивОбА obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументБалансАктивОбА Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументБалансАктивОбА)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументБалансАктивОбА object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументБалансАктивОбА object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансАктивОбА object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансАктивОбА obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансАктивОбА);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансАктивОбА obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументБалансАктивОбА LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументБалансПассив : System.ComponentModel.INotifyPropertyChanged {
        
        private object itemField;
        
        private ФайлДокументБалансПассивДолгосрОбяз долгосрОбязField;
        
        private ФайлДокументБалансПассивКраткосрОбяз краткосрОбязField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool itemFieldSpecified;
        
        private bool долгосрОбязFieldSpecified;
        
        private bool краткосрОбязFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("КапРез", typeof(ФайлДокументБалансПассивКапРез), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ЦелевФин", typeof(ФайлДокументБалансПассивЦелевФин), Order=0)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументБалансПассивДолгосрОбяз ДолгосрОбяз {
            get {
                if ((this.долгосрОбязField == null)) {
                    this.долгосрОбязField = new ФайлДокументБалансПассивДолгосрОбяз();
                }
                return this.долгосрОбязField;
            }
            set {
                if ((this.долгосрОбязField != null)) {
                    if ((долгосрОбязField.Equals(value) != true)) {
                        this.долгосрОбязField = value;
                        this.OnPropertyChanged("ДолгосрОбяз");
                    }
                }
                else {
                    this.долгосрОбязField = value;
                    this.OnPropertyChanged("ДолгосрОбяз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ФайлДокументБалансПассивКраткосрОбяз КраткосрОбяз {
            get {
                if ((this.краткосрОбязField == null)) {
                    this.краткосрОбязField = new ФайлДокументБалансПассивКраткосрОбяз();
                }
                return this.краткосрОбязField;
            }
            set {
                if ((this.краткосрОбязField != null)) {
                    if ((краткосрОбязField.Equals(value) != true)) {
                        this.краткосрОбязField = value;
                        this.OnPropertyChanged("КраткосрОбяз");
                    }
                }
                else {
                    this.краткосрОбязField = value;
                    this.OnPropertyChanged("КраткосрОбяз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументБалансПассив));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ItemSpecified {
            get {
                return itemFieldSpecified;
            }
            set {
                itemFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДолгосрОбязSpecified {
            get {
                return долгосрОбязFieldSpecified;
            }
            set {
                долгосрОбязFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КраткосрОбязSpecified {
            get {
                return краткосрОбязFieldSpecified;
            }
            set {
                краткосрОбязFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументБалансПассив object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументБалансПассив object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансПассив object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументБалансПассив obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансПассив);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументБалансПассив obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументБалансПассив Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументБалансПассив)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументБалансПассив object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументБалансПассив object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансПассив object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансПассив obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансПассив);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансПассив obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументБалансПассив LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументБалансПассивКапРез : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПП_ВПТип уставКапиталField;
        
        private ОПП_ВПТип собствАкцииField;
        
        private ОПП_ВПТип переоцВнеОбАField;
        
        private ОПП_ВПТип добКапиталField;
        
        private ОПП_ВПТип резКапиталField;
        
        private ОПП_ВПТип нераспПрибField;
        
        private List<ВПокОППТип> вПокКапРезField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool уставКапиталFieldSpecified;
        
        private bool собствАкцииFieldSpecified;
        
        private bool переоцВнеОбАFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool резКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool вПокКапРезFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПП_ВПТип УставКапитал {
            get {
                if ((this.уставКапиталField == null)) {
                    this.уставКапиталField = new ОПП_ВПТип();
                }
                return this.уставКапиталField;
            }
            set {
                if ((this.уставКапиталField != null)) {
                    if ((уставКапиталField.Equals(value) != true)) {
                        this.уставКапиталField = value;
                        this.OnPropertyChanged("УставКапитал");
                    }
                }
                else {
                    this.уставКапиталField = value;
                    this.OnPropertyChanged("УставКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПП_ВПТип СобствАкции {
            get {
                if ((this.собствАкцииField == null)) {
                    this.собствАкцииField = new ОПП_ВПТип();
                }
                return this.собствАкцииField;
            }
            set {
                if ((this.собствАкцииField != null)) {
                    if ((собствАкцииField.Equals(value) != true)) {
                        this.собствАкцииField = value;
                        this.OnPropertyChanged("СобствАкции");
                    }
                }
                else {
                    this.собствАкцииField = value;
                    this.OnPropertyChanged("СобствАкции");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПП_ВПТип ПереоцВнеОбА {
            get {
                if ((this.переоцВнеОбАField == null)) {
                    this.переоцВнеОбАField = new ОПП_ВПТип();
                }
                return this.переоцВнеОбАField;
            }
            set {
                if ((this.переоцВнеОбАField != null)) {
                    if ((переоцВнеОбАField.Equals(value) != true)) {
                        this.переоцВнеОбАField = value;
                        this.OnPropertyChanged("ПереоцВнеОбА");
                    }
                }
                else {
                    this.переоцВнеОбАField = value;
                    this.OnPropertyChanged("ПереоцВнеОбА");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПП_ВПТип ДобКапитал {
            get {
                if ((this.добКапиталField == null)) {
                    this.добКапиталField = new ОПП_ВПТип();
                }
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОПП_ВПТип РезКапитал {
            get {
                if ((this.резКапиталField == null)) {
                    this.резКапиталField = new ОПП_ВПТип();
                }
                return this.резКапиталField;
            }
            set {
                if ((this.резКапиталField != null)) {
                    if ((резКапиталField.Equals(value) != true)) {
                        this.резКапиталField = value;
                        this.OnPropertyChanged("РезКапитал");
                    }
                }
                else {
                    this.резКапиталField = value;
                    this.OnPropertyChanged("РезКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ОПП_ВПТип НераспПриб {
            get {
                if ((this.нераспПрибField == null)) {
                    this.нераспПрибField = new ОПП_ВПТип();
                }
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокКапРез", Order=6)]
        public List<ВПокОППТип> ВПокКапРез {
            get {
                if ((this.вПокКапРезField == null)) {
                    this.вПокКапРезField = new List<ВПокОППТип>();
                }
                return this.вПокКапРезField;
            }
            set {
                if ((this.вПокКапРезField != null)) {
                    if ((вПокКапРезField.Equals(value) != true)) {
                        this.вПокКапРезField = value;
                        this.OnPropertyChanged("ВПокКапРез");
                    }
                }
                else {
                    this.вПокКапРезField = value;
                    this.OnPropertyChanged("ВПокКапРез");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументБалансПассивКапРез));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УставКапиталSpecified {
            get {
                return уставКапиталFieldSpecified;
            }
            set {
                уставКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобствАкцииSpecified {
            get {
                return собствАкцииFieldSpecified;
            }
            set {
                собствАкцииFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПереоцВнеОбАSpecified {
            get {
                return переоцВнеОбАFieldSpecified;
            }
            set {
                переоцВнеОбАFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезКапиталSpecified {
            get {
                return резКапиталFieldSpecified;
            }
            set {
                резКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокКапРезSpecified {
            get {
                return вПокКапРезFieldSpecified;
            }
            set {
                вПокКапРезFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументБалансПассивКапРез object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументБалансПассивКапРез object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансПассивКапРез object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументБалансПассивКапРез obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансПассивКапРез);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументБалансПассивКапРез obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументБалансПассивКапРез Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументБалансПассивКапРез)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументБалансПассивКапРез object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументБалансПассивКапРез object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансПассивКапРез object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансПассивКапРез obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансПассивКапРез);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансПассивКапРез obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументБалансПассивКапРез LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументБалансПассивЦелевФин : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПП_ВПТип пайФондField;
        
        private ОПП_ВПТип целевКапиталField;
        
        private ОПП_ВПТип целевСредстваField;
        
        private ОПП_ВПТип фондИмущField;
        
        private ОПП_ВПТип резервИнЦФField;
        
        private List<ВПокОППТип> вПокЦелФинField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool пайФондFieldSpecified;
        
        private bool целевКапиталFieldSpecified;
        
        private bool целевСредстваFieldSpecified;
        
        private bool фондИмущFieldSpecified;
        
        private bool резервИнЦФFieldSpecified;
        
        private bool вПокЦелФинFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПП_ВПТип ПайФонд {
            get {
                if ((this.пайФондField == null)) {
                    this.пайФондField = new ОПП_ВПТип();
                }
                return this.пайФондField;
            }
            set {
                if ((this.пайФондField != null)) {
                    if ((пайФондField.Equals(value) != true)) {
                        this.пайФондField = value;
                        this.OnPropertyChanged("ПайФонд");
                    }
                }
                else {
                    this.пайФондField = value;
                    this.OnPropertyChanged("ПайФонд");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПП_ВПТип ЦелевКапитал {
            get {
                if ((this.целевКапиталField == null)) {
                    this.целевКапиталField = new ОПП_ВПТип();
                }
                return this.целевКапиталField;
            }
            set {
                if ((this.целевКапиталField != null)) {
                    if ((целевКапиталField.Equals(value) != true)) {
                        this.целевКапиталField = value;
                        this.OnPropertyChanged("ЦелевКапитал");
                    }
                }
                else {
                    this.целевКапиталField = value;
                    this.OnPropertyChanged("ЦелевКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПП_ВПТип ЦелевСредства {
            get {
                if ((this.целевСредстваField == null)) {
                    this.целевСредстваField = new ОПП_ВПТип();
                }
                return this.целевСредстваField;
            }
            set {
                if ((this.целевСредстваField != null)) {
                    if ((целевСредстваField.Equals(value) != true)) {
                        this.целевСредстваField = value;
                        this.OnPropertyChanged("ЦелевСредства");
                    }
                }
                else {
                    this.целевСредстваField = value;
                    this.OnPropertyChanged("ЦелевСредства");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПП_ВПТип ФондИмущ {
            get {
                if ((this.фондИмущField == null)) {
                    this.фондИмущField = new ОПП_ВПТип();
                }
                return this.фондИмущField;
            }
            set {
                if ((this.фондИмущField != null)) {
                    if ((фондИмущField.Equals(value) != true)) {
                        this.фондИмущField = value;
                        this.OnPropertyChanged("ФондИмущ");
                    }
                }
                else {
                    this.фондИмущField = value;
                    this.OnPropertyChanged("ФондИмущ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОПП_ВПТип РезервИнЦФ {
            get {
                if ((this.резервИнЦФField == null)) {
                    this.резервИнЦФField = new ОПП_ВПТип();
                }
                return this.резервИнЦФField;
            }
            set {
                if ((this.резервИнЦФField != null)) {
                    if ((резервИнЦФField.Equals(value) != true)) {
                        this.резервИнЦФField = value;
                        this.OnPropertyChanged("РезервИнЦФ");
                    }
                }
                else {
                    this.резервИнЦФField = value;
                    this.OnPropertyChanged("РезервИнЦФ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокЦелФин", Order=5)]
        public List<ВПокОППТип> ВПокЦелФин {
            get {
                if ((this.вПокЦелФинField == null)) {
                    this.вПокЦелФинField = new List<ВПокОППТип>();
                }
                return this.вПокЦелФинField;
            }
            set {
                if ((this.вПокЦелФинField != null)) {
                    if ((вПокЦелФинField.Equals(value) != true)) {
                        this.вПокЦелФинField = value;
                        this.OnPropertyChanged("ВПокЦелФин");
                    }
                }
                else {
                    this.вПокЦелФинField = value;
                    this.OnPropertyChanged("ВПокЦелФин");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументБалансПассивЦелевФин));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПайФондSpecified {
            get {
                return пайФондFieldSpecified;
            }
            set {
                пайФондFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЦелевКапиталSpecified {
            get {
                return целевКапиталFieldSpecified;
            }
            set {
                целевКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЦелевСредстваSpecified {
            get {
                return целевСредстваFieldSpecified;
            }
            set {
                целевСредстваFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ФондИмущSpecified {
            get {
                return фондИмущFieldSpecified;
            }
            set {
                фондИмущFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезервИнЦФSpecified {
            get {
                return резервИнЦФFieldSpecified;
            }
            set {
                резервИнЦФFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокЦелФинSpecified {
            get {
                return вПокЦелФинFieldSpecified;
            }
            set {
                вПокЦелФинFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументБалансПассивЦелевФин object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументБалансПассивЦелевФин object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансПассивЦелевФин object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументБалансПассивЦелевФин obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансПассивЦелевФин);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументБалансПассивЦелевФин obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументБалансПассивЦелевФин Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументБалансПассивЦелевФин)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументБалансПассивЦелевФин object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументБалансПассивЦелевФин object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансПассивЦелевФин object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансПассивЦелевФин obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансПассивЦелевФин);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансПассивЦелевФин obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументБалансПассивЦелевФин LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументБалансПассивДолгосрОбяз : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПП_ВПТип заемСредствField;
        
        private ОПП_ВПТип отложНалОбязField;
        
        private ОПП_ВПТип оценОбязField;
        
        private List<ВПокОППТип> вПокДолгОбField;
        
        private ОПП_ВПТип прочОбязField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool заемСредствFieldSpecified;
        
        private bool отложНалОбязFieldSpecified;
        
        private bool оценОбязFieldSpecified;
        
        private bool вПокДолгОбFieldSpecified;
        
        private bool прочОбязFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПП_ВПТип ЗаемСредств {
            get {
                if ((this.заемСредствField == null)) {
                    this.заемСредствField = new ОПП_ВПТип();
                }
                return this.заемСредствField;
            }
            set {
                if ((this.заемСредствField != null)) {
                    if ((заемСредствField.Equals(value) != true)) {
                        this.заемСредствField = value;
                        this.OnPropertyChanged("ЗаемСредств");
                    }
                }
                else {
                    this.заемСредствField = value;
                    this.OnPropertyChanged("ЗаемСредств");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПП_ВПТип ОтложНалОбяз {
            get {
                if ((this.отложНалОбязField == null)) {
                    this.отложНалОбязField = new ОПП_ВПТип();
                }
                return this.отложНалОбязField;
            }
            set {
                if ((this.отложНалОбязField != null)) {
                    if ((отложНалОбязField.Equals(value) != true)) {
                        this.отложНалОбязField = value;
                        this.OnPropertyChanged("ОтложНалОбяз");
                    }
                }
                else {
                    this.отложНалОбязField = value;
                    this.OnPropertyChanged("ОтложНалОбяз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПП_ВПТип ОценОбяз {
            get {
                if ((this.оценОбязField == null)) {
                    this.оценОбязField = new ОПП_ВПТип();
                }
                return this.оценОбязField;
            }
            set {
                if ((this.оценОбязField != null)) {
                    if ((оценОбязField.Equals(value) != true)) {
                        this.оценОбязField = value;
                        this.OnPropertyChanged("ОценОбяз");
                    }
                }
                else {
                    this.оценОбязField = value;
                    this.OnPropertyChanged("ОценОбяз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокДолгОб", Order=3)]
        public List<ВПокОППТип> ВПокДолгОб {
            get {
                if ((this.вПокДолгОбField == null)) {
                    this.вПокДолгОбField = new List<ВПокОППТип>();
                }
                return this.вПокДолгОбField;
            }
            set {
                if ((this.вПокДолгОбField != null)) {
                    if ((вПокДолгОбField.Equals(value) != true)) {
                        this.вПокДолгОбField = value;
                        this.OnPropertyChanged("ВПокДолгОб");
                    }
                }
                else {
                    this.вПокДолгОбField = value;
                    this.OnPropertyChanged("ВПокДолгОб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОПП_ВПТип ПрочОбяз {
            get {
                if ((this.прочОбязField == null)) {
                    this.прочОбязField = new ОПП_ВПТип();
                }
                return this.прочОбязField;
            }
            set {
                if ((this.прочОбязField != null)) {
                    if ((прочОбязField.Equals(value) != true)) {
                        this.прочОбязField = value;
                        this.OnPropertyChanged("ПрочОбяз");
                    }
                }
                else {
                    this.прочОбязField = value;
                    this.OnPropertyChanged("ПрочОбяз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументБалансПассивДолгосрОбяз));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ЗаемСредствSpecified {
            get {
                return заемСредствFieldSpecified;
            }
            set {
                заемСредствFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтложНалОбязSpecified {
            get {
                return отложНалОбязFieldSpecified;
            }
            set {
                отложНалОбязFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОценОбязSpecified {
            get {
                return оценОбязFieldSpecified;
            }
            set {
                оценОбязFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокДолгОбSpecified {
            get {
                return вПокДолгОбFieldSpecified;
            }
            set {
                вПокДолгОбFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочОбязSpecified {
            get {
                return прочОбязFieldSpecified;
            }
            set {
                прочОбязFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументБалансПассивДолгосрОбяз object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументБалансПассивДолгосрОбяз object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансПассивДолгосрОбяз object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументБалансПассивДолгосрОбяз obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансПассивДолгосрОбяз);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументБалансПассивДолгосрОбяз obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументБалансПассивДолгосрОбяз Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументБалансПассивДолгосрОбяз)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументБалансПассивДолгосрОбяз object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументБалансПассивДолгосрОбяз object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансПассивДолгосрОбяз object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансПассивДолгосрОбяз obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансПассивДолгосрОбяз);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансПассивДолгосрОбяз obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументБалансПассивДолгосрОбяз LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументБалансПассивКраткосрОбяз : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПП_ВПТип заемСредствField;
        
        private ОПП_ВПТип кредитЗадолжField;
        
        private ОПП_ВПТип доходБудущField;
        
        private ОПП_ВПТип оценОбязField;
        
        private List<ВПокОППТип> вПокКратОбField;
        
        private ОПП_ВПТип прочОбязField;
        
        private string поясненияField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool заемСредствFieldSpecified;
        
        private bool кредитЗадолжFieldSpecified;
        
        private bool доходБудущFieldSpecified;
        
        private bool оценОбязFieldSpecified;
        
        private bool вПокКратОбFieldSpecified;
        
        private bool прочОбязFieldSpecified;
        
        private bool поясненияFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПП_ВПТип ЗаемСредств {
            get {
                if ((this.заемСредствField == null)) {
                    this.заемСредствField = new ОПП_ВПТип();
                }
                return this.заемСредствField;
            }
            set {
                if ((this.заемСредствField != null)) {
                    if ((заемСредствField.Equals(value) != true)) {
                        this.заемСредствField = value;
                        this.OnPropertyChanged("ЗаемСредств");
                    }
                }
                else {
                    this.заемСредствField = value;
                    this.OnPropertyChanged("ЗаемСредств");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПП_ВПТип КредитЗадолж {
            get {
                if ((this.кредитЗадолжField == null)) {
                    this.кредитЗадолжField = new ОПП_ВПТип();
                }
                return this.кредитЗадолжField;
            }
            set {
                if ((this.кредитЗадолжField != null)) {
                    if ((кредитЗадолжField.Equals(value) != true)) {
                        this.кредитЗадолжField = value;
                        this.OnPropertyChanged("КредитЗадолж");
                    }
                }
                else {
                    this.кредитЗадолжField = value;
                    this.OnPropertyChanged("КредитЗадолж");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПП_ВПТип ДоходБудущ {
            get {
                if ((this.доходБудущField == null)) {
                    this.доходБудущField = new ОПП_ВПТип();
                }
                return this.доходБудущField;
            }
            set {
                if ((this.доходБудущField != null)) {
                    if ((доходБудущField.Equals(value) != true)) {
                        this.доходБудущField = value;
                        this.OnPropertyChanged("ДоходБудущ");
                    }
                }
                else {
                    this.доходБудущField = value;
                    this.OnPropertyChanged("ДоходБудущ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПП_ВПТип ОценОбяз {
            get {
                if ((this.оценОбязField == null)) {
                    this.оценОбязField = new ОПП_ВПТип();
                }
                return this.оценОбязField;
            }
            set {
                if ((this.оценОбязField != null)) {
                    if ((оценОбязField.Equals(value) != true)) {
                        this.оценОбязField = value;
                        this.OnPropertyChanged("ОценОбяз");
                    }
                }
                else {
                    this.оценОбязField = value;
                    this.OnPropertyChanged("ОценОбяз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокКратОб", Order=4)]
        public List<ВПокОППТип> ВПокКратОб {
            get {
                if ((this.вПокКратОбField == null)) {
                    this.вПокКратОбField = new List<ВПокОППТип>();
                }
                return this.вПокКратОбField;
            }
            set {
                if ((this.вПокКратОбField != null)) {
                    if ((вПокКратОбField.Equals(value) != true)) {
                        this.вПокКратОбField = value;
                        this.OnPropertyChanged("ВПокКратОб");
                    }
                }
                else {
                    this.вПокКратОбField = value;
                    this.OnPropertyChanged("ВПокКратОб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ОПП_ВПТип ПрочОбяз {
            get {
                if ((this.прочОбязField == null)) {
                    this.прочОбязField = new ОПП_ВПТип();
                }
                return this.прочОбязField;
            }
            set {
                if ((this.прочОбязField != null)) {
                    if ((прочОбязField.Equals(value) != true)) {
                        this.прочОбязField = value;
                        this.OnPropertyChanged("ПрочОбяз");
                    }
                }
                else {
                    this.прочОбязField = value;
                    this.OnPropertyChanged("ПрочОбяз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументБалансПассивКраткосрОбяз));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ЗаемСредствSpecified {
            get {
                return заемСредствFieldSpecified;
            }
            set {
                заемСредствFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КредитЗадолжSpecified {
            get {
                return кредитЗадолжFieldSpecified;
            }
            set {
                кредитЗадолжFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДоходБудущSpecified {
            get {
                return доходБудущFieldSpecified;
            }
            set {
                доходБудущFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОценОбязSpecified {
            get {
                return оценОбязFieldSpecified;
            }
            set {
                оценОбязFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокКратОбSpecified {
            get {
                return вПокКратОбFieldSpecified;
            }
            set {
                вПокКратОбFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочОбязSpecified {
            get {
                return прочОбязFieldSpecified;
            }
            set {
                прочОбязFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументБалансПассивКраткосрОбяз object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументБалансПассивКраткосрОбяз object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансПассивКраткосрОбяз object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументБалансПассивКраткосрОбяз obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансПассивКраткосрОбяз);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументБалансПассивКраткосрОбяз obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументБалансПассивКраткосрОбяз Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументБалансПассивКраткосрОбяз)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументБалансПассивКраткосрОбяз object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументБалансПассивКраткосрОбяз object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументБалансПассивКраткосрОбяз object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансПассивКраткосрОбяз obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументБалансПассивКраткосрОбяз);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументБалансПассивКраткосрОбяз obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументБалансПассивКраткосрОбяз LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументБалансОКУД {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0710001")]
        Item0710001,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum ПериодКварталТип {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        Item21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("31")]
        Item31,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("33")]
        Item33,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("34")]
        Item34,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументБалансОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("385")]
        Item385,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрибУб : System.ComponentModel.INotifyPropertyChanged {
        
        private ОтчПредНДопТип выручField;
        
        private ОтчПредНДопТип себестПродField;
        
        private ОтчПредНДопТип валоваяПрибыльField;
        
        private ОтчПредНДопТип комРасходField;
        
        private ОтчПредНДопТип упрРасходField;
        
        private ОтчПредНДопТип прибПродField;
        
        private ОтчПредНДопТип доходОтУчастField;
        
        private ОтчПредНДопТип процПолучField;
        
        private ОтчПредНДопТип процУплField;
        
        private ОтчПредНДопТип прочДоходField;
        
        private ОтчПредНДопТип прочРасходField;
        
        private ОтчПредОДопТип прибУбДоНалField;
        
        private ОтчПредНТип текНалПрибField;
        
        private ОтчПредНДопТип постНалОбязField;
        
        private ОтчПредНДопТип измНалОбязField;
        
        private ОтчПредНДопТип измНалАктивField;
        
        private ОтчПредНДопТип прочееField;
        
        private ОтчПредОТип чистПрибУбField;
        
        private ОтчПредНДопТип резПрцВОАНеЧистField;
        
        private ОтчПредНДопТип резПрОпНеЧистField;
        
        private ОтчПредНТип совФинРезField;
        
        private ФайлДокументПрибУбСправочно справочноField;
        
        private string процентРаспознаванияField;
        
        private ФайлДокументПрибУбОКУД оКУДField;
        
        private ПериодКварталТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументПрибУбОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool выручFieldSpecified;
        
        private bool себестПродFieldSpecified;
        
        private bool валоваяПрибыльFieldSpecified;
        
        private bool комРасходFieldSpecified;
        
        private bool упрРасходFieldSpecified;
        
        private bool прибПродFieldSpecified;
        
        private bool доходОтУчастFieldSpecified;
        
        private bool процПолучFieldSpecified;
        
        private bool процУплFieldSpecified;
        
        private bool прочДоходFieldSpecified;
        
        private bool прочРасходFieldSpecified;
        
        private bool прибУбДоНалFieldSpecified;
        
        private bool текНалПрибFieldSpecified;
        
        private bool постНалОбязFieldSpecified;
        
        private bool измНалОбязFieldSpecified;
        
        private bool измНалАктивFieldSpecified;
        
        private bool прочееFieldSpecified;
        
        private bool чистПрибУбFieldSpecified;
        
        private bool резПрцВОАНеЧистFieldSpecified;
        
        private bool резПрОпНеЧистFieldSpecified;
        
        private bool совФинРезFieldSpecified;
        
        private bool справочноFieldSpecified;
        
        private bool процентРаспознаванияFieldSpecified;
        
        private bool оКУДFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОтчПредНДопТип Выруч {
            get {
                if ((this.выручField == null)) {
                    this.выручField = new ОтчПредНДопТип();
                }
                return this.выручField;
            }
            set {
                if ((this.выручField != null)) {
                    if ((выручField.Equals(value) != true)) {
                        this.выручField = value;
                        this.OnPropertyChanged("Выруч");
                    }
                }
                else {
                    this.выручField = value;
                    this.OnPropertyChanged("Выруч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОтчПредНДопТип СебестПрод {
            get {
                if ((this.себестПродField == null)) {
                    this.себестПродField = new ОтчПредНДопТип();
                }
                return this.себестПродField;
            }
            set {
                if ((this.себестПродField != null)) {
                    if ((себестПродField.Equals(value) != true)) {
                        this.себестПродField = value;
                        this.OnPropertyChanged("СебестПрод");
                    }
                }
                else {
                    this.себестПродField = value;
                    this.OnPropertyChanged("СебестПрод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОтчПредНДопТип ВаловаяПрибыль {
            get {
                if ((this.валоваяПрибыльField == null)) {
                    this.валоваяПрибыльField = new ОтчПредНДопТип();
                }
                return this.валоваяПрибыльField;
            }
            set {
                if ((this.валоваяПрибыльField != null)) {
                    if ((валоваяПрибыльField.Equals(value) != true)) {
                        this.валоваяПрибыльField = value;
                        this.OnPropertyChanged("ВаловаяПрибыль");
                    }
                }
                else {
                    this.валоваяПрибыльField = value;
                    this.OnPropertyChanged("ВаловаяПрибыль");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОтчПредНДопТип КомРасход {
            get {
                if ((this.комРасходField == null)) {
                    this.комРасходField = new ОтчПредНДопТип();
                }
                return this.комРасходField;
            }
            set {
                if ((this.комРасходField != null)) {
                    if ((комРасходField.Equals(value) != true)) {
                        this.комРасходField = value;
                        this.OnPropertyChanged("КомРасход");
                    }
                }
                else {
                    this.комРасходField = value;
                    this.OnPropertyChanged("КомРасход");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОтчПредНДопТип УпрРасход {
            get {
                if ((this.упрРасходField == null)) {
                    this.упрРасходField = new ОтчПредНДопТип();
                }
                return this.упрРасходField;
            }
            set {
                if ((this.упрРасходField != null)) {
                    if ((упрРасходField.Equals(value) != true)) {
                        this.упрРасходField = value;
                        this.OnPropertyChanged("УпрРасход");
                    }
                }
                else {
                    this.упрРасходField = value;
                    this.OnPropertyChanged("УпрРасход");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ОтчПредНДопТип ПрибПрод {
            get {
                if ((this.прибПродField == null)) {
                    this.прибПродField = new ОтчПредНДопТип();
                }
                return this.прибПродField;
            }
            set {
                if ((this.прибПродField != null)) {
                    if ((прибПродField.Equals(value) != true)) {
                        this.прибПродField = value;
                        this.OnPropertyChanged("ПрибПрод");
                    }
                }
                else {
                    this.прибПродField = value;
                    this.OnPropertyChanged("ПрибПрод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ОтчПредНДопТип ДоходОтУчаст {
            get {
                if ((this.доходОтУчастField == null)) {
                    this.доходОтУчастField = new ОтчПредНДопТип();
                }
                return this.доходОтУчастField;
            }
            set {
                if ((this.доходОтУчастField != null)) {
                    if ((доходОтУчастField.Equals(value) != true)) {
                        this.доходОтУчастField = value;
                        this.OnPropertyChanged("ДоходОтУчаст");
                    }
                }
                else {
                    this.доходОтУчастField = value;
                    this.OnPropertyChanged("ДоходОтУчаст");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public ОтчПредНДопТип ПроцПолуч {
            get {
                if ((this.процПолучField == null)) {
                    this.процПолучField = new ОтчПредНДопТип();
                }
                return this.процПолучField;
            }
            set {
                if ((this.процПолучField != null)) {
                    if ((процПолучField.Equals(value) != true)) {
                        this.процПолучField = value;
                        this.OnPropertyChanged("ПроцПолуч");
                    }
                }
                else {
                    this.процПолучField = value;
                    this.OnPropertyChanged("ПроцПолуч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public ОтчПредНДопТип ПроцУпл {
            get {
                if ((this.процУплField == null)) {
                    this.процУплField = new ОтчПредНДопТип();
                }
                return this.процУплField;
            }
            set {
                if ((this.процУплField != null)) {
                    if ((процУплField.Equals(value) != true)) {
                        this.процУплField = value;
                        this.OnPropertyChanged("ПроцУпл");
                    }
                }
                else {
                    this.процУплField = value;
                    this.OnPropertyChanged("ПроцУпл");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public ОтчПредНДопТип ПрочДоход {
            get {
                if ((this.прочДоходField == null)) {
                    this.прочДоходField = new ОтчПредНДопТип();
                }
                return this.прочДоходField;
            }
            set {
                if ((this.прочДоходField != null)) {
                    if ((прочДоходField.Equals(value) != true)) {
                        this.прочДоходField = value;
                        this.OnPropertyChanged("ПрочДоход");
                    }
                }
                else {
                    this.прочДоходField = value;
                    this.OnPropertyChanged("ПрочДоход");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public ОтчПредНДопТип ПрочРасход {
            get {
                if ((this.прочРасходField == null)) {
                    this.прочРасходField = new ОтчПредНДопТип();
                }
                return this.прочРасходField;
            }
            set {
                if ((this.прочРасходField != null)) {
                    if ((прочРасходField.Equals(value) != true)) {
                        this.прочРасходField = value;
                        this.OnPropertyChanged("ПрочРасход");
                    }
                }
                else {
                    this.прочРасходField = value;
                    this.OnPropertyChanged("ПрочРасход");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public ОтчПредОДопТип ПрибУбДоНал {
            get {
                if ((this.прибУбДоНалField == null)) {
                    this.прибУбДоНалField = new ОтчПредОДопТип();
                }
                return this.прибУбДоНалField;
            }
            set {
                if ((this.прибУбДоНалField != null)) {
                    if ((прибУбДоНалField.Equals(value) != true)) {
                        this.прибУбДоНалField = value;
                        this.OnPropertyChanged("ПрибУбДоНал");
                    }
                }
                else {
                    this.прибУбДоНалField = value;
                    this.OnPropertyChanged("ПрибУбДоНал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public ОтчПредНТип ТекНалПриб {
            get {
                if ((this.текНалПрибField == null)) {
                    this.текНалПрибField = new ОтчПредНТип();
                }
                return this.текНалПрибField;
            }
            set {
                if ((this.текНалПрибField != null)) {
                    if ((текНалПрибField.Equals(value) != true)) {
                        this.текНалПрибField = value;
                        this.OnPropertyChanged("ТекНалПриб");
                    }
                }
                else {
                    this.текНалПрибField = value;
                    this.OnPropertyChanged("ТекНалПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public ОтчПредНДопТип ПостНалОбяз {
            get {
                if ((this.постНалОбязField == null)) {
                    this.постНалОбязField = new ОтчПредНДопТип();
                }
                return this.постНалОбязField;
            }
            set {
                if ((this.постНалОбязField != null)) {
                    if ((постНалОбязField.Equals(value) != true)) {
                        this.постНалОбязField = value;
                        this.OnPropertyChanged("ПостНалОбяз");
                    }
                }
                else {
                    this.постНалОбязField = value;
                    this.OnPropertyChanged("ПостНалОбяз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public ОтчПредНДопТип ИзмНалОбяз {
            get {
                if ((this.измНалОбязField == null)) {
                    this.измНалОбязField = new ОтчПредНДопТип();
                }
                return this.измНалОбязField;
            }
            set {
                if ((this.измНалОбязField != null)) {
                    if ((измНалОбязField.Equals(value) != true)) {
                        this.измНалОбязField = value;
                        this.OnPropertyChanged("ИзмНалОбяз");
                    }
                }
                else {
                    this.измНалОбязField = value;
                    this.OnPropertyChanged("ИзмНалОбяз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public ОтчПредНДопТип ИзмНалАктив {
            get {
                if ((this.измНалАктивField == null)) {
                    this.измНалАктивField = new ОтчПредНДопТип();
                }
                return this.измНалАктивField;
            }
            set {
                if ((this.измНалАктивField != null)) {
                    if ((измНалАктивField.Equals(value) != true)) {
                        this.измНалАктивField = value;
                        this.OnPropertyChanged("ИзмНалАктив");
                    }
                }
                else {
                    this.измНалАктивField = value;
                    this.OnPropertyChanged("ИзмНалАктив");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public ОтчПредНДопТип Прочее {
            get {
                if ((this.прочееField == null)) {
                    this.прочееField = new ОтчПредНДопТип();
                }
                return this.прочееField;
            }
            set {
                if ((this.прочееField != null)) {
                    if ((прочееField.Equals(value) != true)) {
                        this.прочееField = value;
                        this.OnPropertyChanged("Прочее");
                    }
                }
                else {
                    this.прочееField = value;
                    this.OnPropertyChanged("Прочее");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public ОтчПредОТип ЧистПрибУб {
            get {
                if ((this.чистПрибУбField == null)) {
                    this.чистПрибУбField = new ОтчПредОТип();
                }
                return this.чистПрибУбField;
            }
            set {
                if ((this.чистПрибУбField != null)) {
                    if ((чистПрибУбField.Equals(value) != true)) {
                        this.чистПрибУбField = value;
                        this.OnPropertyChanged("ЧистПрибУб");
                    }
                }
                else {
                    this.чистПрибУбField = value;
                    this.OnPropertyChanged("ЧистПрибУб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public ОтчПредНДопТип РезПрцВОАНеЧист {
            get {
                if ((this.резПрцВОАНеЧистField == null)) {
                    this.резПрцВОАНеЧистField = new ОтчПредНДопТип();
                }
                return this.резПрцВОАНеЧистField;
            }
            set {
                if ((this.резПрцВОАНеЧистField != null)) {
                    if ((резПрцВОАНеЧистField.Equals(value) != true)) {
                        this.резПрцВОАНеЧистField = value;
                        this.OnPropertyChanged("РезПрцВОАНеЧист");
                    }
                }
                else {
                    this.резПрцВОАНеЧистField = value;
                    this.OnPropertyChanged("РезПрцВОАНеЧист");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public ОтчПредНДопТип РезПрОпНеЧист {
            get {
                if ((this.резПрОпНеЧистField == null)) {
                    this.резПрОпНеЧистField = new ОтчПредНДопТип();
                }
                return this.резПрОпНеЧистField;
            }
            set {
                if ((this.резПрОпНеЧистField != null)) {
                    if ((резПрОпНеЧистField.Equals(value) != true)) {
                        this.резПрОпНеЧистField = value;
                        this.OnPropertyChanged("РезПрОпНеЧист");
                    }
                }
                else {
                    this.резПрОпНеЧистField = value;
                    this.OnPropertyChanged("РезПрОпНеЧист");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public ОтчПредНТип СовФинРез {
            get {
                if ((this.совФинРезField == null)) {
                    this.совФинРезField = new ОтчПредНТип();
                }
                return this.совФинРезField;
            }
            set {
                if ((this.совФинРезField != null)) {
                    if ((совФинРезField.Equals(value) != true)) {
                        this.совФинРезField = value;
                        this.OnPropertyChanged("СовФинРез");
                    }
                }
                else {
                    this.совФинРезField = value;
                    this.OnPropertyChanged("СовФинРез");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=21)]
        public ФайлДокументПрибУбСправочно Справочно {
            get {
                if ((this.справочноField == null)) {
                    this.справочноField = new ФайлДокументПрибУбСправочно();
                }
                return this.справочноField;
            }
            set {
                if ((this.справочноField != null)) {
                    if ((справочноField.Equals(value) != true)) {
                        this.справочноField = value;
                        this.OnPropertyChanged("Справочно");
                    }
                }
                else {
                    this.справочноField = value;
                    this.OnPropertyChanged("Справочно");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer", Order=22)]
        public string ПроцентРаспознавания {
            get {
                return this.процентРаспознаванияField;
            }
            set {
                if ((this.процентРаспознаванияField != null)) {
                    if ((процентРаспознаванияField.Equals(value) != true)) {
                        this.процентРаспознаванияField = value;
                        this.OnPropertyChanged("ПроцентРаспознавания");
                    }
                }
                else {
                    this.процентРаспознаванияField = value;
                    this.OnPropertyChanged("ПроцентРаспознавания");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрибУбОКУД ОКУД {
            get {
                return this.оКУДField;
            }
            set {
                if ((оКУДField.Equals(value) != true)) {
                    this.оКУДField = value;
                    this.OnPropertyChanged("ОКУД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодКварталТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрибУбОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрибУб));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВыручSpecified {
            get {
                return выручFieldSpecified;
            }
            set {
                выручFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СебестПродSpecified {
            get {
                return себестПродFieldSpecified;
            }
            set {
                себестПродFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВаловаяПрибыльSpecified {
            get {
                return валоваяПрибыльFieldSpecified;
            }
            set {
                валоваяПрибыльFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомРасходSpecified {
            get {
                return комРасходFieldSpecified;
            }
            set {
                комРасходFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УпрРасходSpecified {
            get {
                return упрРасходFieldSpecified;
            }
            set {
                упрРасходFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрибПродSpecified {
            get {
                return прибПродFieldSpecified;
            }
            set {
                прибПродFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДоходОтУчастSpecified {
            get {
                return доходОтУчастFieldSpecified;
            }
            set {
                доходОтУчастFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПроцПолучSpecified {
            get {
                return процПолучFieldSpecified;
            }
            set {
                процПолучFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПроцУплSpecified {
            get {
                return процУплFieldSpecified;
            }
            set {
                процУплFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочДоходSpecified {
            get {
                return прочДоходFieldSpecified;
            }
            set {
                прочДоходFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочРасходSpecified {
            get {
                return прочРасходFieldSpecified;
            }
            set {
                прочРасходFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрибУбДоНалSpecified {
            get {
                return прибУбДоНалFieldSpecified;
            }
            set {
                прибУбДоНалFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТекНалПрибSpecified {
            get {
                return текНалПрибFieldSpecified;
            }
            set {
                текНалПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПостНалОбязSpecified {
            get {
                return постНалОбязFieldSpecified;
            }
            set {
                постНалОбязFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмНалОбязSpecified {
            get {
                return измНалОбязFieldSpecified;
            }
            set {
                измНалОбязFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмНалАктивSpecified {
            get {
                return измНалАктивFieldSpecified;
            }
            set {
                измНалАктивFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочееSpecified {
            get {
                return прочееFieldSpecified;
            }
            set {
                прочееFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЧистПрибУбSpecified {
            get {
                return чистПрибУбFieldSpecified;
            }
            set {
                чистПрибУбFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезПрцВОАНеЧистSpecified {
            get {
                return резПрцВОАНеЧистFieldSpecified;
            }
            set {
                резПрцВОАНеЧистFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезПрОпНеЧистSpecified {
            get {
                return резПрОпНеЧистFieldSpecified;
            }
            set {
                резПрОпНеЧистFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СовФинРезSpecified {
            get {
                return совФинРезFieldSpecified;
            }
            set {
                совФинРезFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СправочноSpecified {
            get {
                return справочноFieldSpecified;
            }
            set {
                справочноFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПроцентРаспознаванияSpecified {
            get {
                return процентРаспознаванияFieldSpecified;
            }
            set {
                процентРаспознаванияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКУДSpecified {
            get {
                return оКУДFieldSpecified;
            }
            set {
                оКУДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрибУб object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрибУб object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрибУб object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрибУб obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрибУб);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрибУб obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрибУб Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрибУб)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрибУб object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрибУб object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрибУб object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрибУб obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрибУб);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрибУб obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрибУб LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрибУбСправочно : System.ComponentModel.INotifyPropertyChanged {
        
        private ОтчПредНТип базПрибылАкцField;
        
        private ОтчПредНТип разводПрибылАкцField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool базПрибылАкцFieldSpecified;
        
        private bool разводПрибылАкцFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОтчПредНТип БазПрибылАкц {
            get {
                if ((this.базПрибылАкцField == null)) {
                    this.базПрибылАкцField = new ОтчПредНТип();
                }
                return this.базПрибылАкцField;
            }
            set {
                if ((this.базПрибылАкцField != null)) {
                    if ((базПрибылАкцField.Equals(value) != true)) {
                        this.базПрибылАкцField = value;
                        this.OnPropertyChanged("БазПрибылАкц");
                    }
                }
                else {
                    this.базПрибылАкцField = value;
                    this.OnPropertyChanged("БазПрибылАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОтчПредНТип РазводПрибылАкц {
            get {
                if ((this.разводПрибылАкцField == null)) {
                    this.разводПрибылАкцField = new ОтчПредНТип();
                }
                return this.разводПрибылАкцField;
            }
            set {
                if ((this.разводПрибылАкцField != null)) {
                    if ((разводПрибылАкцField.Equals(value) != true)) {
                        this.разводПрибылАкцField = value;
                        this.OnPropertyChanged("РазводПрибылАкц");
                    }
                }
                else {
                    this.разводПрибылАкцField = value;
                    this.OnPropertyChanged("РазводПрибылАкц");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрибУбСправочно));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool БазПрибылАкцSpecified {
            get {
                return базПрибылАкцFieldSpecified;
            }
            set {
                базПрибылАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РазводПрибылАкцSpecified {
            get {
                return разводПрибылАкцFieldSpecified;
            }
            set {
                разводПрибылАкцFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрибУбСправочно object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрибУбСправочно object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрибУбСправочно object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрибУбСправочно obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрибУбСправочно);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрибУбСправочно obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрибУбСправочно Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрибУбСправочно)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрибУбСправочно object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрибУбСправочно object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрибУбСправочно object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрибУбСправочно obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрибУбСправочно);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрибУбСправочно obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрибУбСправочно LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрибУбОКУД {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0710002")]
        Item0710002,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрибУбОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("385")]
        Item385,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОтчетИзмКап : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументОтчетИзмКапДвиженКап движенКапField;
        
        private ФайлДокументОтчетИзмКапКоррект корректField;
        
        private ФайлДокументОтчетИзмКапЧистАктив чистАктивField;
        
        private ФайлДокументОтчетИзмКапОКУД оКУДField;
        
        private ПериодГодТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументОтчетИзмКапОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool движенКапFieldSpecified;
        
        private bool корректFieldSpecified;
        
        private bool чистАктивFieldSpecified;
        
        private bool оКУДFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументОтчетИзмКапДвиженКап ДвиженКап {
            get {
                if ((this.движенКапField == null)) {
                    this.движенКапField = new ФайлДокументОтчетИзмКапДвиженКап();
                }
                return this.движенКапField;
            }
            set {
                if ((this.движенКапField != null)) {
                    if ((движенКапField.Equals(value) != true)) {
                        this.движенКапField = value;
                        this.OnPropertyChanged("ДвиженКап");
                    }
                }
                else {
                    this.движенКапField = value;
                    this.OnPropertyChanged("ДвиженКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументОтчетИзмКапКоррект Коррект {
            get {
                if ((this.корректField == null)) {
                    this.корректField = new ФайлДокументОтчетИзмКапКоррект();
                }
                return this.корректField;
            }
            set {
                if ((this.корректField != null)) {
                    if ((корректField.Equals(value) != true)) {
                        this.корректField = value;
                        this.OnPropertyChanged("Коррект");
                    }
                }
                else {
                    this.корректField = value;
                    this.OnPropertyChanged("Коррект");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ФайлДокументОтчетИзмКапЧистАктив ЧистАктив {
            get {
                if ((this.чистАктивField == null)) {
                    this.чистАктивField = new ФайлДокументОтчетИзмКапЧистАктив();
                }
                return this.чистАктивField;
            }
            set {
                if ((this.чистАктивField != null)) {
                    if ((чистАктивField.Equals(value) != true)) {
                        this.чистАктивField = value;
                        this.OnPropertyChanged("ЧистАктив");
                    }
                }
                else {
                    this.чистАктивField = value;
                    this.OnPropertyChanged("ЧистАктив");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументОтчетИзмКапОКУД ОКУД {
            get {
                return this.оКУДField;
            }
            set {
                if ((оКУДField.Equals(value) != true)) {
                    this.оКУДField = value;
                    this.OnPropertyChanged("ОКУД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодГодТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументОтчетИзмКапОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОтчетИзмКап));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДвиженКапSpecified {
            get {
                return движенКапFieldSpecified;
            }
            set {
                движенКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КорректSpecified {
            get {
                return корректFieldSpecified;
            }
            set {
                корректFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЧистАктивSpecified {
            get {
                return чистАктивFieldSpecified;
            }
            set {
                чистАктивFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКУДSpecified {
            get {
                return оКУДFieldSpecified;
            }
            set {
                оКУДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОтчетИзмКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОтчетИзмКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОтчетИзмКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОтчетИзмКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОтчетИзмКап);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОтчетИзмКап obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОтчетИзмКап Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОтчетИзмКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОтчетИзмКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОтчетИзмКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОтчетИзмКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОтчетИзмКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОтчетИзмКап);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОтчетИзмКап obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОтчетИзмКап LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОтчетИзмКапДвиженКап : System.ComponentModel.INotifyPropertyChanged {
        
        private ДвижКапПГод кап31ДекПредField;
        
        private ДвижКапГодТип предГодField;
        
        private ДвижКапГодТип отчетГодField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кап31ДекПредFieldSpecified;
        
        private bool предГодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ДвижКапПГод Кап31ДекПред {
            get {
                if ((this.кап31ДекПредField == null)) {
                    this.кап31ДекПредField = new ДвижКапПГод();
                }
                return this.кап31ДекПредField;
            }
            set {
                if ((this.кап31ДекПредField != null)) {
                    if ((кап31ДекПредField.Equals(value) != true)) {
                        this.кап31ДекПредField = value;
                        this.OnPropertyChanged("Кап31ДекПред");
                    }
                }
                else {
                    this.кап31ДекПредField = value;
                    this.OnPropertyChanged("Кап31ДекПред");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ДвижКапГодТип ПредГод {
            get {
                if ((this.предГодField == null)) {
                    this.предГодField = new ДвижКапГодТип();
                }
                return this.предГодField;
            }
            set {
                if ((this.предГодField != null)) {
                    if ((предГодField.Equals(value) != true)) {
                        this.предГодField = value;
                        this.OnPropertyChanged("ПредГод");
                    }
                }
                else {
                    this.предГодField = value;
                    this.OnPropertyChanged("ПредГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ДвижКапГодТип ОтчетГод {
            get {
                if ((this.отчетГодField == null)) {
                    this.отчетГодField = new ДвижКапГодТип();
                }
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОтчетИзмКапДвиженКап));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool Кап31ДекПредSpecified {
            get {
                return кап31ДекПредFieldSpecified;
            }
            set {
                кап31ДекПредFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПредГодSpecified {
            get {
                return предГодFieldSpecified;
            }
            set {
                предГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОтчетИзмКапДвиженКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОтчетИзмКапДвиженКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОтчетИзмКапДвиженКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОтчетИзмКапДвиженКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОтчетИзмКапДвиженКап);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОтчетИзмКапДвиженКап obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОтчетИзмКапДвиженКап Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОтчетИзмКапДвиженКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОтчетИзмКапДвиженКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОтчетИзмКапДвиженКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОтчетИзмКапДвиженКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОтчетИзмКапДвиженКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОтчетИзмКапДвиженКап);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОтчетИзмКапДвиженКап obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОтчетИзмКапДвиженКап LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОтчетИзмКапКоррект : System.ComponentModel.INotifyPropertyChanged {
        
        private КорКапТип капитВсField;
        
        private КорКапТип нераспПрибField;
        
        private КорКапТип дрСтатКапField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool капитВсFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool дрСтатКапFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public КорКапТип КапитВс {
            get {
                if ((this.капитВсField == null)) {
                    this.капитВсField = new КорКапТип();
                }
                return this.капитВсField;
            }
            set {
                if ((this.капитВсField != null)) {
                    if ((капитВсField.Equals(value) != true)) {
                        this.капитВсField = value;
                        this.OnPropertyChanged("КапитВс");
                    }
                }
                else {
                    this.капитВсField = value;
                    this.OnPropertyChanged("КапитВс");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public КорКапТип НераспПриб {
            get {
                if ((this.нераспПрибField == null)) {
                    this.нераспПрибField = new КорКапТип();
                }
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public КорКапТип ДрСтатКап {
            get {
                if ((this.дрСтатКапField == null)) {
                    this.дрСтатКапField = new КорКапТип();
                }
                return this.дрСтатКапField;
            }
            set {
                if ((this.дрСтатКапField != null)) {
                    if ((дрСтатКапField.Equals(value) != true)) {
                        this.дрСтатКапField = value;
                        this.OnPropertyChanged("ДрСтатКап");
                    }
                }
                else {
                    this.дрСтатКапField = value;
                    this.OnPropertyChanged("ДрСтатКап");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОтчетИзмКапКоррект));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КапитВсSpecified {
            get {
                return капитВсFieldSpecified;
            }
            set {
                капитВсFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДрСтатКапSpecified {
            get {
                return дрСтатКапFieldSpecified;
            }
            set {
                дрСтатКапFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОтчетИзмКапКоррект object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОтчетИзмКапКоррект object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОтчетИзмКапКоррект object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОтчетИзмКапКоррект obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОтчетИзмКапКоррект);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОтчетИзмКапКоррект obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОтчетИзмКапКоррект Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОтчетИзмКапКоррект)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОтчетИзмКапКоррект object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОтчетИзмКапКоррект object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОтчетИзмКапКоррект object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОтчетИзмКапКоррект obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОтчетИзмКапКоррект);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОтчетИзмКапКоррект obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОтчетИзмКапКоррект LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОтчетИзмКапЧистАктив : System.ComponentModel.INotifyPropertyChanged {
        
        private string на31ДекОтчField;
        
        private string на31ДекПредField;
        
        private string на31ДекПрПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool на31ДекОтчFieldSpecified;
        
        private bool на31ДекПредFieldSpecified;
        
        private bool на31ДекПрПредFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string На31ДекОтч {
            get {
                return this.на31ДекОтчField;
            }
            set {
                if ((this.на31ДекОтчField != null)) {
                    if ((на31ДекОтчField.Equals(value) != true)) {
                        this.на31ДекОтчField = value;
                        this.OnPropertyChanged("На31ДекОтч");
                    }
                }
                else {
                    this.на31ДекОтчField = value;
                    this.OnPropertyChanged("На31ДекОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string На31ДекПред {
            get {
                return this.на31ДекПредField;
            }
            set {
                if ((this.на31ДекПредField != null)) {
                    if ((на31ДекПредField.Equals(value) != true)) {
                        this.на31ДекПредField = value;
                        this.OnPropertyChanged("На31ДекПред");
                    }
                }
                else {
                    this.на31ДекПредField = value;
                    this.OnPropertyChanged("На31ДекПред");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string На31ДекПрПред {
            get {
                return this.на31ДекПрПредField;
            }
            set {
                if ((this.на31ДекПрПредField != null)) {
                    if ((на31ДекПрПредField.Equals(value) != true)) {
                        this.на31ДекПрПредField = value;
                        this.OnPropertyChanged("На31ДекПрПред");
                    }
                }
                else {
                    this.на31ДекПрПредField = value;
                    this.OnPropertyChanged("На31ДекПрПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОтчетИзмКапЧистАктив));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool На31ДекОтчSpecified {
            get {
                return на31ДекОтчFieldSpecified;
            }
            set {
                на31ДекОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool На31ДекПредSpecified {
            get {
                return на31ДекПредFieldSpecified;
            }
            set {
                на31ДекПредFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool На31ДекПрПредSpecified {
            get {
                return на31ДекПрПредFieldSpecified;
            }
            set {
                на31ДекПрПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОтчетИзмКапЧистАктив object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОтчетИзмКапЧистАктив object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОтчетИзмКапЧистАктив object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОтчетИзмКапЧистАктив obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОтчетИзмКапЧистАктив);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОтчетИзмКапЧистАктив obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОтчетИзмКапЧистАктив Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОтчетИзмКапЧистАктив)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОтчетИзмКапЧистАктив object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОтчетИзмКапЧистАктив object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОтчетИзмКапЧистАктив object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОтчетИзмКапЧистАктив obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОтчетИзмКапЧистАктив);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОтчетИзмКапЧистАктив obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОтчетИзмКапЧистАктив LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументОтчетИзмКапОКУД {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0710003")]
        Item0710003,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum ПериодГодТип {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("34")]
        Item34,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументОтчетИзмКапОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("385")]
        Item385,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДвижениеДен : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументДвижениеДенТекОпер текОперField;
        
        private ФайлДокументДвижениеДенИнвОпер инвОперField;
        
        private ФайлДокументДвижениеДенФинОпер финОперField;
        
        private ОПТип сальдоОтчField;
        
        private ОПТип остНачОтчField;
        
        private ОПТип остКонОтчField;
        
        private ОПТип влИзмКурсField;
        
        private ФайлДокументДвижениеДенОКУД оКУДField;
        
        private ПериодГодТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументДвижениеДенОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool текОперFieldSpecified;
        
        private bool инвОперFieldSpecified;
        
        private bool финОперFieldSpecified;
        
        private bool сальдоОтчFieldSpecified;
        
        private bool остНачОтчFieldSpecified;
        
        private bool остКонОтчFieldSpecified;
        
        private bool влИзмКурсFieldSpecified;
        
        private bool оКУДFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументДвижениеДенТекОпер ТекОпер {
            get {
                if ((this.текОперField == null)) {
                    this.текОперField = new ФайлДокументДвижениеДенТекОпер();
                }
                return this.текОперField;
            }
            set {
                if ((this.текОперField != null)) {
                    if ((текОперField.Equals(value) != true)) {
                        this.текОперField = value;
                        this.OnPropertyChanged("ТекОпер");
                    }
                }
                else {
                    this.текОперField = value;
                    this.OnPropertyChanged("ТекОпер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументДвижениеДенИнвОпер ИнвОпер {
            get {
                if ((this.инвОперField == null)) {
                    this.инвОперField = new ФайлДокументДвижениеДенИнвОпер();
                }
                return this.инвОперField;
            }
            set {
                if ((this.инвОперField != null)) {
                    if ((инвОперField.Equals(value) != true)) {
                        this.инвОперField = value;
                        this.OnPropertyChanged("ИнвОпер");
                    }
                }
                else {
                    this.инвОперField = value;
                    this.OnPropertyChanged("ИнвОпер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ФайлДокументДвижениеДенФинОпер ФинОпер {
            get {
                if ((this.финОперField == null)) {
                    this.финОперField = new ФайлДокументДвижениеДенФинОпер();
                }
                return this.финОперField;
            }
            set {
                if ((this.финОперField != null)) {
                    if ((финОперField.Equals(value) != true)) {
                        this.финОперField = value;
                        this.OnPropertyChanged("ФинОпер");
                    }
                }
                else {
                    this.финОперField = value;
                    this.OnPropertyChanged("ФинОпер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПТип СальдоОтч {
            get {
                if ((this.сальдоОтчField == null)) {
                    this.сальдоОтчField = new ОПТип();
                }
                return this.сальдоОтчField;
            }
            set {
                if ((this.сальдоОтчField != null)) {
                    if ((сальдоОтчField.Equals(value) != true)) {
                        this.сальдоОтчField = value;
                        this.OnPropertyChanged("СальдоОтч");
                    }
                }
                else {
                    this.сальдоОтчField = value;
                    this.OnPropertyChanged("СальдоОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОПТип ОстНачОтч {
            get {
                if ((this.остНачОтчField == null)) {
                    this.остНачОтчField = new ОПТип();
                }
                return this.остНачОтчField;
            }
            set {
                if ((this.остНачОтчField != null)) {
                    if ((остНачОтчField.Equals(value) != true)) {
                        this.остНачОтчField = value;
                        this.OnPropertyChanged("ОстНачОтч");
                    }
                }
                else {
                    this.остНачОтчField = value;
                    this.OnPropertyChanged("ОстНачОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ОПТип ОстКонОтч {
            get {
                if ((this.остКонОтчField == null)) {
                    this.остКонОтчField = new ОПТип();
                }
                return this.остКонОтчField;
            }
            set {
                if ((this.остКонОтчField != null)) {
                    if ((остКонОтчField.Equals(value) != true)) {
                        this.остКонОтчField = value;
                        this.OnPropertyChanged("ОстКонОтч");
                    }
                }
                else {
                    this.остКонОтчField = value;
                    this.OnPropertyChanged("ОстКонОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ОПТип ВлИзмКурс {
            get {
                if ((this.влИзмКурсField == null)) {
                    this.влИзмКурсField = new ОПТип();
                }
                return this.влИзмКурсField;
            }
            set {
                if ((this.влИзмКурсField != null)) {
                    if ((влИзмКурсField.Equals(value) != true)) {
                        this.влИзмКурсField = value;
                        this.OnPropertyChanged("ВлИзмКурс");
                    }
                }
                else {
                    this.влИзмКурсField = value;
                    this.OnPropertyChanged("ВлИзмКурс");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументДвижениеДенОКУД ОКУД {
            get {
                return this.оКУДField;
            }
            set {
                if ((оКУДField.Equals(value) != true)) {
                    this.оКУДField = value;
                    this.OnPropertyChanged("ОКУД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодГодТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументДвижениеДенОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДвижениеДен));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ТекОперSpecified {
            get {
                return текОперFieldSpecified;
            }
            set {
                текОперFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИнвОперSpecified {
            get {
                return инвОперFieldSpecified;
            }
            set {
                инвОперFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ФинОперSpecified {
            get {
                return финОперFieldSpecified;
            }
            set {
                финОперFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СальдоОтчSpecified {
            get {
                return сальдоОтчFieldSpecified;
            }
            set {
                сальдоОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОстНачОтчSpecified {
            get {
                return остНачОтчFieldSpecified;
            }
            set {
                остНачОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОстКонОтчSpecified {
            get {
                return остКонОтчFieldSpecified;
            }
            set {
                остКонОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВлИзмКурсSpecified {
            get {
                return влИзмКурсFieldSpecified;
            }
            set {
                влИзмКурсFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКУДSpecified {
            get {
                return оКУДFieldSpecified;
            }
            set {
                оКУДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДен object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДвижениеДен object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДен object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДен obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДен);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДен obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДен Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДвижениеДен)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДен object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДвижениеДен object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДен object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДен obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДен);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДен obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДен LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДвижениеДенТекОпер : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип сальдоТекField;
        
        private ФайлДокументДвижениеДенТекОперПоступ поступField;
        
        private ФайлДокументДвижениеДенТекОперПлатеж платежField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool сальдоТекFieldSpecified;
        
        private bool поступFieldSpecified;
        
        private bool платежFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип СальдоТек {
            get {
                if ((this.сальдоТекField == null)) {
                    this.сальдоТекField = new ОПТип();
                }
                return this.сальдоТекField;
            }
            set {
                if ((this.сальдоТекField != null)) {
                    if ((сальдоТекField.Equals(value) != true)) {
                        this.сальдоТекField = value;
                        this.OnPropertyChanged("СальдоТек");
                    }
                }
                else {
                    this.сальдоТекField = value;
                    this.OnPropertyChanged("СальдоТек");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументДвижениеДенТекОперПоступ Поступ {
            get {
                if ((this.поступField == null)) {
                    this.поступField = new ФайлДокументДвижениеДенТекОперПоступ();
                }
                return this.поступField;
            }
            set {
                if ((this.поступField != null)) {
                    if ((поступField.Equals(value) != true)) {
                        this.поступField = value;
                        this.OnPropertyChanged("Поступ");
                    }
                }
                else {
                    this.поступField = value;
                    this.OnPropertyChanged("Поступ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ФайлДокументДвижениеДенТекОперПлатеж Платеж {
            get {
                if ((this.платежField == null)) {
                    this.платежField = new ФайлДокументДвижениеДенТекОперПлатеж();
                }
                return this.платежField;
            }
            set {
                if ((this.платежField != null)) {
                    if ((платежField.Equals(value) != true)) {
                        this.платежField = value;
                        this.OnPropertyChanged("Платеж");
                    }
                }
                else {
                    this.платежField = value;
                    this.OnPropertyChanged("Платеж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДвижениеДенТекОпер));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СальдоТекSpecified {
            get {
                return сальдоТекFieldSpecified;
            }
            set {
                сальдоТекFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоступSpecified {
            get {
                return поступFieldSpecified;
            }
            set {
                поступFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПлатежSpecified {
            get {
                return платежFieldSpecified;
            }
            set {
                платежFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенТекОпер object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДвижениеДенТекОпер object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенТекОпер object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенТекОпер obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенТекОпер);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенТекОпер obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенТекОпер Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДвижениеДенТекОпер)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенТекОпер object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДвижениеДенТекОпер object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенТекОпер object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенТекОпер obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенТекОпер);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенТекОпер obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенТекОпер LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДвижениеДенТекОперПоступ : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип продПТРУField;
        
        private ОПТип арЛицИнПлатField;
        
        private ОПТип продФинВложField;
        
        private List<ВПокОПТип> вПокТекПостField;
        
        private ОП_ДТип прочПоступField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool продПТРУFieldSpecified;
        
        private bool арЛицИнПлатFieldSpecified;
        
        private bool продФинВложFieldSpecified;
        
        private bool вПокТекПостFieldSpecified;
        
        private bool прочПоступFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип ПродПТРУ {
            get {
                if ((this.продПТРУField == null)) {
                    this.продПТРУField = new ОПТип();
                }
                return this.продПТРУField;
            }
            set {
                if ((this.продПТРУField != null)) {
                    if ((продПТРУField.Equals(value) != true)) {
                        this.продПТРУField = value;
                        this.OnPropertyChanged("ПродПТРУ");
                    }
                }
                else {
                    this.продПТРУField = value;
                    this.OnPropertyChanged("ПродПТРУ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПТип АрЛицИнПлат {
            get {
                if ((this.арЛицИнПлатField == null)) {
                    this.арЛицИнПлатField = new ОПТип();
                }
                return this.арЛицИнПлатField;
            }
            set {
                if ((this.арЛицИнПлатField != null)) {
                    if ((арЛицИнПлатField.Equals(value) != true)) {
                        this.арЛицИнПлатField = value;
                        this.OnPropertyChanged("АрЛицИнПлат");
                    }
                }
                else {
                    this.арЛицИнПлатField = value;
                    this.OnPropertyChanged("АрЛицИнПлат");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПТип ПродФинВлож {
            get {
                if ((this.продФинВложField == null)) {
                    this.продФинВложField = new ОПТип();
                }
                return this.продФинВложField;
            }
            set {
                if ((this.продФинВложField != null)) {
                    if ((продФинВложField.Equals(value) != true)) {
                        this.продФинВложField = value;
                        this.OnPropertyChanged("ПродФинВлож");
                    }
                }
                else {
                    this.продФинВложField = value;
                    this.OnPropertyChanged("ПродФинВлож");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокТекПост", Order=3)]
        public List<ВПокОПТип> ВПокТекПост {
            get {
                if ((this.вПокТекПостField == null)) {
                    this.вПокТекПостField = new List<ВПокОПТип>();
                }
                return this.вПокТекПостField;
            }
            set {
                if ((this.вПокТекПостField != null)) {
                    if ((вПокТекПостField.Equals(value) != true)) {
                        this.вПокТекПостField = value;
                        this.OnPropertyChanged("ВПокТекПост");
                    }
                }
                else {
                    this.вПокТекПостField = value;
                    this.OnPropertyChanged("ВПокТекПост");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОП_ДТип ПрочПоступ {
            get {
                if ((this.прочПоступField == null)) {
                    this.прочПоступField = new ОП_ДТип();
                }
                return this.прочПоступField;
            }
            set {
                if ((this.прочПоступField != null)) {
                    if ((прочПоступField.Equals(value) != true)) {
                        this.прочПоступField = value;
                        this.OnPropertyChanged("ПрочПоступ");
                    }
                }
                else {
                    this.прочПоступField = value;
                    this.OnPropertyChanged("ПрочПоступ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДвижениеДенТекОперПоступ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПродПТРУSpecified {
            get {
                return продПТРУFieldSpecified;
            }
            set {
                продПТРУFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool АрЛицИнПлатSpecified {
            get {
                return арЛицИнПлатFieldSpecified;
            }
            set {
                арЛицИнПлатFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПродФинВложSpecified {
            get {
                return продФинВложFieldSpecified;
            }
            set {
                продФинВложFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокТекПостSpecified {
            get {
                return вПокТекПостFieldSpecified;
            }
            set {
                вПокТекПостFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочПоступSpecified {
            get {
                return прочПоступFieldSpecified;
            }
            set {
                прочПоступFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенТекОперПоступ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДвижениеДенТекОперПоступ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенТекОперПоступ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенТекОперПоступ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенТекОперПоступ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенТекОперПоступ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенТекОперПоступ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДвижениеДенТекОперПоступ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенТекОперПоступ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДвижениеДенТекОперПоступ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенТекОперПоступ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенТекОперПоступ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенТекОперПоступ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенТекОперПоступ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенТекОперПоступ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДвижениеДенТекОперПлатеж : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип поставСМРУField;
        
        private ОПТип оплатТрудРабField;
        
        private ОПТип процДолгОбязField;
        
        private ОПТип налогПрибField;
        
        private List<ВПокОПТип> вПокТекПлатField;
        
        private ОП_ДТип прочПлатежField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поставСМРУFieldSpecified;
        
        private bool оплатТрудРабFieldSpecified;
        
        private bool процДолгОбязFieldSpecified;
        
        private bool налогПрибFieldSpecified;
        
        private bool вПокТекПлатFieldSpecified;
        
        private bool прочПлатежFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип ПоставСМРУ {
            get {
                if ((this.поставСМРУField == null)) {
                    this.поставСМРУField = new ОПТип();
                }
                return this.поставСМРУField;
            }
            set {
                if ((this.поставСМРУField != null)) {
                    if ((поставСМРУField.Equals(value) != true)) {
                        this.поставСМРУField = value;
                        this.OnPropertyChanged("ПоставСМРУ");
                    }
                }
                else {
                    this.поставСМРУField = value;
                    this.OnPropertyChanged("ПоставСМРУ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПТип ОплатТрудРаб {
            get {
                if ((this.оплатТрудРабField == null)) {
                    this.оплатТрудРабField = new ОПТип();
                }
                return this.оплатТрудРабField;
            }
            set {
                if ((this.оплатТрудРабField != null)) {
                    if ((оплатТрудРабField.Equals(value) != true)) {
                        this.оплатТрудРабField = value;
                        this.OnPropertyChanged("ОплатТрудРаб");
                    }
                }
                else {
                    this.оплатТрудРабField = value;
                    this.OnPropertyChanged("ОплатТрудРаб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПТип ПроцДолгОбяз {
            get {
                if ((this.процДолгОбязField == null)) {
                    this.процДолгОбязField = new ОПТип();
                }
                return this.процДолгОбязField;
            }
            set {
                if ((this.процДолгОбязField != null)) {
                    if ((процДолгОбязField.Equals(value) != true)) {
                        this.процДолгОбязField = value;
                        this.OnPropertyChanged("ПроцДолгОбяз");
                    }
                }
                else {
                    this.процДолгОбязField = value;
                    this.OnPropertyChanged("ПроцДолгОбяз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПТип НалогПриб {
            get {
                if ((this.налогПрибField == null)) {
                    this.налогПрибField = new ОПТип();
                }
                return this.налогПрибField;
            }
            set {
                if ((this.налогПрибField != null)) {
                    if ((налогПрибField.Equals(value) != true)) {
                        this.налогПрибField = value;
                        this.OnPropertyChanged("НалогПриб");
                    }
                }
                else {
                    this.налогПрибField = value;
                    this.OnPropertyChanged("НалогПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокТекПлат", Order=4)]
        public List<ВПокОПТип> ВПокТекПлат {
            get {
                if ((this.вПокТекПлатField == null)) {
                    this.вПокТекПлатField = new List<ВПокОПТип>();
                }
                return this.вПокТекПлатField;
            }
            set {
                if ((this.вПокТекПлатField != null)) {
                    if ((вПокТекПлатField.Equals(value) != true)) {
                        this.вПокТекПлатField = value;
                        this.OnPropertyChanged("ВПокТекПлат");
                    }
                }
                else {
                    this.вПокТекПлатField = value;
                    this.OnPropertyChanged("ВПокТекПлат");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ОП_ДТип ПрочПлатеж {
            get {
                if ((this.прочПлатежField == null)) {
                    this.прочПлатежField = new ОП_ДТип();
                }
                return this.прочПлатежField;
            }
            set {
                if ((this.прочПлатежField != null)) {
                    if ((прочПлатежField.Equals(value) != true)) {
                        this.прочПлатежField = value;
                        this.OnPropertyChanged("ПрочПлатеж");
                    }
                }
                else {
                    this.прочПлатежField = value;
                    this.OnPropertyChanged("ПрочПлатеж");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДвижениеДенТекОперПлатеж));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоставСМРУSpecified {
            get {
                return поставСМРУFieldSpecified;
            }
            set {
                поставСМРУFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОплатТрудРабSpecified {
            get {
                return оплатТрудРабFieldSpecified;
            }
            set {
                оплатТрудРабFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПроцДолгОбязSpecified {
            get {
                return процДолгОбязFieldSpecified;
            }
            set {
                процДолгОбязFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалогПрибSpecified {
            get {
                return налогПрибFieldSpecified;
            }
            set {
                налогПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокТекПлатSpecified {
            get {
                return вПокТекПлатFieldSpecified;
            }
            set {
                вПокТекПлатFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочПлатежSpecified {
            get {
                return прочПлатежFieldSpecified;
            }
            set {
                прочПлатежFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенТекОперПлатеж object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДвижениеДенТекОперПлатеж object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенТекОперПлатеж object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенТекОперПлатеж obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенТекОперПлатеж);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенТекОперПлатеж obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенТекОперПлатеж Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДвижениеДенТекОперПлатеж)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенТекОперПлатеж object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДвижениеДенТекОперПлатеж object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенТекОперПлатеж object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенТекОперПлатеж obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенТекОперПлатеж);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенТекОперПлатеж obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенТекОперПлатеж LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДвижениеДенИнвОпер : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип сальдоИнвField;
        
        private ФайлДокументДвижениеДенИнвОперПоступ поступField;
        
        private ФайлДокументДвижениеДенИнвОперПлатеж платежField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool сальдоИнвFieldSpecified;
        
        private bool поступFieldSpecified;
        
        private bool платежFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип СальдоИнв {
            get {
                if ((this.сальдоИнвField == null)) {
                    this.сальдоИнвField = new ОПТип();
                }
                return this.сальдоИнвField;
            }
            set {
                if ((this.сальдоИнвField != null)) {
                    if ((сальдоИнвField.Equals(value) != true)) {
                        this.сальдоИнвField = value;
                        this.OnPropertyChanged("СальдоИнв");
                    }
                }
                else {
                    this.сальдоИнвField = value;
                    this.OnPropertyChanged("СальдоИнв");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументДвижениеДенИнвОперПоступ Поступ {
            get {
                if ((this.поступField == null)) {
                    this.поступField = new ФайлДокументДвижениеДенИнвОперПоступ();
                }
                return this.поступField;
            }
            set {
                if ((this.поступField != null)) {
                    if ((поступField.Equals(value) != true)) {
                        this.поступField = value;
                        this.OnPropertyChanged("Поступ");
                    }
                }
                else {
                    this.поступField = value;
                    this.OnPropertyChanged("Поступ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ФайлДокументДвижениеДенИнвОперПлатеж Платеж {
            get {
                if ((this.платежField == null)) {
                    this.платежField = new ФайлДокументДвижениеДенИнвОперПлатеж();
                }
                return this.платежField;
            }
            set {
                if ((this.платежField != null)) {
                    if ((платежField.Equals(value) != true)) {
                        this.платежField = value;
                        this.OnPropertyChanged("Платеж");
                    }
                }
                else {
                    this.платежField = value;
                    this.OnPropertyChanged("Платеж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДвижениеДенИнвОпер));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СальдоИнвSpecified {
            get {
                return сальдоИнвFieldSpecified;
            }
            set {
                сальдоИнвFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоступSpecified {
            get {
                return поступFieldSpecified;
            }
            set {
                поступFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПлатежSpecified {
            get {
                return платежFieldSpecified;
            }
            set {
                платежFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенИнвОпер object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДвижениеДенИнвОпер object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенИнвОпер object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенИнвОпер obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенИнвОпер);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенИнвОпер obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенИнвОпер Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДвижениеДенИнвОпер)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенИнвОпер object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДвижениеДенИнвОпер object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенИнвОпер object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенИнвОпер obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенИнвОпер);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенИнвОпер obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенИнвОпер LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДвижениеДенИнвОперПоступ : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип продВнАктивField;
        
        private ОПТип продАкцДрField;
        
        private ОПТип возврЗаймЦБField;
        
        private ОПТип дивПроцField;
        
        private List<ВПокОПТип> вПокИнвПостField;
        
        private ОП_ДТип прочПоступField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool продВнАктивFieldSpecified;
        
        private bool продАкцДрFieldSpecified;
        
        private bool возврЗаймЦБFieldSpecified;
        
        private bool дивПроцFieldSpecified;
        
        private bool вПокИнвПостFieldSpecified;
        
        private bool прочПоступFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип ПродВнАктив {
            get {
                if ((this.продВнАктивField == null)) {
                    this.продВнАктивField = new ОПТип();
                }
                return this.продВнАктивField;
            }
            set {
                if ((this.продВнАктивField != null)) {
                    if ((продВнАктивField.Equals(value) != true)) {
                        this.продВнАктивField = value;
                        this.OnPropertyChanged("ПродВнАктив");
                    }
                }
                else {
                    this.продВнАктивField = value;
                    this.OnPropertyChanged("ПродВнАктив");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПТип ПродАкцДр {
            get {
                if ((this.продАкцДрField == null)) {
                    this.продАкцДрField = new ОПТип();
                }
                return this.продАкцДрField;
            }
            set {
                if ((this.продАкцДрField != null)) {
                    if ((продАкцДрField.Equals(value) != true)) {
                        this.продАкцДрField = value;
                        this.OnPropertyChanged("ПродАкцДр");
                    }
                }
                else {
                    this.продАкцДрField = value;
                    this.OnPropertyChanged("ПродАкцДр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПТип ВозврЗаймЦБ {
            get {
                if ((this.возврЗаймЦБField == null)) {
                    this.возврЗаймЦБField = new ОПТип();
                }
                return this.возврЗаймЦБField;
            }
            set {
                if ((this.возврЗаймЦБField != null)) {
                    if ((возврЗаймЦБField.Equals(value) != true)) {
                        this.возврЗаймЦБField = value;
                        this.OnPropertyChanged("ВозврЗаймЦБ");
                    }
                }
                else {
                    this.возврЗаймЦБField = value;
                    this.OnPropertyChanged("ВозврЗаймЦБ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПТип ДивПроц {
            get {
                if ((this.дивПроцField == null)) {
                    this.дивПроцField = new ОПТип();
                }
                return this.дивПроцField;
            }
            set {
                if ((this.дивПроцField != null)) {
                    if ((дивПроцField.Equals(value) != true)) {
                        this.дивПроцField = value;
                        this.OnPropertyChanged("ДивПроц");
                    }
                }
                else {
                    this.дивПроцField = value;
                    this.OnPropertyChanged("ДивПроц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокИнвПост", Order=4)]
        public List<ВПокОПТип> ВПокИнвПост {
            get {
                if ((this.вПокИнвПостField == null)) {
                    this.вПокИнвПостField = new List<ВПокОПТип>();
                }
                return this.вПокИнвПостField;
            }
            set {
                if ((this.вПокИнвПостField != null)) {
                    if ((вПокИнвПостField.Equals(value) != true)) {
                        this.вПокИнвПостField = value;
                        this.OnPropertyChanged("ВПокИнвПост");
                    }
                }
                else {
                    this.вПокИнвПостField = value;
                    this.OnPropertyChanged("ВПокИнвПост");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ОП_ДТип ПрочПоступ {
            get {
                if ((this.прочПоступField == null)) {
                    this.прочПоступField = new ОП_ДТип();
                }
                return this.прочПоступField;
            }
            set {
                if ((this.прочПоступField != null)) {
                    if ((прочПоступField.Equals(value) != true)) {
                        this.прочПоступField = value;
                        this.OnPropertyChanged("ПрочПоступ");
                    }
                }
                else {
                    this.прочПоступField = value;
                    this.OnPropertyChanged("ПрочПоступ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДвижениеДенИнвОперПоступ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПродВнАктивSpecified {
            get {
                return продВнАктивFieldSpecified;
            }
            set {
                продВнАктивFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПродАкцДрSpecified {
            get {
                return продАкцДрFieldSpecified;
            }
            set {
                продАкцДрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВозврЗаймЦБSpecified {
            get {
                return возврЗаймЦБFieldSpecified;
            }
            set {
                возврЗаймЦБFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДивПроцSpecified {
            get {
                return дивПроцFieldSpecified;
            }
            set {
                дивПроцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокИнвПостSpecified {
            get {
                return вПокИнвПостFieldSpecified;
            }
            set {
                вПокИнвПостFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочПоступSpecified {
            get {
                return прочПоступFieldSpecified;
            }
            set {
                прочПоступFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенИнвОперПоступ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДвижениеДенИнвОперПоступ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенИнвОперПоступ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенИнвОперПоступ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенИнвОперПоступ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенИнвОперПоступ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенИнвОперПоступ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДвижениеДенИнвОперПоступ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенИнвОперПоступ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДвижениеДенИнвОперПоступ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенИнвОперПоступ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенИнвОперПоступ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенИнвОперПоступ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенИнвОперПоступ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенИнвОперПоступ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДвижениеДенИнвОперПлатеж : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип приобрВнАктивField;
        
        private ОПТип приобрАкцДрField;
        
        private ОПТип приобрДолгЦБField;
        
        private ОПТип процДолгОбField;
        
        private List<ВПокОПТип> вПокИнвПлатField;
        
        private ОП_ДТип прочПлатежField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool приобрВнАктивFieldSpecified;
        
        private bool приобрАкцДрFieldSpecified;
        
        private bool приобрДолгЦБFieldSpecified;
        
        private bool процДолгОбFieldSpecified;
        
        private bool вПокИнвПлатFieldSpecified;
        
        private bool прочПлатежFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип ПриобрВнАктив {
            get {
                if ((this.приобрВнАктивField == null)) {
                    this.приобрВнАктивField = new ОПТип();
                }
                return this.приобрВнАктивField;
            }
            set {
                if ((this.приобрВнАктивField != null)) {
                    if ((приобрВнАктивField.Equals(value) != true)) {
                        this.приобрВнАктивField = value;
                        this.OnPropertyChanged("ПриобрВнАктив");
                    }
                }
                else {
                    this.приобрВнАктивField = value;
                    this.OnPropertyChanged("ПриобрВнАктив");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПТип ПриобрАкцДр {
            get {
                if ((this.приобрАкцДрField == null)) {
                    this.приобрАкцДрField = new ОПТип();
                }
                return this.приобрАкцДрField;
            }
            set {
                if ((this.приобрАкцДрField != null)) {
                    if ((приобрАкцДрField.Equals(value) != true)) {
                        this.приобрАкцДрField = value;
                        this.OnPropertyChanged("ПриобрАкцДр");
                    }
                }
                else {
                    this.приобрАкцДрField = value;
                    this.OnPropertyChanged("ПриобрАкцДр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПТип ПриобрДолгЦБ {
            get {
                if ((this.приобрДолгЦБField == null)) {
                    this.приобрДолгЦБField = new ОПТип();
                }
                return this.приобрДолгЦБField;
            }
            set {
                if ((this.приобрДолгЦБField != null)) {
                    if ((приобрДолгЦБField.Equals(value) != true)) {
                        this.приобрДолгЦБField = value;
                        this.OnPropertyChanged("ПриобрДолгЦБ");
                    }
                }
                else {
                    this.приобрДолгЦБField = value;
                    this.OnPropertyChanged("ПриобрДолгЦБ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПТип ПроцДолгОб {
            get {
                if ((this.процДолгОбField == null)) {
                    this.процДолгОбField = new ОПТип();
                }
                return this.процДолгОбField;
            }
            set {
                if ((this.процДолгОбField != null)) {
                    if ((процДолгОбField.Equals(value) != true)) {
                        this.процДолгОбField = value;
                        this.OnPropertyChanged("ПроцДолгОб");
                    }
                }
                else {
                    this.процДолгОбField = value;
                    this.OnPropertyChanged("ПроцДолгОб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокИнвПлат", Order=4)]
        public List<ВПокОПТип> ВПокИнвПлат {
            get {
                if ((this.вПокИнвПлатField == null)) {
                    this.вПокИнвПлатField = new List<ВПокОПТип>();
                }
                return this.вПокИнвПлатField;
            }
            set {
                if ((this.вПокИнвПлатField != null)) {
                    if ((вПокИнвПлатField.Equals(value) != true)) {
                        this.вПокИнвПлатField = value;
                        this.OnPropertyChanged("ВПокИнвПлат");
                    }
                }
                else {
                    this.вПокИнвПлатField = value;
                    this.OnPropertyChanged("ВПокИнвПлат");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ОП_ДТип ПрочПлатеж {
            get {
                if ((this.прочПлатежField == null)) {
                    this.прочПлатежField = new ОП_ДТип();
                }
                return this.прочПлатежField;
            }
            set {
                if ((this.прочПлатежField != null)) {
                    if ((прочПлатежField.Equals(value) != true)) {
                        this.прочПлатежField = value;
                        this.OnPropertyChanged("ПрочПлатеж");
                    }
                }
                else {
                    this.прочПлатежField = value;
                    this.OnPropertyChanged("ПрочПлатеж");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДвижениеДенИнвОперПлатеж));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПриобрВнАктивSpecified {
            get {
                return приобрВнАктивFieldSpecified;
            }
            set {
                приобрВнАктивFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПриобрАкцДрSpecified {
            get {
                return приобрАкцДрFieldSpecified;
            }
            set {
                приобрАкцДрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПриобрДолгЦБSpecified {
            get {
                return приобрДолгЦБFieldSpecified;
            }
            set {
                приобрДолгЦБFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПроцДолгОбSpecified {
            get {
                return процДолгОбFieldSpecified;
            }
            set {
                процДолгОбFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокИнвПлатSpecified {
            get {
                return вПокИнвПлатFieldSpecified;
            }
            set {
                вПокИнвПлатFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочПлатежSpecified {
            get {
                return прочПлатежFieldSpecified;
            }
            set {
                прочПлатежFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенИнвОперПлатеж object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДвижениеДенИнвОперПлатеж object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенИнвОперПлатеж object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенИнвОперПлатеж obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенИнвОперПлатеж);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенИнвОперПлатеж obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенИнвОперПлатеж Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДвижениеДенИнвОперПлатеж)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенИнвОперПлатеж object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДвижениеДенИнвОперПлатеж object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенИнвОперПлатеж object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенИнвОперПлатеж obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенИнвОперПлатеж);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенИнвОперПлатеж obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенИнвОперПлатеж LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДвижениеДенФинОпер : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип сальдоФинField;
        
        private ФайлДокументДвижениеДенФинОперПоступ поступField;
        
        private ФайлДокументДвижениеДенФинОперПлатеж платежField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool сальдоФинFieldSpecified;
        
        private bool поступFieldSpecified;
        
        private bool платежFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип СальдоФин {
            get {
                if ((this.сальдоФинField == null)) {
                    this.сальдоФинField = new ОПТип();
                }
                return this.сальдоФинField;
            }
            set {
                if ((this.сальдоФинField != null)) {
                    if ((сальдоФинField.Equals(value) != true)) {
                        this.сальдоФинField = value;
                        this.OnPropertyChanged("СальдоФин");
                    }
                }
                else {
                    this.сальдоФинField = value;
                    this.OnPropertyChanged("СальдоФин");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументДвижениеДенФинОперПоступ Поступ {
            get {
                if ((this.поступField == null)) {
                    this.поступField = new ФайлДокументДвижениеДенФинОперПоступ();
                }
                return this.поступField;
            }
            set {
                if ((this.поступField != null)) {
                    if ((поступField.Equals(value) != true)) {
                        this.поступField = value;
                        this.OnPropertyChanged("Поступ");
                    }
                }
                else {
                    this.поступField = value;
                    this.OnPropertyChanged("Поступ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ФайлДокументДвижениеДенФинОперПлатеж Платеж {
            get {
                if ((this.платежField == null)) {
                    this.платежField = new ФайлДокументДвижениеДенФинОперПлатеж();
                }
                return this.платежField;
            }
            set {
                if ((this.платежField != null)) {
                    if ((платежField.Equals(value) != true)) {
                        this.платежField = value;
                        this.OnPropertyChanged("Платеж");
                    }
                }
                else {
                    this.платежField = value;
                    this.OnPropertyChanged("Платеж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДвижениеДенФинОпер));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СальдоФинSpecified {
            get {
                return сальдоФинFieldSpecified;
            }
            set {
                сальдоФинFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоступSpecified {
            get {
                return поступFieldSpecified;
            }
            set {
                поступFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПлатежSpecified {
            get {
                return платежFieldSpecified;
            }
            set {
                платежFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенФинОпер object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДвижениеДенФинОпер object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенФинОпер object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенФинОпер obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенФинОпер);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенФинОпер obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенФинОпер Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДвижениеДенФинОпер)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенФинОпер object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДвижениеДенФинОпер object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенФинОпер object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенФинОпер obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенФинОпер);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенФинОпер obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенФинОпер LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДвижениеДенФинОперПоступ : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип кредЗаймField;
        
        private ОПТип вкладСобField;
        
        private ОПТип акцДолField;
        
        private ОПТип облВексДрField;
        
        private List<ВПокОПТип> вПокФинПостField;
        
        private ОП_ДТип прочПоступField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кредЗаймFieldSpecified;
        
        private bool вкладСобFieldSpecified;
        
        private bool акцДолFieldSpecified;
        
        private bool облВексДрFieldSpecified;
        
        private bool вПокФинПостFieldSpecified;
        
        private bool прочПоступFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип КредЗайм {
            get {
                if ((this.кредЗаймField == null)) {
                    this.кредЗаймField = new ОПТип();
                }
                return this.кредЗаймField;
            }
            set {
                if ((this.кредЗаймField != null)) {
                    if ((кредЗаймField.Equals(value) != true)) {
                        this.кредЗаймField = value;
                        this.OnPropertyChanged("КредЗайм");
                    }
                }
                else {
                    this.кредЗаймField = value;
                    this.OnPropertyChanged("КредЗайм");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПТип ВкладСоб {
            get {
                if ((this.вкладСобField == null)) {
                    this.вкладСобField = new ОПТип();
                }
                return this.вкладСобField;
            }
            set {
                if ((this.вкладСобField != null)) {
                    if ((вкладСобField.Equals(value) != true)) {
                        this.вкладСобField = value;
                        this.OnPropertyChanged("ВкладСоб");
                    }
                }
                else {
                    this.вкладСобField = value;
                    this.OnPropertyChanged("ВкладСоб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПТип АкцДол {
            get {
                if ((this.акцДолField == null)) {
                    this.акцДолField = new ОПТип();
                }
                return this.акцДолField;
            }
            set {
                if ((this.акцДолField != null)) {
                    if ((акцДолField.Equals(value) != true)) {
                        this.акцДолField = value;
                        this.OnPropertyChanged("АкцДол");
                    }
                }
                else {
                    this.акцДолField = value;
                    this.OnPropertyChanged("АкцДол");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПТип ОблВексДр {
            get {
                if ((this.облВексДрField == null)) {
                    this.облВексДрField = new ОПТип();
                }
                return this.облВексДрField;
            }
            set {
                if ((this.облВексДрField != null)) {
                    if ((облВексДрField.Equals(value) != true)) {
                        this.облВексДрField = value;
                        this.OnPropertyChanged("ОблВексДр");
                    }
                }
                else {
                    this.облВексДрField = value;
                    this.OnPropertyChanged("ОблВексДр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокФинПост", Order=4)]
        public List<ВПокОПТип> ВПокФинПост {
            get {
                if ((this.вПокФинПостField == null)) {
                    this.вПокФинПостField = new List<ВПокОПТип>();
                }
                return this.вПокФинПостField;
            }
            set {
                if ((this.вПокФинПостField != null)) {
                    if ((вПокФинПостField.Equals(value) != true)) {
                        this.вПокФинПостField = value;
                        this.OnPropertyChanged("ВПокФинПост");
                    }
                }
                else {
                    this.вПокФинПостField = value;
                    this.OnPropertyChanged("ВПокФинПост");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ОП_ДТип ПрочПоступ {
            get {
                if ((this.прочПоступField == null)) {
                    this.прочПоступField = new ОП_ДТип();
                }
                return this.прочПоступField;
            }
            set {
                if ((this.прочПоступField != null)) {
                    if ((прочПоступField.Equals(value) != true)) {
                        this.прочПоступField = value;
                        this.OnPropertyChanged("ПрочПоступ");
                    }
                }
                else {
                    this.прочПоступField = value;
                    this.OnPropertyChanged("ПрочПоступ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДвижениеДенФинОперПоступ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КредЗаймSpecified {
            get {
                return кредЗаймFieldSpecified;
            }
            set {
                кредЗаймFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВкладСобSpecified {
            get {
                return вкладСобFieldSpecified;
            }
            set {
                вкладСобFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool АкцДолSpecified {
            get {
                return акцДолFieldSpecified;
            }
            set {
                акцДолFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОблВексДрSpecified {
            get {
                return облВексДрFieldSpecified;
            }
            set {
                облВексДрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокФинПостSpecified {
            get {
                return вПокФинПостFieldSpecified;
            }
            set {
                вПокФинПостFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочПоступSpecified {
            get {
                return прочПоступFieldSpecified;
            }
            set {
                прочПоступFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенФинОперПоступ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДвижениеДенФинОперПоступ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенФинОперПоступ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенФинОперПоступ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенФинОперПоступ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенФинОперПоступ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенФинОперПоступ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДвижениеДенФинОперПоступ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенФинОперПоступ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДвижениеДенФинОперПоступ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенФинОперПоступ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенФинОперПоступ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенФинОперПоступ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенФинОперПоступ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенФинОперПоступ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДвижениеДенФинОперПлатеж : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип выкупАкцField;
        
        private ОПТип уплДивИнField;
        
        private ОПТип выкВексКЗField;
        
        private List<ВПокОПТип> вПокФинПлатField;
        
        private ОП_ДТип прочПлатежField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool выкупАкцFieldSpecified;
        
        private bool уплДивИнFieldSpecified;
        
        private bool выкВексКЗFieldSpecified;
        
        private bool вПокФинПлатFieldSpecified;
        
        private bool прочПлатежFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип ВыкупАкц {
            get {
                if ((this.выкупАкцField == null)) {
                    this.выкупАкцField = new ОПТип();
                }
                return this.выкупАкцField;
            }
            set {
                if ((this.выкупАкцField != null)) {
                    if ((выкупАкцField.Equals(value) != true)) {
                        this.выкупАкцField = value;
                        this.OnPropertyChanged("ВыкупАкц");
                    }
                }
                else {
                    this.выкупАкцField = value;
                    this.OnPropertyChanged("ВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПТип УплДивИн {
            get {
                if ((this.уплДивИнField == null)) {
                    this.уплДивИнField = new ОПТип();
                }
                return this.уплДивИнField;
            }
            set {
                if ((this.уплДивИнField != null)) {
                    if ((уплДивИнField.Equals(value) != true)) {
                        this.уплДивИнField = value;
                        this.OnPropertyChanged("УплДивИн");
                    }
                }
                else {
                    this.уплДивИнField = value;
                    this.OnPropertyChanged("УплДивИн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПТип ВыкВексКЗ {
            get {
                if ((this.выкВексКЗField == null)) {
                    this.выкВексКЗField = new ОПТип();
                }
                return this.выкВексКЗField;
            }
            set {
                if ((this.выкВексКЗField != null)) {
                    if ((выкВексКЗField.Equals(value) != true)) {
                        this.выкВексКЗField = value;
                        this.OnPropertyChanged("ВыкВексКЗ");
                    }
                }
                else {
                    this.выкВексКЗField = value;
                    this.OnPropertyChanged("ВыкВексКЗ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокФинПлат", Order=3)]
        public List<ВПокОПТип> ВПокФинПлат {
            get {
                if ((this.вПокФинПлатField == null)) {
                    this.вПокФинПлатField = new List<ВПокОПТип>();
                }
                return this.вПокФинПлатField;
            }
            set {
                if ((this.вПокФинПлатField != null)) {
                    if ((вПокФинПлатField.Equals(value) != true)) {
                        this.вПокФинПлатField = value;
                        this.OnPropertyChanged("ВПокФинПлат");
                    }
                }
                else {
                    this.вПокФинПлатField = value;
                    this.OnPropertyChanged("ВПокФинПлат");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОП_ДТип ПрочПлатеж {
            get {
                if ((this.прочПлатежField == null)) {
                    this.прочПлатежField = new ОП_ДТип();
                }
                return this.прочПлатежField;
            }
            set {
                if ((this.прочПлатежField != null)) {
                    if ((прочПлатежField.Equals(value) != true)) {
                        this.прочПлатежField = value;
                        this.OnPropertyChanged("ПрочПлатеж");
                    }
                }
                else {
                    this.прочПлатежField = value;
                    this.OnPropertyChanged("ПрочПлатеж");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДвижениеДенФинОперПлатеж));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВыкупАкцSpecified {
            get {
                return выкупАкцFieldSpecified;
            }
            set {
                выкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УплДивИнSpecified {
            get {
                return уплДивИнFieldSpecified;
            }
            set {
                уплДивИнFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВыкВексКЗSpecified {
            get {
                return выкВексКЗFieldSpecified;
            }
            set {
                выкВексКЗFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокФинПлатSpecified {
            get {
                return вПокФинПлатFieldSpecified;
            }
            set {
                вПокФинПлатFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочПлатежSpecified {
            get {
                return прочПлатежFieldSpecified;
            }
            set {
                прочПлатежFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенФинОперПлатеж object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДвижениеДенФинОперПлатеж object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенФинОперПлатеж object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенФинОперПлатеж obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенФинОперПлатеж);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДвижениеДенФинОперПлатеж obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенФинОперПлатеж Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДвижениеДенФинОперПлатеж)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДвижениеДенФинОперПлатеж object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДвижениеДенФинОперПлатеж object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДвижениеДенФинОперПлатеж object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенФинОперПлатеж obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДвижениеДенФинОперПлатеж);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДвижениеДенФинОперПлатеж obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДвижениеДенФинОперПлатеж LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументДвижениеДенОКУД {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0710004")]
        Item0710004,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументДвижениеДенОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("385")]
        Item385,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЦелИсп : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип остатНачОтчField;
        
        private ФайлДокументЦелИспПоступило поступилоField;
        
        private ФайлДокументЦелИспИспользовано использованоField;
        
        private ОПТип остатКонОтчField;
        
        private ФайлДокументЦелИспОКУД оКУДField;
        
        private ПериодГодТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументЦелИспОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool остатНачОтчFieldSpecified;
        
        private bool поступилоFieldSpecified;
        
        private bool использованоFieldSpecified;
        
        private bool остатКонОтчFieldSpecified;
        
        private bool оКУДFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип ОстатНачОтч {
            get {
                if ((this.остатНачОтчField == null)) {
                    this.остатНачОтчField = new ОПТип();
                }
                return this.остатНачОтчField;
            }
            set {
                if ((this.остатНачОтчField != null)) {
                    if ((остатНачОтчField.Equals(value) != true)) {
                        this.остатНачОтчField = value;
                        this.OnPropertyChanged("ОстатНачОтч");
                    }
                }
                else {
                    this.остатНачОтчField = value;
                    this.OnPropertyChanged("ОстатНачОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументЦелИспПоступило Поступило {
            get {
                if ((this.поступилоField == null)) {
                    this.поступилоField = new ФайлДокументЦелИспПоступило();
                }
                return this.поступилоField;
            }
            set {
                if ((this.поступилоField != null)) {
                    if ((поступилоField.Equals(value) != true)) {
                        this.поступилоField = value;
                        this.OnPropertyChanged("Поступило");
                    }
                }
                else {
                    this.поступилоField = value;
                    this.OnPropertyChanged("Поступило");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ФайлДокументЦелИспИспользовано Использовано {
            get {
                if ((this.использованоField == null)) {
                    this.использованоField = new ФайлДокументЦелИспИспользовано();
                }
                return this.использованоField;
            }
            set {
                if ((this.использованоField != null)) {
                    if ((использованоField.Equals(value) != true)) {
                        this.использованоField = value;
                        this.OnPropertyChanged("Использовано");
                    }
                }
                else {
                    this.использованоField = value;
                    this.OnPropertyChanged("Использовано");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПТип ОстатКонОтч {
            get {
                if ((this.остатКонОтчField == null)) {
                    this.остатКонОтчField = new ОПТип();
                }
                return this.остатКонОтчField;
            }
            set {
                if ((this.остатКонОтчField != null)) {
                    if ((остатКонОтчField.Equals(value) != true)) {
                        this.остатКонОтчField = value;
                        this.OnPropertyChanged("ОстатКонОтч");
                    }
                }
                else {
                    this.остатКонОтчField = value;
                    this.OnPropertyChanged("ОстатКонОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументЦелИспОКУД ОКУД {
            get {
                return this.оКУДField;
            }
            set {
                if ((оКУДField.Equals(value) != true)) {
                    this.оКУДField = value;
                    this.OnPropertyChanged("ОКУД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодГодТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументЦелИспОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЦелИсп));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ОстатНачОтчSpecified {
            get {
                return остатНачОтчFieldSpecified;
            }
            set {
                остатНачОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПоступилоSpecified {
            get {
                return поступилоFieldSpecified;
            }
            set {
                поступилоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИспользованоSpecified {
            get {
                return использованоFieldSpecified;
            }
            set {
                использованоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОстатКонОтчSpecified {
            get {
                return остатКонОтчFieldSpecified;
            }
            set {
                остатКонОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКУДSpecified {
            get {
                return оКУДFieldSpecified;
            }
            set {
                оКУДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЦелИсп object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЦелИсп object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЦелИсп object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЦелИсп obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЦелИсп);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЦелИсп obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЦелИсп Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЦелИсп)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЦелИсп object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЦелИсп object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЦелИсп object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЦелИсп obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЦелИсп);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЦелИсп obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЦелИсп LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЦелИспПоступило : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип вступВзносField;
        
        private ОПТип членВзносField;
        
        private ОПТип целевВзносField;
        
        private ОПТип добрИмВзносField;
        
        private ОПТип прибПредДеятField;
        
        private List<ВПокОПТип> вПокПоступField;
        
        private ОП_ДТип прочиеField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool вступВзносFieldSpecified;
        
        private bool членВзносFieldSpecified;
        
        private bool целевВзносFieldSpecified;
        
        private bool добрИмВзносFieldSpecified;
        
        private bool прибПредДеятFieldSpecified;
        
        private bool вПокПоступFieldSpecified;
        
        private bool прочиеFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип ВступВзнос {
            get {
                if ((this.вступВзносField == null)) {
                    this.вступВзносField = new ОПТип();
                }
                return this.вступВзносField;
            }
            set {
                if ((this.вступВзносField != null)) {
                    if ((вступВзносField.Equals(value) != true)) {
                        this.вступВзносField = value;
                        this.OnPropertyChanged("ВступВзнос");
                    }
                }
                else {
                    this.вступВзносField = value;
                    this.OnPropertyChanged("ВступВзнос");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПТип ЧленВзнос {
            get {
                if ((this.членВзносField == null)) {
                    this.членВзносField = new ОПТип();
                }
                return this.членВзносField;
            }
            set {
                if ((this.членВзносField != null)) {
                    if ((членВзносField.Equals(value) != true)) {
                        this.членВзносField = value;
                        this.OnPropertyChanged("ЧленВзнос");
                    }
                }
                else {
                    this.членВзносField = value;
                    this.OnPropertyChanged("ЧленВзнос");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПТип ЦелевВзнос {
            get {
                if ((this.целевВзносField == null)) {
                    this.целевВзносField = new ОПТип();
                }
                return this.целевВзносField;
            }
            set {
                if ((this.целевВзносField != null)) {
                    if ((целевВзносField.Equals(value) != true)) {
                        this.целевВзносField = value;
                        this.OnPropertyChanged("ЦелевВзнос");
                    }
                }
                else {
                    this.целевВзносField = value;
                    this.OnPropertyChanged("ЦелевВзнос");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПТип ДобрИмВзнос {
            get {
                if ((this.добрИмВзносField == null)) {
                    this.добрИмВзносField = new ОПТип();
                }
                return this.добрИмВзносField;
            }
            set {
                if ((this.добрИмВзносField != null)) {
                    if ((добрИмВзносField.Equals(value) != true)) {
                        this.добрИмВзносField = value;
                        this.OnPropertyChanged("ДобрИмВзнос");
                    }
                }
                else {
                    this.добрИмВзносField = value;
                    this.OnPropertyChanged("ДобрИмВзнос");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОПТип ПрибПредДеят {
            get {
                if ((this.прибПредДеятField == null)) {
                    this.прибПредДеятField = new ОПТип();
                }
                return this.прибПредДеятField;
            }
            set {
                if ((this.прибПредДеятField != null)) {
                    if ((прибПредДеятField.Equals(value) != true)) {
                        this.прибПредДеятField = value;
                        this.OnPropertyChanged("ПрибПредДеят");
                    }
                }
                else {
                    this.прибПредДеятField = value;
                    this.OnPropertyChanged("ПрибПредДеят");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокПоступ", Order=5)]
        public List<ВПокОПТип> ВПокПоступ {
            get {
                if ((this.вПокПоступField == null)) {
                    this.вПокПоступField = new List<ВПокОПТип>();
                }
                return this.вПокПоступField;
            }
            set {
                if ((this.вПокПоступField != null)) {
                    if ((вПокПоступField.Equals(value) != true)) {
                        this.вПокПоступField = value;
                        this.OnPropertyChanged("ВПокПоступ");
                    }
                }
                else {
                    this.вПокПоступField = value;
                    this.OnPropertyChanged("ВПокПоступ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ОП_ДТип Прочие {
            get {
                if ((this.прочиеField == null)) {
                    this.прочиеField = new ОП_ДТип();
                }
                return this.прочиеField;
            }
            set {
                if ((this.прочиеField != null)) {
                    if ((прочиеField.Equals(value) != true)) {
                        this.прочиеField = value;
                        this.OnPropertyChanged("Прочие");
                    }
                }
                else {
                    this.прочиеField = value;
                    this.OnPropertyChanged("Прочие");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЦелИспПоступило));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВступВзносSpecified {
            get {
                return вступВзносFieldSpecified;
            }
            set {
                вступВзносFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЧленВзносSpecified {
            get {
                return членВзносFieldSpecified;
            }
            set {
                членВзносFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЦелевВзносSpecified {
            get {
                return целевВзносFieldSpecified;
            }
            set {
                целевВзносFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобрИмВзносSpecified {
            get {
                return добрИмВзносFieldSpecified;
            }
            set {
                добрИмВзносFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрибПредДеятSpecified {
            get {
                return прибПредДеятFieldSpecified;
            }
            set {
                прибПредДеятFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокПоступSpecified {
            get {
                return вПокПоступFieldSpecified;
            }
            set {
                вПокПоступFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочиеSpecified {
            get {
                return прочиеFieldSpecified;
            }
            set {
                прочиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЦелИспПоступило object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЦелИспПоступило object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЦелИспПоступило object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЦелИспПоступило obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЦелИспПоступило);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЦелИспПоступило obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЦелИспПоступило Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЦелИспПоступило)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЦелИспПоступило object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЦелИспПоступило object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЦелИспПоступило object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЦелИспПоступило obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЦелИспПоступило);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЦелИспПоступило obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЦелИспПоступило LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЦелИспИспользовано : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументЦелИспИспользованоРасхЦелМер расхЦелМерField;
        
        private ФайлДокументЦелИспИспользованоРасхСодАУ расхСодАУField;
        
        private ОПТип приобОСИнField;
        
        private List<ВПокОПТип> вПокИспользField;
        
        private ОП_ДТип прочиеField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool расхЦелМерFieldSpecified;
        
        private bool расхСодАУFieldSpecified;
        
        private bool приобОСИнFieldSpecified;
        
        private bool вПокИспользFieldSpecified;
        
        private bool прочиеFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументЦелИспИспользованоРасхЦелМер РасхЦелМер {
            get {
                if ((this.расхЦелМерField == null)) {
                    this.расхЦелМерField = new ФайлДокументЦелИспИспользованоРасхЦелМер();
                }
                return this.расхЦелМерField;
            }
            set {
                if ((this.расхЦелМерField != null)) {
                    if ((расхЦелМерField.Equals(value) != true)) {
                        this.расхЦелМерField = value;
                        this.OnPropertyChanged("РасхЦелМер");
                    }
                }
                else {
                    this.расхЦелМерField = value;
                    this.OnPropertyChanged("РасхЦелМер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументЦелИспИспользованоРасхСодАУ РасхСодАУ {
            get {
                if ((this.расхСодАУField == null)) {
                    this.расхСодАУField = new ФайлДокументЦелИспИспользованоРасхСодАУ();
                }
                return this.расхСодАУField;
            }
            set {
                if ((this.расхСодАУField != null)) {
                    if ((расхСодАУField.Equals(value) != true)) {
                        this.расхСодАУField = value;
                        this.OnPropertyChanged("РасхСодАУ");
                    }
                }
                else {
                    this.расхСодАУField = value;
                    this.OnPropertyChanged("РасхСодАУ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПТип ПриобОСИн {
            get {
                if ((this.приобОСИнField == null)) {
                    this.приобОСИнField = new ОПТип();
                }
                return this.приобОСИнField;
            }
            set {
                if ((this.приобОСИнField != null)) {
                    if ((приобОСИнField.Equals(value) != true)) {
                        this.приобОСИнField = value;
                        this.OnPropertyChanged("ПриобОСИн");
                    }
                }
                else {
                    this.приобОСИнField = value;
                    this.OnPropertyChanged("ПриобОСИн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокИспольз", Order=3)]
        public List<ВПокОПТип> ВПокИспольз {
            get {
                if ((this.вПокИспользField == null)) {
                    this.вПокИспользField = new List<ВПокОПТип>();
                }
                return this.вПокИспользField;
            }
            set {
                if ((this.вПокИспользField != null)) {
                    if ((вПокИспользField.Equals(value) != true)) {
                        this.вПокИспользField = value;
                        this.OnPropertyChanged("ВПокИспольз");
                    }
                }
                else {
                    this.вПокИспользField = value;
                    this.OnPropertyChanged("ВПокИспольз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОП_ДТип Прочие {
            get {
                if ((this.прочиеField == null)) {
                    this.прочиеField = new ОП_ДТип();
                }
                return this.прочиеField;
            }
            set {
                if ((this.прочиеField != null)) {
                    if ((прочиеField.Equals(value) != true)) {
                        this.прочиеField = value;
                        this.OnPropertyChanged("Прочие");
                    }
                }
                else {
                    this.прочиеField = value;
                    this.OnPropertyChanged("Прочие");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЦелИспИспользовано));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool РасхЦелМерSpecified {
            get {
                return расхЦелМерFieldSpecified;
            }
            set {
                расхЦелМерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РасхСодАУSpecified {
            get {
                return расхСодАУFieldSpecified;
            }
            set {
                расхСодАУFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПриобОСИнSpecified {
            get {
                return приобОСИнFieldSpecified;
            }
            set {
                приобОСИнFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокИспользSpecified {
            get {
                return вПокИспользFieldSpecified;
            }
            set {
                вПокИспользFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочиеSpecified {
            get {
                return прочиеFieldSpecified;
            }
            set {
                прочиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЦелИспИспользовано object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЦелИспИспользовано object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЦелИспИспользовано object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЦелИспИспользовано obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЦелИспИспользовано);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЦелИспИспользовано obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЦелИспИспользовано Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЦелИспИспользовано)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЦелИспИспользовано object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЦелИспИспользовано object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЦелИспИспользовано object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЦелИспИспользовано obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЦелИспИспользовано);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЦелИспИспользовано obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЦелИспИспользовано LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЦелИспИспользованоРасхЦелМер : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип соцПомField;
        
        private ОПТип провСеминField;
        
        private List<ВПокОПТип> вПокЦелМерField;
        
        private ОПТип иныеМерField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool соцПомFieldSpecified;
        
        private bool провСеминFieldSpecified;
        
        private bool вПокЦелМерFieldSpecified;
        
        private bool иныеМерFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип СоцПом {
            get {
                if ((this.соцПомField == null)) {
                    this.соцПомField = new ОПТип();
                }
                return this.соцПомField;
            }
            set {
                if ((this.соцПомField != null)) {
                    if ((соцПомField.Equals(value) != true)) {
                        this.соцПомField = value;
                        this.OnPropertyChanged("СоцПом");
                    }
                }
                else {
                    this.соцПомField = value;
                    this.OnPropertyChanged("СоцПом");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПТип ПровСемин {
            get {
                if ((this.провСеминField == null)) {
                    this.провСеминField = new ОПТип();
                }
                return this.провСеминField;
            }
            set {
                if ((this.провСеминField != null)) {
                    if ((провСеминField.Equals(value) != true)) {
                        this.провСеминField = value;
                        this.OnPropertyChanged("ПровСемин");
                    }
                }
                else {
                    this.провСеминField = value;
                    this.OnPropertyChanged("ПровСемин");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокЦелМер", Order=2)]
        public List<ВПокОПТип> ВПокЦелМер {
            get {
                if ((this.вПокЦелМерField == null)) {
                    this.вПокЦелМерField = new List<ВПокОПТип>();
                }
                return this.вПокЦелМерField;
            }
            set {
                if ((this.вПокЦелМерField != null)) {
                    if ((вПокЦелМерField.Equals(value) != true)) {
                        this.вПокЦелМерField = value;
                        this.OnPropertyChanged("ВПокЦелМер");
                    }
                }
                else {
                    this.вПокЦелМерField = value;
                    this.OnPropertyChanged("ВПокЦелМер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПТип ИныеМер {
            get {
                if ((this.иныеМерField == null)) {
                    this.иныеМерField = new ОПТип();
                }
                return this.иныеМерField;
            }
            set {
                if ((this.иныеМерField != null)) {
                    if ((иныеМерField.Equals(value) != true)) {
                        this.иныеМерField = value;
                        this.OnPropertyChanged("ИныеМер");
                    }
                }
                else {
                    this.иныеМерField = value;
                    this.OnPropertyChanged("ИныеМер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЦелИспИспользованоРасхЦелМер));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СоцПомSpecified {
            get {
                return соцПомFieldSpecified;
            }
            set {
                соцПомFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПровСеминSpecified {
            get {
                return провСеминFieldSpecified;
            }
            set {
                провСеминFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокЦелМерSpecified {
            get {
                return вПокЦелМерFieldSpecified;
            }
            set {
                вПокЦелМерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИныеМерSpecified {
            get {
                return иныеМерFieldSpecified;
            }
            set {
                иныеМерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЦелИспИспользованоРасхЦелМер object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЦелИспИспользованоРасхЦелМер object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЦелИспИспользованоРасхЦелМер object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЦелИспИспользованоРасхЦелМер obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЦелИспИспользованоРасхЦелМер);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЦелИспИспользованоРасхЦелМер obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЦелИспИспользованоРасхЦелМер Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЦелИспИспользованоРасхЦелМер)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЦелИспИспользованоРасхЦелМер object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЦелИспИспользованоРасхЦелМер object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЦелИспИспользованоРасхЦелМер object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЦелИспИспользованоРасхЦелМер obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЦелИспИспользованоРасхЦелМер);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЦелИспИспользованоРасхЦелМер obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЦелИспИспользованоРасхЦелМер LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЦелИспИспользованоРасхСодАУ : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПТип оплТрудField;
        
        private ОПТип выплНеОТField;
        
        private ОПТип служКомField;
        
        private ОПТип зданТранспField;
        
        private ОПТип ремОснСрField;
        
        private List<ВПокОПТип> вПокСодАУField;
        
        private ОП_ДТип прочиеField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool оплТрудFieldSpecified;
        
        private bool выплНеОТFieldSpecified;
        
        private bool служКомFieldSpecified;
        
        private bool зданТранспFieldSpecified;
        
        private bool ремОснСрFieldSpecified;
        
        private bool вПокСодАУFieldSpecified;
        
        private bool прочиеFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПТип ОплТруд {
            get {
                if ((this.оплТрудField == null)) {
                    this.оплТрудField = new ОПТип();
                }
                return this.оплТрудField;
            }
            set {
                if ((this.оплТрудField != null)) {
                    if ((оплТрудField.Equals(value) != true)) {
                        this.оплТрудField = value;
                        this.OnPropertyChanged("ОплТруд");
                    }
                }
                else {
                    this.оплТрудField = value;
                    this.OnPropertyChanged("ОплТруд");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПТип ВыплНеОТ {
            get {
                if ((this.выплНеОТField == null)) {
                    this.выплНеОТField = new ОПТип();
                }
                return this.выплНеОТField;
            }
            set {
                if ((this.выплНеОТField != null)) {
                    if ((выплНеОТField.Equals(value) != true)) {
                        this.выплНеОТField = value;
                        this.OnPropertyChanged("ВыплНеОТ");
                    }
                }
                else {
                    this.выплНеОТField = value;
                    this.OnPropertyChanged("ВыплНеОТ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПТип СлужКом {
            get {
                if ((this.служКомField == null)) {
                    this.служКомField = new ОПТип();
                }
                return this.служКомField;
            }
            set {
                if ((this.служКомField != null)) {
                    if ((служКомField.Equals(value) != true)) {
                        this.служКомField = value;
                        this.OnPropertyChanged("СлужКом");
                    }
                }
                else {
                    this.служКомField = value;
                    this.OnPropertyChanged("СлужКом");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПТип ЗданТрансп {
            get {
                if ((this.зданТранспField == null)) {
                    this.зданТранспField = new ОПТип();
                }
                return this.зданТранспField;
            }
            set {
                if ((this.зданТранспField != null)) {
                    if ((зданТранспField.Equals(value) != true)) {
                        this.зданТранспField = value;
                        this.OnPropertyChanged("ЗданТрансп");
                    }
                }
                else {
                    this.зданТранспField = value;
                    this.OnPropertyChanged("ЗданТрансп");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОПТип РемОснСр {
            get {
                if ((this.ремОснСрField == null)) {
                    this.ремОснСрField = new ОПТип();
                }
                return this.ремОснСрField;
            }
            set {
                if ((this.ремОснСрField != null)) {
                    if ((ремОснСрField.Equals(value) != true)) {
                        this.ремОснСрField = value;
                        this.OnPropertyChanged("РемОснСр");
                    }
                }
                else {
                    this.ремОснСрField = value;
                    this.OnPropertyChanged("РемОснСр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВПокСодАУ", Order=5)]
        public List<ВПокОПТип> ВПокСодАУ {
            get {
                if ((this.вПокСодАУField == null)) {
                    this.вПокСодАУField = new List<ВПокОПТип>();
                }
                return this.вПокСодАУField;
            }
            set {
                if ((this.вПокСодАУField != null)) {
                    if ((вПокСодАУField.Equals(value) != true)) {
                        this.вПокСодАУField = value;
                        this.OnPropertyChanged("ВПокСодАУ");
                    }
                }
                else {
                    this.вПокСодАУField = value;
                    this.OnPropertyChanged("ВПокСодАУ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ОП_ДТип Прочие {
            get {
                if ((this.прочиеField == null)) {
                    this.прочиеField = new ОП_ДТип();
                }
                return this.прочиеField;
            }
            set {
                if ((this.прочиеField != null)) {
                    if ((прочиеField.Equals(value) != true)) {
                        this.прочиеField = value;
                        this.OnPropertyChanged("Прочие");
                    }
                }
                else {
                    this.прочиеField = value;
                    this.OnPropertyChanged("Прочие");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЦелИспИспользованоРасхСодАУ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ОплТрудSpecified {
            get {
                return оплТрудFieldSpecified;
            }
            set {
                оплТрудFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВыплНеОТSpecified {
            get {
                return выплНеОТFieldSpecified;
            }
            set {
                выплНеОТFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СлужКомSpecified {
            get {
                return служКомFieldSpecified;
            }
            set {
                служКомFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗданТранспSpecified {
            get {
                return зданТранспFieldSpecified;
            }
            set {
                зданТранспFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РемОснСрSpecified {
            get {
                return ремОснСрFieldSpecified;
            }
            set {
                ремОснСрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВПокСодАУSpecified {
            get {
                return вПокСодАУFieldSpecified;
            }
            set {
                вПокСодАУFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПрочиеSpecified {
            get {
                return прочиеFieldSpecified;
            }
            set {
                прочиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЦелИспИспользованоРасхСодАУ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЦелИспИспользованоРасхСодАУ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЦелИспИспользованоРасхСодАУ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЦелИспИспользованоРасхСодАУ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЦелИспИспользованоРасхСодАУ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЦелИспИспользованоРасхСодАУ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЦелИспИспользованоРасхСодАУ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЦелИспИспользованоРасхСодАУ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЦелИспИспользованоРасхСодАУ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЦелИспИспользованоРасхСодАУ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЦелИспИспользованоРасхСодАУ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЦелИспИспользованоРасхСодАУ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЦелИспИспользованоРасхСодАУ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЦелИспИспользованоРасхСодАУ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЦелИспИспользованоРасхСодАУ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументЦелИспОКУД {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0710006")]
        Item0710006,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументЦелИспОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("385")]
        Item385,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДополнительныеСведения : System.ComponentModel.INotifyPropertyChanged {
        
        private ОПП_ВПТип амортизацияField;
        
        private ОПП_ВПТип незавершенноеСтроительствоField;
        
        private ОПП_ВПТип долгосрочнаяДебиторскаяЗадолженностьField;
        
        private ОПП_ВПТип краткосрочнаяДебиторскаяЗадолженностьField;
        
        private ОПП_ВПТип просроченнаяДебиторскаяЗадолженностьField;
        
        private ОПП_ВПТип просроченнаяКредиторскаяЗадолженностьField;
        
        private ОПП_ВПТип задолженностьУчредителейПоВзносамВУКField;
        
        private ОПП_ВПТип финансовыйЛизингField;
        
        private ПериодКварталТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументДополнительныеСведенияОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool амортизацияFieldSpecified;
        
        private bool незавершенноеСтроительствоFieldSpecified;
        
        private bool долгосрочнаяДебиторскаяЗадолженностьFieldSpecified;
        
        private bool краткосрочнаяДебиторскаяЗадолженностьFieldSpecified;
        
        private bool просроченнаяДебиторскаяЗадолженностьFieldSpecified;
        
        private bool просроченнаяКредиторскаяЗадолженностьFieldSpecified;
        
        private bool задолженностьУчредителейПоВзносамВУКFieldSpecified;
        
        private bool финансовыйЛизингFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ОПП_ВПТип Амортизация {
            get {
                if ((this.амортизацияField == null)) {
                    this.амортизацияField = new ОПП_ВПТип();
                }
                return this.амортизацияField;
            }
            set {
                if ((this.амортизацияField != null)) {
                    if ((амортизацияField.Equals(value) != true)) {
                        this.амортизацияField = value;
                        this.OnPropertyChanged("Амортизация");
                    }
                }
                else {
                    this.амортизацияField = value;
                    this.OnPropertyChanged("Амортизация");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ОПП_ВПТип НезавершенноеСтроительство {
            get {
                if ((this.незавершенноеСтроительствоField == null)) {
                    this.незавершенноеСтроительствоField = new ОПП_ВПТип();
                }
                return this.незавершенноеСтроительствоField;
            }
            set {
                if ((this.незавершенноеСтроительствоField != null)) {
                    if ((незавершенноеСтроительствоField.Equals(value) != true)) {
                        this.незавершенноеСтроительствоField = value;
                        this.OnPropertyChanged("НезавершенноеСтроительство");
                    }
                }
                else {
                    this.незавершенноеСтроительствоField = value;
                    this.OnPropertyChanged("НезавершенноеСтроительство");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ОПП_ВПТип ДолгосрочнаяДебиторскаяЗадолженность {
            get {
                if ((this.долгосрочнаяДебиторскаяЗадолженностьField == null)) {
                    this.долгосрочнаяДебиторскаяЗадолженностьField = new ОПП_ВПТип();
                }
                return this.долгосрочнаяДебиторскаяЗадолженностьField;
            }
            set {
                if ((this.долгосрочнаяДебиторскаяЗадолженностьField != null)) {
                    if ((долгосрочнаяДебиторскаяЗадолженностьField.Equals(value) != true)) {
                        this.долгосрочнаяДебиторскаяЗадолженностьField = value;
                        this.OnPropertyChanged("ДолгосрочнаяДебиторскаяЗадолженность");
                    }
                }
                else {
                    this.долгосрочнаяДебиторскаяЗадолженностьField = value;
                    this.OnPropertyChanged("ДолгосрочнаяДебиторскаяЗадолженность");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ОПП_ВПТип КраткосрочнаяДебиторскаяЗадолженность {
            get {
                if ((this.краткосрочнаяДебиторскаяЗадолженностьField == null)) {
                    this.краткосрочнаяДебиторскаяЗадолженностьField = new ОПП_ВПТип();
                }
                return this.краткосрочнаяДебиторскаяЗадолженностьField;
            }
            set {
                if ((this.краткосрочнаяДебиторскаяЗадолженностьField != null)) {
                    if ((краткосрочнаяДебиторскаяЗадолженностьField.Equals(value) != true)) {
                        this.краткосрочнаяДебиторскаяЗадолженностьField = value;
                        this.OnPropertyChanged("КраткосрочнаяДебиторскаяЗадолженность");
                    }
                }
                else {
                    this.краткосрочнаяДебиторскаяЗадолженностьField = value;
                    this.OnPropertyChanged("КраткосрочнаяДебиторскаяЗадолженность");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ОПП_ВПТип ПросроченнаяДебиторскаяЗадолженность {
            get {
                if ((this.просроченнаяДебиторскаяЗадолженностьField == null)) {
                    this.просроченнаяДебиторскаяЗадолженностьField = new ОПП_ВПТип();
                }
                return this.просроченнаяДебиторскаяЗадолженностьField;
            }
            set {
                if ((this.просроченнаяДебиторскаяЗадолженностьField != null)) {
                    if ((просроченнаяДебиторскаяЗадолженностьField.Equals(value) != true)) {
                        this.просроченнаяДебиторскаяЗадолженностьField = value;
                        this.OnPropertyChanged("ПросроченнаяДебиторскаяЗадолженность");
                    }
                }
                else {
                    this.просроченнаяДебиторскаяЗадолженностьField = value;
                    this.OnPropertyChanged("ПросроченнаяДебиторскаяЗадолженность");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ОПП_ВПТип ПросроченнаяКредиторскаяЗадолженность {
            get {
                if ((this.просроченнаяКредиторскаяЗадолженностьField == null)) {
                    this.просроченнаяКредиторскаяЗадолженностьField = new ОПП_ВПТип();
                }
                return this.просроченнаяКредиторскаяЗадолженностьField;
            }
            set {
                if ((this.просроченнаяКредиторскаяЗадолженностьField != null)) {
                    if ((просроченнаяКредиторскаяЗадолженностьField.Equals(value) != true)) {
                        this.просроченнаяКредиторскаяЗадолженностьField = value;
                        this.OnPropertyChanged("ПросроченнаяКредиторскаяЗадолженность");
                    }
                }
                else {
                    this.просроченнаяКредиторскаяЗадолженностьField = value;
                    this.OnPropertyChanged("ПросроченнаяКредиторскаяЗадолженность");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ОПП_ВПТип ЗадолженностьУчредителейПоВзносамВУК {
            get {
                if ((this.задолженностьУчредителейПоВзносамВУКField == null)) {
                    this.задолженностьУчредителейПоВзносамВУКField = new ОПП_ВПТип();
                }
                return this.задолженностьУчредителейПоВзносамВУКField;
            }
            set {
                if ((this.задолженностьУчредителейПоВзносамВУКField != null)) {
                    if ((задолженностьУчредителейПоВзносамВУКField.Equals(value) != true)) {
                        this.задолженностьУчредителейПоВзносамВУКField = value;
                        this.OnPropertyChanged("ЗадолженностьУчредителейПоВзносамВУК");
                    }
                }
                else {
                    this.задолженностьУчредителейПоВзносамВУКField = value;
                    this.OnPropertyChanged("ЗадолженностьУчредителейПоВзносамВУК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public ОПП_ВПТип ФинансовыйЛизинг {
            get {
                if ((this.финансовыйЛизингField == null)) {
                    this.финансовыйЛизингField = new ОПП_ВПТип();
                }
                return this.финансовыйЛизингField;
            }
            set {
                if ((this.финансовыйЛизингField != null)) {
                    if ((финансовыйЛизингField.Equals(value) != true)) {
                        this.финансовыйЛизингField = value;
                        this.OnPropertyChanged("ФинансовыйЛизинг");
                    }
                }
                else {
                    this.финансовыйЛизингField = value;
                    this.OnPropertyChanged("ФинансовыйЛизинг");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодКварталТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументДополнительныеСведенияОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДополнительныеСведения));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool АмортизацияSpecified {
            get {
                return амортизацияFieldSpecified;
            }
            set {
                амортизацияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НезавершенноеСтроительствоSpecified {
            get {
                return незавершенноеСтроительствоFieldSpecified;
            }
            set {
                незавершенноеСтроительствоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДолгосрочнаяДебиторскаяЗадолженностьSpecified {
            get {
                return долгосрочнаяДебиторскаяЗадолженностьFieldSpecified;
            }
            set {
                долгосрочнаяДебиторскаяЗадолженностьFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КраткосрочнаяДебиторскаяЗадолженностьSpecified {
            get {
                return краткосрочнаяДебиторскаяЗадолженностьFieldSpecified;
            }
            set {
                краткосрочнаяДебиторскаяЗадолженностьFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросроченнаяДебиторскаяЗадолженностьSpecified {
            get {
                return просроченнаяДебиторскаяЗадолженностьFieldSpecified;
            }
            set {
                просроченнаяДебиторскаяЗадолженностьFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросроченнаяКредиторскаяЗадолженностьSpecified {
            get {
                return просроченнаяКредиторскаяЗадолженностьFieldSpecified;
            }
            set {
                просроченнаяКредиторскаяЗадолженностьFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолженностьУчредителейПоВзносамВУКSpecified {
            get {
                return задолженностьУчредителейПоВзносамВУКFieldSpecified;
            }
            set {
                задолженностьУчредителейПоВзносамВУКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ФинансовыйЛизингSpecified {
            get {
                return финансовыйЛизингFieldSpecified;
            }
            set {
                финансовыйЛизингFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДополнительныеСведения object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДополнительныеСведения object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДополнительныеСведения object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДополнительныеСведения obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДополнительныеСведения);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДополнительныеСведения obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДополнительныеСведения Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДополнительныеСведения)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДополнительныеСведения object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДополнительныеСведения object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДополнительныеСведения object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДополнительныеСведения obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДополнительныеСведения);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДополнительныеСведения obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДополнительныеСведения LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументДополнительныеСведенияОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("385")]
        Item385,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументРасшифровкиОбеспечений : System.ComponentModel.INotifyPropertyChanged {
        
        private List<СтрокаОСВСТочностью3Тип> оСВ_008Field;
        
        private List<СтрокаОСВСТочностью3Тип> оСВ_009Field;
        
        private ПериодКварталТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументРасшифровкиОбеспеченийОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool оСВ_008FieldSpecified;
        
        private bool оСВ_009FieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("СтрокаОСВ", IsNullable=false)]
        public List<СтрокаОСВСТочностью3Тип> ОСВ_008 {
            get {
                if ((this.оСВ_008Field == null)) {
                    this.оСВ_008Field = new List<СтрокаОСВСТочностью3Тип>();
                }
                return this.оСВ_008Field;
            }
            set {
                if ((this.оСВ_008Field != null)) {
                    if ((оСВ_008Field.Equals(value) != true)) {
                        this.оСВ_008Field = value;
                        this.OnPropertyChanged("ОСВ_008");
                    }
                }
                else {
                    this.оСВ_008Field = value;
                    this.OnPropertyChanged("ОСВ_008");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("СтрокаОСВ", IsNullable=false)]
        public List<СтрокаОСВСТочностью3Тип> ОСВ_009 {
            get {
                if ((this.оСВ_009Field == null)) {
                    this.оСВ_009Field = new List<СтрокаОСВСТочностью3Тип>();
                }
                return this.оСВ_009Field;
            }
            set {
                if ((this.оСВ_009Field != null)) {
                    if ((оСВ_009Field.Equals(value) != true)) {
                        this.оСВ_009Field = value;
                        this.OnPropertyChanged("ОСВ_009");
                    }
                }
                else {
                    this.оСВ_009Field = value;
                    this.OnPropertyChanged("ОСВ_009");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодКварталТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументРасшифровкиОбеспеченийОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументРасшифровкиОбеспечений));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ОСВ_008Specified {
            get {
                return оСВ_008FieldSpecified;
            }
            set {
                оСВ_008FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОСВ_009Specified {
            get {
                return оСВ_009FieldSpecified;
            }
            set {
                оСВ_009FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументРасшифровкиОбеспечений object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументРасшифровкиОбеспечений object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументРасшифровкиОбеспечений object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументРасшифровкиОбеспечений obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументРасшифровкиОбеспечений);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументРасшифровкиОбеспечений obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументРасшифровкиОбеспечений Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументРасшифровкиОбеспечений)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументРасшифровкиОбеспечений object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументРасшифровкиОбеспечений object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументРасшифровкиОбеспечений object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументРасшифровкиОбеспечений obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументРасшифровкиОбеспечений);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументРасшифровкиОбеспечений obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументРасшифровкиОбеспечений LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументРасшифровкиОбеспеченийОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЗадолженностьПоКредитамЗаймам : System.ComponentModel.INotifyPropertyChanged {
        
        private List<СтрокаКредЗаймТочн3Тип> оСВ_66Field;
        
        private List<СтрокаКредЗаймТочн3Тип> оСВ_67Field;
        
        private ПериодКварталТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументЗадолженностьПоКредитамЗаймамОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool оСВ_66FieldSpecified;
        
        private bool оСВ_67FieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("СтрокаОСВ", IsNullable=false)]
        public List<СтрокаКредЗаймТочн3Тип> ОСВ_66 {
            get {
                if ((this.оСВ_66Field == null)) {
                    this.оСВ_66Field = new List<СтрокаКредЗаймТочн3Тип>();
                }
                return this.оСВ_66Field;
            }
            set {
                if ((this.оСВ_66Field != null)) {
                    if ((оСВ_66Field.Equals(value) != true)) {
                        this.оСВ_66Field = value;
                        this.OnPropertyChanged("ОСВ_66");
                    }
                }
                else {
                    this.оСВ_66Field = value;
                    this.OnPropertyChanged("ОСВ_66");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("СтрокаОСВ", IsNullable=false)]
        public List<СтрокаКредЗаймТочн3Тип> ОСВ_67 {
            get {
                if ((this.оСВ_67Field == null)) {
                    this.оСВ_67Field = new List<СтрокаКредЗаймТочн3Тип>();
                }
                return this.оСВ_67Field;
            }
            set {
                if ((this.оСВ_67Field != null)) {
                    if ((оСВ_67Field.Equals(value) != true)) {
                        this.оСВ_67Field = value;
                        this.OnPropertyChanged("ОСВ_67");
                    }
                }
                else {
                    this.оСВ_67Field = value;
                    this.OnPropertyChanged("ОСВ_67");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодКварталТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументЗадолженностьПоКредитамЗаймамОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЗадолженностьПоКредитамЗаймам));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ОСВ_66Specified {
            get {
                return оСВ_66FieldSpecified;
            }
            set {
                оСВ_66FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОСВ_67Specified {
            get {
                return оСВ_67FieldSpecified;
            }
            set {
                оСВ_67FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЗадолженностьПоКредитамЗаймам object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЗадолженностьПоКредитамЗаймам object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЗадолженностьПоКредитамЗаймам object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЗадолженностьПоКредитамЗаймам obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЗадолженностьПоКредитамЗаймам);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЗадолженностьПоКредитамЗаймам obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЗадолженностьПоКредитамЗаймам Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЗадолженностьПоКредитамЗаймам)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЗадолженностьПоКредитамЗаймам object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЗадолженностьПоКредитамЗаймам object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЗадолженностьПоКредитамЗаймам object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЗадолженностьПоКредитамЗаймам obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЗадолженностьПоКредитамЗаймам);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЗадолженностьПоКредитамЗаймам obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЗадолженностьПоКредитамЗаймам LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументЗадолженностьПоКредитамЗаймамОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЛизингОбязательства : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументЛизингОбязательстваОбязательство> обязательствоField;
        
        private List<ФайлДокументЛизингОбязательстваПлат> платСебПредшField;
        
        private ПериодКварталТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументЛизингОбязательстваОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool обязательствоFieldSpecified;
        
        private bool платСебПредшFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Обязательство", Order=0)]
        public List<ФайлДокументЛизингОбязательстваОбязательство> Обязательство {
            get {
                if ((this.обязательствоField == null)) {
                    this.обязательствоField = new List<ФайлДокументЛизингОбязательстваОбязательство>();
                }
                return this.обязательствоField;
            }
            set {
                if ((this.обязательствоField != null)) {
                    if ((обязательствоField.Equals(value) != true)) {
                        this.обязательствоField = value;
                        this.OnPropertyChanged("Обязательство");
                    }
                }
                else {
                    this.обязательствоField = value;
                    this.OnPropertyChanged("Обязательство");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Плат", IsNullable=false)]
        public List<ФайлДокументЛизингОбязательстваПлат> ПлатСебПредш {
            get {
                if ((this.платСебПредшField == null)) {
                    this.платСебПредшField = new List<ФайлДокументЛизингОбязательстваПлат>();
                }
                return this.платСебПредшField;
            }
            set {
                if ((this.платСебПредшField != null)) {
                    if ((платСебПредшField.Equals(value) != true)) {
                        this.платСебПредшField = value;
                        this.OnPropertyChanged("ПлатСебПредш");
                    }
                }
                else {
                    this.платСебПредшField = value;
                    this.OnPropertyChanged("ПлатСебПредш");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодКварталТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументЛизингОбязательстваОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЛизингОбязательства));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ОбязательствоSpecified {
            get {
                return обязательствоFieldSpecified;
            }
            set {
                обязательствоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПлатСебПредшSpecified {
            get {
                return платСебПредшFieldSpecified;
            }
            set {
                платСебПредшFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЛизингОбязательства object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЛизингОбязательства object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЛизингОбязательства object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЛизингОбязательства obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЛизингОбязательства);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЛизингОбязательства obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЛизингОбязательства Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЛизингОбязательства)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЛизингОбязательства object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЛизингОбязательства object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЛизингОбязательства object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЛизингОбязательства obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЛизингОбязательства);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЛизингОбязательства obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЛизингОбязательства LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЛизингОбязательстваОбязательство : System.ComponentModel.INotifyPropertyChanged {
        
        private КонтрагентТип компанияField;
        
        private ФайлДокументЛизингОбязательстваОбязательствоДоговор договорField;
        
        private string комментарийField;
        
        private string продуктField;
        
        private decimal суммаПоДоговоруField;
        
        private decimal остатокПлатежейField;
        
        private string валютаДоговораField;
        
        private decimal процентнаяСтавкаField;
        
        private bool процентнаяСтавкаFieldSpecified;
        
        private string датаПоследнегоПлатежаField;
        
        private string учетОбязательствField;
        
        private decimal суммаПлатежейНаСебестоимостьField;
        
        private decimal суммаДогВалField;
        
        private bool суммаДогВалFieldSpecified;
        
        private decimal остВалField;
        
        private bool остВалFieldSpecified;
        
        private decimal суммаПросрField;
        
        private bool суммаПросрFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool компанияFieldSpecified;
        
        private bool договорFieldSpecified;
        
        private bool комментарийFieldSpecified;
        
        private bool продуктFieldSpecified;
        
        private bool суммаПоДоговоруFieldSpecified;
        
        private bool остатокПлатежейFieldSpecified;
        
        private bool валютаДоговораFieldSpecified;
        
        private bool датаПоследнегоПлатежаFieldSpecified;
        
        private bool учетОбязательствFieldSpecified;
        
        private bool суммаПлатежейНаСебестоимостьFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public КонтрагентТип Компания {
            get {
                if ((this.компанияField == null)) {
                    this.компанияField = new КонтрагентТип();
                }
                return this.компанияField;
            }
            set {
                if ((this.компанияField != null)) {
                    if ((компанияField.Equals(value) != true)) {
                        this.компанияField = value;
                        this.OnPropertyChanged("Компания");
                    }
                }
                else {
                    this.компанияField = value;
                    this.OnPropertyChanged("Компания");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументЛизингОбязательстваОбязательствоДоговор Договор {
            get {
                if ((this.договорField == null)) {
                    this.договорField = new ФайлДокументЛизингОбязательстваОбязательствоДоговор();
                }
                return this.договорField;
            }
            set {
                if ((this.договорField != null)) {
                    if ((договорField.Equals(value) != true)) {
                        this.договорField = value;
                        this.OnPropertyChanged("Договор");
                    }
                }
                else {
                    this.договорField = value;
                    this.OnPropertyChanged("Договор");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Комментарий {
            get {
                return this.комментарийField;
            }
            set {
                if ((this.комментарийField != null)) {
                    if ((комментарийField.Equals(value) != true)) {
                        this.комментарийField = value;
                        this.OnPropertyChanged("Комментарий");
                    }
                }
                else {
                    this.комментарийField = value;
                    this.OnPropertyChanged("Комментарий");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Продукт {
            get {
                return this.продуктField;
            }
            set {
                if ((this.продуктField != null)) {
                    if ((продуктField.Equals(value) != true)) {
                        this.продуктField = value;
                        this.OnPropertyChanged("Продукт");
                    }
                }
                else {
                    this.продуктField = value;
                    this.OnPropertyChanged("Продукт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаПоДоговору {
            get {
                return this.суммаПоДоговоруField;
            }
            set {
                if ((this.суммаПоДоговоруField != null)) {
                    if ((суммаПоДоговоруField.Equals(value) != true)) {
                        this.суммаПоДоговоруField = value;
                        this.OnPropertyChanged("СуммаПоДоговору");
                    }
                }
                else {
                    this.суммаПоДоговоруField = value;
                    this.OnPropertyChanged("СуммаПоДоговору");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОстатокПлатежей {
            get {
                return this.остатокПлатежейField;
            }
            set {
                if ((this.остатокПлатежейField != null)) {
                    if ((остатокПлатежейField.Equals(value) != true)) {
                        this.остатокПлатежейField = value;
                        this.OnPropertyChanged("ОстатокПлатежей");
                    }
                }
                else {
                    this.остатокПлатежейField = value;
                    this.OnPropertyChanged("ОстатокПлатежей");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВалютаДоговора {
            get {
                return this.валютаДоговораField;
            }
            set {
                if ((this.валютаДоговораField != null)) {
                    if ((валютаДоговораField.Equals(value) != true)) {
                        this.валютаДоговораField = value;
                        this.OnPropertyChanged("ВалютаДоговора");
                    }
                }
                else {
                    this.валютаДоговораField = value;
                    this.OnPropertyChanged("ВалютаДоговора");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ПроцентнаяСтавка {
            get {
                return this.процентнаяСтавкаField;
            }
            set {
                if ((this.процентнаяСтавкаField != null)) {
                    if ((процентнаяСтавкаField.Equals(value) != true)) {
                        this.процентнаяСтавкаField = value;
                        this.OnPropertyChanged("ПроцентнаяСтавка");
                    }
                }
                else {
                    this.процентнаяСтавкаField = value;
                    this.OnPropertyChanged("ПроцентнаяСтавка");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ПроцентнаяСтавкаSpecified {
            get {
                return this.процентнаяСтавкаFieldSpecified;
            }
            set {
                if ((процентнаяСтавкаFieldSpecified.Equals(value) != true)) {
                    this.процентнаяСтавкаFieldSpecified = value;
                    this.OnPropertyChanged("ПроцентнаяСтавкаSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаПоследнегоПлатежа {
            get {
                return this.датаПоследнегоПлатежаField;
            }
            set {
                if ((this.датаПоследнегоПлатежаField != null)) {
                    if ((датаПоследнегоПлатежаField.Equals(value) != true)) {
                        this.датаПоследнегоПлатежаField = value;
                        this.OnPropertyChanged("ДатаПоследнегоПлатежа");
                    }
                }
                else {
                    this.датаПоследнегоПлатежаField = value;
                    this.OnPropertyChanged("ДатаПоследнегоПлатежа");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string УчетОбязательств {
            get {
                return this.учетОбязательствField;
            }
            set {
                if ((this.учетОбязательствField != null)) {
                    if ((учетОбязательствField.Equals(value) != true)) {
                        this.учетОбязательствField = value;
                        this.OnPropertyChanged("УчетОбязательств");
                    }
                }
                else {
                    this.учетОбязательствField = value;
                    this.OnPropertyChanged("УчетОбязательств");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаПлатежейНаСебестоимость {
            get {
                return this.суммаПлатежейНаСебестоимостьField;
            }
            set {
                if ((this.суммаПлатежейНаСебестоимостьField != null)) {
                    if ((суммаПлатежейНаСебестоимостьField.Equals(value) != true)) {
                        this.суммаПлатежейНаСебестоимостьField = value;
                        this.OnPropertyChanged("СуммаПлатежейНаСебестоимость");
                    }
                }
                else {
                    this.суммаПлатежейНаСебестоимостьField = value;
                    this.OnPropertyChanged("СуммаПлатежейНаСебестоимость");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаДогВал {
            get {
                return this.суммаДогВалField;
            }
            set {
                if ((this.суммаДогВалField != null)) {
                    if ((суммаДогВалField.Equals(value) != true)) {
                        this.суммаДогВалField = value;
                        this.OnPropertyChanged("СуммаДогВал");
                    }
                }
                else {
                    this.суммаДогВалField = value;
                    this.OnPropertyChanged("СуммаДогВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СуммаДогВалSpecified {
            get {
                return this.суммаДогВалFieldSpecified;
            }
            set {
                if ((суммаДогВалFieldSpecified.Equals(value) != true)) {
                    this.суммаДогВалFieldSpecified = value;
                    this.OnPropertyChanged("СуммаДогВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОстВал {
            get {
                return this.остВалField;
            }
            set {
                if ((this.остВалField != null)) {
                    if ((остВалField.Equals(value) != true)) {
                        this.остВалField = value;
                        this.OnPropertyChanged("ОстВал");
                    }
                }
                else {
                    this.остВалField = value;
                    this.OnPropertyChanged("ОстВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ОстВалSpecified {
            get {
                return this.остВалFieldSpecified;
            }
            set {
                if ((остВалFieldSpecified.Equals(value) != true)) {
                    this.остВалFieldSpecified = value;
                    this.OnPropertyChanged("ОстВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаПроср {
            get {
                return this.суммаПросрField;
            }
            set {
                if ((this.суммаПросрField != null)) {
                    if ((суммаПросрField.Equals(value) != true)) {
                        this.суммаПросрField = value;
                        this.OnPropertyChanged("СуммаПроср");
                    }
                }
                else {
                    this.суммаПросрField = value;
                    this.OnPropertyChanged("СуммаПроср");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СуммаПросрSpecified {
            get {
                return this.суммаПросрFieldSpecified;
            }
            set {
                if ((суммаПросрFieldSpecified.Equals(value) != true)) {
                    this.суммаПросрFieldSpecified = value;
                    this.OnPropertyChanged("СуммаПросрSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЛизингОбязательстваОбязательство));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КомпанияSpecified {
            get {
                return компанияFieldSpecified;
            }
            set {
                компанияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДоговорSpecified {
            get {
                return договорFieldSpecified;
            }
            set {
                договорFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментарийSpecified {
            get {
                return комментарийFieldSpecified;
            }
            set {
                комментарийFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПродуктSpecified {
            get {
                return продуктFieldSpecified;
            }
            set {
                продуктFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаПоДоговоруSpecified {
            get {
                return суммаПоДоговоруFieldSpecified;
            }
            set {
                суммаПоДоговоруFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОстатокПлатежейSpecified {
            get {
                return остатокПлатежейFieldSpecified;
            }
            set {
                остатокПлатежейFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВалютаДоговораSpecified {
            get {
                return валютаДоговораFieldSpecified;
            }
            set {
                валютаДоговораFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаПоследнегоПлатежаSpecified {
            get {
                return датаПоследнегоПлатежаFieldSpecified;
            }
            set {
                датаПоследнегоПлатежаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УчетОбязательствSpecified {
            get {
                return учетОбязательствFieldSpecified;
            }
            set {
                учетОбязательствFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаПлатежейНаСебестоимостьSpecified {
            get {
                return суммаПлатежейНаСебестоимостьFieldSpecified;
            }
            set {
                суммаПлатежейНаСебестоимостьFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЛизингОбязательстваОбязательство object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЛизингОбязательстваОбязательство object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЛизингОбязательстваОбязательство object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЛизингОбязательстваОбязательство obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЛизингОбязательстваОбязательство);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЛизингОбязательстваОбязательство obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЛизингОбязательстваОбязательство Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЛизингОбязательстваОбязательство)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЛизингОбязательстваОбязательство object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЛизингОбязательстваОбязательство object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЛизингОбязательстваОбязательство object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЛизингОбязательстваОбязательство obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЛизингОбязательстваОбязательство);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЛизингОбязательстваОбязательство obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЛизингОбязательстваОбязательство LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЛизингОбязательстваОбязательствоДоговор : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа> датаПлатежаField;
        
        private string номерField;
        
        private string датаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool датаПлатежаFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool датаFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ДатаПлатежа", Order=0)]
        public List<ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа> ДатаПлатежа {
            get {
                if ((this.датаПлатежаField == null)) {
                    this.датаПлатежаField = new List<ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа>();
                }
                return this.датаПлатежаField;
            }
            set {
                if ((this.датаПлатежаField != null)) {
                    if ((датаПлатежаField.Equals(value) != true)) {
                        this.датаПлатежаField = value;
                        this.OnPropertyChanged("ДатаПлатежа");
                    }
                }
                else {
                    this.датаПлатежаField = value;
                    this.OnPropertyChanged("ДатаПлатежа");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЛизингОбязательстваОбязательствоДоговор));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаПлатежаSpecified {
            get {
                return датаПлатежаFieldSpecified;
            }
            set {
                датаПлатежаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЛизингОбязательстваОбязательствоДоговор object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЛизингОбязательстваОбязательствоДоговор object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЛизингОбязательстваОбязательствоДоговор object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЛизингОбязательстваОбязательствоДоговор obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЛизингОбязательстваОбязательствоДоговор);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЛизингОбязательстваОбязательствоДоговор obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЛизингОбязательстваОбязательствоДоговор Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЛизингОбязательстваОбязательствоДоговор)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЛизингОбязательстваОбязательствоДоговор object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЛизингОбязательстваОбязательствоДоговор object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЛизингОбязательстваОбязательствоДоговор object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЛизингОбязательстваОбязательствоДоговор obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЛизингОбязательстваОбязательствоДоговор);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЛизингОбязательстваОбязательствоДоговор obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЛизингОбязательстваОбязательствоДоговор LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа : System.ComponentModel.INotifyPropertyChanged {
        
        private string датаField;
        
        private decimal суммаField;
        
        private decimal оснДолгField;
        
        private bool оснДолгFieldSpecified;
        
        private decimal суммаВалField;
        
        private bool суммаВалFieldSpecified;
        
        private decimal оснДолгВалField;
        
        private bool оснДолгВалFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool датаFieldSpecified;
        
        private bool суммаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Сумма {
            get {
                return this.суммаField;
            }
            set {
                if ((this.суммаField != null)) {
                    if ((суммаField.Equals(value) != true)) {
                        this.суммаField = value;
                        this.OnPropertyChanged("Сумма");
                    }
                }
                else {
                    this.суммаField = value;
                    this.OnPropertyChanged("Сумма");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОснДолг {
            get {
                return this.оснДолгField;
            }
            set {
                if ((this.оснДолгField != null)) {
                    if ((оснДолгField.Equals(value) != true)) {
                        this.оснДолгField = value;
                        this.OnPropertyChanged("ОснДолг");
                    }
                }
                else {
                    this.оснДолгField = value;
                    this.OnPropertyChanged("ОснДолг");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ОснДолгSpecified {
            get {
                return this.оснДолгFieldSpecified;
            }
            set {
                if ((оснДолгFieldSpecified.Equals(value) != true)) {
                    this.оснДолгFieldSpecified = value;
                    this.OnPropertyChanged("ОснДолгSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаВал {
            get {
                return this.суммаВалField;
            }
            set {
                if ((this.суммаВалField != null)) {
                    if ((суммаВалField.Equals(value) != true)) {
                        this.суммаВалField = value;
                        this.OnPropertyChanged("СуммаВал");
                    }
                }
                else {
                    this.суммаВалField = value;
                    this.OnPropertyChanged("СуммаВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СуммаВалSpecified {
            get {
                return this.суммаВалFieldSpecified;
            }
            set {
                if ((суммаВалFieldSpecified.Equals(value) != true)) {
                    this.суммаВалFieldSpecified = value;
                    this.OnPropertyChanged("СуммаВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОснДолгВал {
            get {
                return this.оснДолгВалField;
            }
            set {
                if ((this.оснДолгВалField != null)) {
                    if ((оснДолгВалField.Equals(value) != true)) {
                        this.оснДолгВалField = value;
                        this.OnPropertyChanged("ОснДолгВал");
                    }
                }
                else {
                    this.оснДолгВалField = value;
                    this.OnPropertyChanged("ОснДолгВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ОснДолгВалSpecified {
            get {
                return this.оснДолгВалFieldSpecified;
            }
            set {
                if ((оснДолгВалFieldSpecified.Equals(value) != true)) {
                    this.оснДолгВалFieldSpecified = value;
                    this.OnPropertyChanged("ОснДолгВалSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаSpecified {
            get {
                return суммаFieldSpecified;
            }
            set {
                суммаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЛизингОбязательстваОбязательствоДоговорДатаПлатежа LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументЛизингОбязательстваПлат : System.ComponentModel.INotifyPropertyChanged {
        
        private string годField;
        
        private ФайлДокументЛизингОбязательстваПлатКвартал кварталField;
        
        private decimal суммаПлатField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool годFieldSpecified;
        
        private bool кварталFieldSpecified;
        
        private bool суммаПлатFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Год {
            get {
                return this.годField;
            }
            set {
                if ((this.годField != null)) {
                    if ((годField.Equals(value) != true)) {
                        this.годField = value;
                        this.OnPropertyChanged("Год");
                    }
                }
                else {
                    this.годField = value;
                    this.OnPropertyChanged("Год");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументЛизингОбязательстваПлатКвартал Квартал {
            get {
                return this.кварталField;
            }
            set {
                if ((кварталField.Equals(value) != true)) {
                    this.кварталField = value;
                    this.OnPropertyChanged("Квартал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаПлат {
            get {
                return this.суммаПлатField;
            }
            set {
                if ((this.суммаПлатField != null)) {
                    if ((суммаПлатField.Equals(value) != true)) {
                        this.суммаПлатField = value;
                        this.OnPropertyChanged("СуммаПлат");
                    }
                }
                else {
                    this.суммаПлатField = value;
                    this.OnPropertyChanged("СуммаПлат");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументЛизингОбязательстваПлат));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ГодSpecified {
            get {
                return годFieldSpecified;
            }
            set {
                годFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КварталSpecified {
            get {
                return кварталFieldSpecified;
            }
            set {
                кварталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаПлатSpecified {
            get {
                return суммаПлатFieldSpecified;
            }
            set {
                суммаПлатFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументЛизингОбязательстваПлат object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументЛизингОбязательстваПлат object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументЛизингОбязательстваПлат object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументЛизингОбязательстваПлат obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЛизингОбязательстваПлат);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументЛизингОбязательстваПлат obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументЛизингОбязательстваПлат Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументЛизингОбязательстваПлат)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументЛизингОбязательстваПлат object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументЛизингОбязательстваПлат object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументЛизингОбязательстваПлат object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументЛизингОбязательстваПлат obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументЛизингОбязательстваПлат);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументЛизингОбязательстваПлат obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументЛизингОбязательстваПлат LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументЛизингОбязательстваПлатКвартал {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументЛизингОбязательстваОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДенежныеСредства : System.ComponentModel.INotifyPropertyChanged {
        
        private List<АнализСчетаСТочностью3ТипСтрокаАнализа> анализ_50Field;
        
        private List<АнализСчетаСТочностью3ТипСтрокаАнализа> анализ_51Field;
        
        private List<АнализСчетаСТочностью3ТипСтрокаАнализа> анализ_52Field;
        
        private List<АнализСчетаСТочностью3ТипСтрокаАнализа> анализ_55Field;
        
        private ПериодМесяцТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументДенежныеСредстваОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool анализ_50FieldSpecified;
        
        private bool анализ_51FieldSpecified;
        
        private bool анализ_52FieldSpecified;
        
        private bool анализ_55FieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("СтрокаАнализа", IsNullable=false)]
        public List<АнализСчетаСТочностью3ТипСтрокаАнализа> Анализ_50 {
            get {
                if ((this.анализ_50Field == null)) {
                    this.анализ_50Field = new List<АнализСчетаСТочностью3ТипСтрокаАнализа>();
                }
                return this.анализ_50Field;
            }
            set {
                if ((this.анализ_50Field != null)) {
                    if ((анализ_50Field.Equals(value) != true)) {
                        this.анализ_50Field = value;
                        this.OnPropertyChanged("Анализ_50");
                    }
                }
                else {
                    this.анализ_50Field = value;
                    this.OnPropertyChanged("Анализ_50");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("СтрокаАнализа", IsNullable=false)]
        public List<АнализСчетаСТочностью3ТипСтрокаАнализа> Анализ_51 {
            get {
                if ((this.анализ_51Field == null)) {
                    this.анализ_51Field = new List<АнализСчетаСТочностью3ТипСтрокаАнализа>();
                }
                return this.анализ_51Field;
            }
            set {
                if ((this.анализ_51Field != null)) {
                    if ((анализ_51Field.Equals(value) != true)) {
                        this.анализ_51Field = value;
                        this.OnPropertyChanged("Анализ_51");
                    }
                }
                else {
                    this.анализ_51Field = value;
                    this.OnPropertyChanged("Анализ_51");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("СтрокаАнализа", IsNullable=false)]
        public List<АнализСчетаСТочностью3ТипСтрокаАнализа> Анализ_52 {
            get {
                if ((this.анализ_52Field == null)) {
                    this.анализ_52Field = new List<АнализСчетаСТочностью3ТипСтрокаАнализа>();
                }
                return this.анализ_52Field;
            }
            set {
                if ((this.анализ_52Field != null)) {
                    if ((анализ_52Field.Equals(value) != true)) {
                        this.анализ_52Field = value;
                        this.OnPropertyChanged("Анализ_52");
                    }
                }
                else {
                    this.анализ_52Field = value;
                    this.OnPropertyChanged("Анализ_52");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("СтрокаАнализа", IsNullable=false)]
        public List<АнализСчетаСТочностью3ТипСтрокаАнализа> Анализ_55 {
            get {
                if ((this.анализ_55Field == null)) {
                    this.анализ_55Field = new List<АнализСчетаСТочностью3ТипСтрокаАнализа>();
                }
                return this.анализ_55Field;
            }
            set {
                if ((this.анализ_55Field != null)) {
                    if ((анализ_55Field.Equals(value) != true)) {
                        this.анализ_55Field = value;
                        this.OnPropertyChanged("Анализ_55");
                    }
                }
                else {
                    this.анализ_55Field = value;
                    this.OnPropertyChanged("Анализ_55");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодМесяцТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументДенежныеСредстваОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДенежныеСредства));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool Анализ_50Specified {
            get {
                return анализ_50FieldSpecified;
            }
            set {
                анализ_50FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool Анализ_51Specified {
            get {
                return анализ_51FieldSpecified;
            }
            set {
                анализ_51FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool Анализ_52Specified {
            get {
                return анализ_52FieldSpecified;
            }
            set {
                анализ_52FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool Анализ_55Specified {
            get {
                return анализ_55FieldSpecified;
            }
            set {
                анализ_55FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДенежныеСредства object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДенежныеСредства object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДенежныеСредства object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДенежныеСредства obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДенежныеСредства);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДенежныеСредства obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДенежныеСредства Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДенежныеСредства)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДенежныеСредства object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДенежныеСредства object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДенежныеСредства object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДенежныеСредства obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДенежныеСредства);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДенежныеСредства obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДенежныеСредства LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class АнализСчетаСТочностью3ТипСтрокаАнализа : System.ComponentModel.INotifyPropertyChanged {
        
        private АнализСчетаСТочностью3ТипСтрокаАнализаСчет счетField;
        
        private List<АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция> корреспонденцияField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool счетFieldSpecified;
        
        private bool корреспонденцияFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public АнализСчетаСТочностью3ТипСтрокаАнализаСчет Счет {
            get {
                if ((this.счетField == null)) {
                    this.счетField = new АнализСчетаСТочностью3ТипСтрокаАнализаСчет();
                }
                return this.счетField;
            }
            set {
                if ((this.счетField != null)) {
                    if ((счетField.Equals(value) != true)) {
                        this.счетField = value;
                        this.OnPropertyChanged("Счет");
                    }
                }
                else {
                    this.счетField = value;
                    this.OnPropertyChanged("Счет");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Корреспонденция", Order=1)]
        public List<АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция> Корреспонденция {
            get {
                if ((this.корреспонденцияField == null)) {
                    this.корреспонденцияField = new List<АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция>();
                }
                return this.корреспонденцияField;
            }
            set {
                if ((this.корреспонденцияField != null)) {
                    if ((корреспонденцияField.Equals(value) != true)) {
                        this.корреспонденцияField = value;
                        this.OnPropertyChanged("Корреспонденция");
                    }
                }
                else {
                    this.корреспонденцияField = value;
                    this.OnPropertyChanged("Корреспонденция");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АнализСчетаСТочностью3ТипСтрокаАнализа));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СчетSpecified {
            get {
                return счетFieldSpecified;
            }
            set {
                счетFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КорреспонденцияSpecified {
            get {
                return корреспонденцияFieldSpecified;
            }
            set {
                корреспонденцияFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3ТипСтрокаАнализа object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an АнализСчетаСТочностью3ТипСтрокаАнализа object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3ТипСтрокаАнализа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3ТипСтрокаАнализа obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3ТипСтрокаАнализа);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3ТипСтрокаАнализа obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3ТипСтрокаАнализа Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((АнализСчетаСТочностью3ТипСтрокаАнализа)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3ТипСтрокаАнализа object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an АнализСчетаСТочностью3ТипСтрокаАнализа object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3ТипСтрокаАнализа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3ТипСтрокаАнализа obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3ТипСтрокаАнализа);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3ТипСтрокаАнализа obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3ТипСтрокаАнализа LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class АнализСчетаСТочностью3ТипСтрокаАнализаСчет : System.ComponentModel.INotifyPropertyChanged {
        
        private List<АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто> субконтоField;
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаField;
        
        private string кодСчетаРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРField;
        
        private bool типСчетаРFieldSpecified;
        
        private string кодСчетаРРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРРField;
        
        private bool типСчетаРРFieldSpecified;
        
        private decimal сНДField;
        
        private decimal сНКField;
        
        private decimal доField;
        
        private decimal коField;
        
        private decimal сКДField;
        
        private decimal сККField;
        
        private string периодГодField;
        
        private string периодМесяцField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool субконтоFieldSpecified;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        private bool типСчетаFieldSpecified;
        
        private bool кодСчетаРFieldSpecified;
        
        private bool кодСчетаРРFieldSpecified;
        
        private bool сНДFieldSpecified;
        
        private bool сНКFieldSpecified;
        
        private bool дОFieldSpecified;
        
        private bool кОFieldSpecified;
        
        private bool сКДFieldSpecified;
        
        private bool сККFieldSpecified;
        
        private bool периодГодFieldSpecified;
        
        private bool периодМесяцFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Субконто", Order=0)]
        public List<АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто> Субконто {
            get {
                if ((this.субконтоField == null)) {
                    this.субконтоField = new List<АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто>();
                }
                return this.субконтоField;
            }
            set {
                if ((this.субконтоField != null)) {
                    if ((субконтоField.Equals(value) != true)) {
                        this.субконтоField = value;
                        this.OnPropertyChanged("Субконто");
                    }
                }
                else {
                    this.субконтоField = value;
                    this.OnPropertyChanged("Субконто");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчета {
            get {
                return this.типСчетаField;
            }
            set {
                if ((типСчетаField.Equals(value) != true)) {
                    this.типСчетаField = value;
                    this.OnPropertyChanged("ТипСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаР {
            get {
                return this.кодСчетаРField;
            }
            set {
                if ((this.кодСчетаРField != null)) {
                    if ((кодСчетаРField.Equals(value) != true)) {
                        this.кодСчетаРField = value;
                        this.OnPropertyChanged("КодСчетаР");
                    }
                }
                else {
                    this.кодСчетаРField = value;
                    this.OnPropertyChanged("КодСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаР {
            get {
                return this.типСчетаРField;
            }
            set {
                if ((типСчетаРField.Equals(value) != true)) {
                    this.типСчетаРField = value;
                    this.OnPropertyChanged("ТипСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРSpecified {
            get {
                return this.типСчетаРFieldSpecified;
            }
            set {
                if ((типСчетаРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаРР {
            get {
                return this.кодСчетаРРField;
            }
            set {
                if ((this.кодСчетаРРField != null)) {
                    if ((кодСчетаРРField.Equals(value) != true)) {
                        this.кодСчетаРРField = value;
                        this.OnPropertyChanged("КодСчетаРР");
                    }
                }
                else {
                    this.кодСчетаРРField = value;
                    this.OnPropertyChanged("КодСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаРР {
            get {
                return this.типСчетаРРField;
            }
            set {
                if ((типСчетаРРField.Equals(value) != true)) {
                    this.типСчетаРРField = value;
                    this.OnPropertyChanged("ТипСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРРSpecified {
            get {
                return this.типСчетаРРFieldSpecified;
            }
            set {
                if ((типСчетаРРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНД {
            get {
                return this.сНДField;
            }
            set {
                if ((this.сНДField != null)) {
                    if ((сНДField.Equals(value) != true)) {
                        this.сНДField = value;
                        this.OnPropertyChanged("СНД");
                    }
                }
                else {
                    this.сНДField = value;
                    this.OnPropertyChanged("СНД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНК {
            get {
                return this.сНКField;
            }
            set {
                if ((this.сНКField != null)) {
                    if ((сНКField.Equals(value) != true)) {
                        this.сНКField = value;
                        this.OnPropertyChanged("СНК");
                    }
                }
                else {
                    this.сНКField = value;
                    this.OnPropertyChanged("СНК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДО {
            get {
                return this.доField;
            }
            set {
                if ((this.доField != null)) {
                    if ((доField.Equals(value) != true)) {
                        this.доField = value;
                        this.OnPropertyChanged("ДО");
                    }
                }
                else {
                    this.доField = value;
                    this.OnPropertyChanged("ДО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal КО {
            get {
                return this.коField;
            }
            set {
                if ((this.коField != null)) {
                    if ((коField.Equals(value) != true)) {
                        this.коField = value;
                        this.OnPropertyChanged("КО");
                    }
                }
                else {
                    this.коField = value;
                    this.OnPropertyChanged("КО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКД {
            get {
                return this.сКДField;
            }
            set {
                if ((this.сКДField != null)) {
                    if ((сКДField.Equals(value) != true)) {
                        this.сКДField = value;
                        this.OnPropertyChanged("СКД");
                    }
                }
                else {
                    this.сКДField = value;
                    this.OnPropertyChanged("СКД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКК {
            get {
                return this.сККField;
            }
            set {
                if ((this.сККField != null)) {
                    if ((сККField.Equals(value) != true)) {
                        this.сККField = value;
                        this.OnPropertyChanged("СКК");
                    }
                }
                else {
                    this.сККField = value;
                    this.OnPropertyChanged("СКК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ПериодГод {
            get {
                return this.периодГодField;
            }
            set {
                if ((this.периодГодField != null)) {
                    if ((периодГодField.Equals(value) != true)) {
                        this.периодГодField = value;
                        this.OnPropertyChanged("ПериодГод");
                    }
                }
                else {
                    this.периодГодField = value;
                    this.OnPropertyChanged("ПериодГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ПериодМесяц {
            get {
                return this.периодМесяцField;
            }
            set {
                if ((this.периодМесяцField != null)) {
                    if ((периодМесяцField.Equals(value) != true)) {
                        this.периодМесяцField = value;
                        this.OnPropertyChanged("ПериодМесяц");
                    }
                }
                else {
                    this.периодМесяцField = value;
                    this.OnPropertyChanged("ПериодМесяц");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АнализСчетаСТочностью3ТипСтрокаАнализаСчет));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СубконтоSpecified {
            get {
                return субконтоFieldSpecified;
            }
            set {
                субконтоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипСчетаSpecified {
            get {
                return типСчетаFieldSpecified;
            }
            set {
                типСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРSpecified {
            get {
                return кодСчетаРFieldSpecified;
            }
            set {
                кодСчетаРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРРSpecified {
            get {
                return кодСчетаРРFieldSpecified;
            }
            set {
                кодСчетаРРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНДSpecified {
            get {
                return сНДFieldSpecified;
            }
            set {
                сНДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНКSpecified {
            get {
                return сНКFieldSpecified;
            }
            set {
                сНКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДОSpecified {
            get {
                return дОFieldSpecified;
            }
            set {
                дОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КОSpecified {
            get {
                return кОFieldSpecified;
            }
            set {
                кОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СКДSpecified {
            get {
                return сКДFieldSpecified;
            }
            set {
                сКДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СККSpecified {
            get {
                return сККFieldSpecified;
            }
            set {
                сККFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодГодSpecified {
            get {
                return периодГодFieldSpecified;
            }
            set {
                периодГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодМесяцSpecified {
            get {
                return периодМесяцFieldSpecified;
            }
            set {
                периодМесяцFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3ТипСтрокаАнализаСчет object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an АнализСчетаСТочностью3ТипСтрокаАнализаСчет object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3ТипСтрокаАнализаСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3ТипСтрокаАнализаСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3ТипСтрокаАнализаСчет);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3ТипСтрокаАнализаСчет obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3ТипСтрокаАнализаСчет Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((АнализСчетаСТочностью3ТипСтрокаАнализаСчет)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3ТипСтрокаАнализаСчет object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an АнализСчетаСТочностью3ТипСтрокаАнализаСчет object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3ТипСтрокаАнализаСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3ТипСтрокаАнализаСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3ТипСтрокаАнализаСчет);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3ТипСтрокаАнализаСчет obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3ТипСтрокаАнализаСчет LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто : System.ComponentModel.INotifyPropertyChanged {
        
        private object itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool itemFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("БанковскийСчет", typeof(БанковскийСчетТип), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ОсновноеСредство", typeof(АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство), Order=0)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ItemSpecified {
            get {
                return itemFieldSpecified;
            }
            set {
                itemFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконто LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство : System.ComponentModel.INotifyPropertyChanged {
        
        private string наименованиеField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наименованиеFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3ТипСтрокаАнализаСчетСубконтоОсновноеСредство LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаField;
        
        private string кодСчетаРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРField;
        
        private bool типСчетаРFieldSpecified;
        
        private string кодСчетаРРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРРField;
        
        private bool типСчетаРРFieldSpecified;
        
        private decimal доField;
        
        private decimal коField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        private bool типСчетаFieldSpecified;
        
        private bool кодСчетаРFieldSpecified;
        
        private bool кодСчетаРРFieldSpecified;
        
        private bool дОFieldSpecified;
        
        private bool кОFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчета {
            get {
                return this.типСчетаField;
            }
            set {
                if ((типСчетаField.Equals(value) != true)) {
                    this.типСчетаField = value;
                    this.OnPropertyChanged("ТипСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаР {
            get {
                return this.кодСчетаРField;
            }
            set {
                if ((this.кодСчетаРField != null)) {
                    if ((кодСчетаРField.Equals(value) != true)) {
                        this.кодСчетаРField = value;
                        this.OnPropertyChanged("КодСчетаР");
                    }
                }
                else {
                    this.кодСчетаРField = value;
                    this.OnPropertyChanged("КодСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаР {
            get {
                return this.типСчетаРField;
            }
            set {
                if ((типСчетаРField.Equals(value) != true)) {
                    this.типСчетаРField = value;
                    this.OnPropertyChanged("ТипСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРSpecified {
            get {
                return this.типСчетаРFieldSpecified;
            }
            set {
                if ((типСчетаРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаРР {
            get {
                return this.кодСчетаРРField;
            }
            set {
                if ((this.кодСчетаРРField != null)) {
                    if ((кодСчетаРРField.Equals(value) != true)) {
                        this.кодСчетаРРField = value;
                        this.OnPropertyChanged("КодСчетаРР");
                    }
                }
                else {
                    this.кодСчетаРРField = value;
                    this.OnPropertyChanged("КодСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаРР {
            get {
                return this.типСчетаРРField;
            }
            set {
                if ((типСчетаРРField.Equals(value) != true)) {
                    this.типСчетаРРField = value;
                    this.OnPropertyChanged("ТипСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРРSpecified {
            get {
                return this.типСчетаРРFieldSpecified;
            }
            set {
                if ((типСчетаРРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДО {
            get {
                return this.доField;
            }
            set {
                if ((this.доField != null)) {
                    if ((доField.Equals(value) != true)) {
                        this.доField = value;
                        this.OnPropertyChanged("ДО");
                    }
                }
                else {
                    this.доField = value;
                    this.OnPropertyChanged("ДО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal КО {
            get {
                return this.коField;
            }
            set {
                if ((this.коField != null)) {
                    if ((коField.Equals(value) != true)) {
                        this.коField = value;
                        this.OnPropertyChanged("КО");
                    }
                }
                else {
                    this.коField = value;
                    this.OnPropertyChanged("КО");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипСчетаSpecified {
            get {
                return типСчетаFieldSpecified;
            }
            set {
                типСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРSpecified {
            get {
                return кодСчетаРFieldSpecified;
            }
            set {
                кодСчетаРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРРSpecified {
            get {
                return кодСчетаРРFieldSpecified;
            }
            set {
                кодСчетаРРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДОSpecified {
            get {
                return дОFieldSpecified;
            }
            set {
                дОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КОSpecified {
            get {
                return кОFieldSpecified;
            }
            set {
                кОFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3ТипСтрокаАнализаКорреспонденция LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum ПериодМесяцТип {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("21")]
        Item21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("31")]
        Item31,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("33")]
        Item33,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("34")]
        Item34,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("35")]
        Item35,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("36")]
        Item36,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("38")]
        Item38,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("39")]
        Item39,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("41")]
        Item41,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("42")]
        Item42,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("44")]
        Item44,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("45")]
        Item45,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументДенежныеСредстваОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("385")]
        Item385,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОСВ : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументОСВСчет> счетField;
        
        private ПериодМесяцТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументОСВОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool счетFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Счет", Order=0)]
        public List<ФайлДокументОСВСчет> Счет {
            get {
                if ((this.счетField == null)) {
                    this.счетField = new List<ФайлДокументОСВСчет>();
                }
                return this.счетField;
            }
            set {
                if ((this.счетField != null)) {
                    if ((счетField.Equals(value) != true)) {
                        this.счетField = value;
                        this.OnPropertyChanged("Счет");
                    }
                }
                else {
                    this.счетField = value;
                    this.OnPropertyChanged("Счет");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодМесяцТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументОСВОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОСВ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СчетSpecified {
            get {
                return счетFieldSpecified;
            }
            set {
                счетFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОСВ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОСВ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОСВ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОСВ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОСВ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОСВ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОСВ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОСВ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОСВ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОСВСчет : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаField;
        
        private string кодСчетаРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРField;
        
        private bool типСчетаРFieldSpecified;
        
        private string кодСчетаРРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРРField;
        
        private bool типСчетаРРFieldSpecified;
        
        private decimal сНДField;
        
        private decimal сНКField;
        
        private decimal доField;
        
        private decimal коField;
        
        private decimal сКДField;
        
        private decimal сККField;
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        private bool типСчетаFieldSpecified;
        
        private bool кодСчетаРFieldSpecified;
        
        private bool кодСчетаРРFieldSpecified;
        
        private bool сНДFieldSpecified;
        
        private bool сНКFieldSpecified;
        
        private bool дОFieldSpecified;
        
        private bool кОFieldSpecified;
        
        private bool сКДFieldSpecified;
        
        private bool сККFieldSpecified;
        
        private bool valueFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчета {
            get {
                return this.типСчетаField;
            }
            set {
                if ((типСчетаField.Equals(value) != true)) {
                    this.типСчетаField = value;
                    this.OnPropertyChanged("ТипСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаР {
            get {
                return this.кодСчетаРField;
            }
            set {
                if ((this.кодСчетаРField != null)) {
                    if ((кодСчетаРField.Equals(value) != true)) {
                        this.кодСчетаРField = value;
                        this.OnPropertyChanged("КодСчетаР");
                    }
                }
                else {
                    this.кодСчетаРField = value;
                    this.OnPropertyChanged("КодСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаР {
            get {
                return this.типСчетаРField;
            }
            set {
                if ((типСчетаРField.Equals(value) != true)) {
                    this.типСчетаРField = value;
                    this.OnPropertyChanged("ТипСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРSpecified {
            get {
                return this.типСчетаРFieldSpecified;
            }
            set {
                if ((типСчетаРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаРР {
            get {
                return this.кодСчетаРРField;
            }
            set {
                if ((this.кодСчетаРРField != null)) {
                    if ((кодСчетаРРField.Equals(value) != true)) {
                        this.кодСчетаРРField = value;
                        this.OnPropertyChanged("КодСчетаРР");
                    }
                }
                else {
                    this.кодСчетаРРField = value;
                    this.OnPropertyChanged("КодСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаРР {
            get {
                return this.типСчетаРРField;
            }
            set {
                if ((типСчетаРРField.Equals(value) != true)) {
                    this.типСчетаРРField = value;
                    this.OnPropertyChanged("ТипСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРРSpecified {
            get {
                return this.типСчетаРРFieldSpecified;
            }
            set {
                if ((типСчетаРРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНД {
            get {
                return this.сНДField;
            }
            set {
                if ((this.сНДField != null)) {
                    if ((сНДField.Equals(value) != true)) {
                        this.сНДField = value;
                        this.OnPropertyChanged("СНД");
                    }
                }
                else {
                    this.сНДField = value;
                    this.OnPropertyChanged("СНД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНК {
            get {
                return this.сНКField;
            }
            set {
                if ((this.сНКField != null)) {
                    if ((сНКField.Equals(value) != true)) {
                        this.сНКField = value;
                        this.OnPropertyChanged("СНК");
                    }
                }
                else {
                    this.сНКField = value;
                    this.OnPropertyChanged("СНК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДО {
            get {
                return this.доField;
            }
            set {
                if ((this.доField != null)) {
                    if ((доField.Equals(value) != true)) {
                        this.доField = value;
                        this.OnPropertyChanged("ДО");
                    }
                }
                else {
                    this.доField = value;
                    this.OnPropertyChanged("ДО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal КО {
            get {
                return this.коField;
            }
            set {
                if ((this.коField != null)) {
                    if ((коField.Equals(value) != true)) {
                        this.коField = value;
                        this.OnPropertyChanged("КО");
                    }
                }
                else {
                    this.коField = value;
                    this.OnPropertyChanged("КО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКД {
            get {
                return this.сКДField;
            }
            set {
                if ((this.сКДField != null)) {
                    if ((сКДField.Equals(value) != true)) {
                        this.сКДField = value;
                        this.OnPropertyChanged("СКД");
                    }
                }
                else {
                    this.сКДField = value;
                    this.OnPropertyChanged("СКД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКК {
            get {
                return this.сККField;
            }
            set {
                if ((this.сККField != null)) {
                    if ((сККField.Equals(value) != true)) {
                        this.сККField = value;
                        this.OnPropertyChanged("СКК");
                    }
                }
                else {
                    this.сККField = value;
                    this.OnPropertyChanged("СКК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("Value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОСВСчет));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипСчетаSpecified {
            get {
                return типСчетаFieldSpecified;
            }
            set {
                типСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРSpecified {
            get {
                return кодСчетаРFieldSpecified;
            }
            set {
                кодСчетаРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРРSpecified {
            get {
                return кодСчетаРРFieldSpecified;
            }
            set {
                кодСчетаРРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНДSpecified {
            get {
                return сНДFieldSpecified;
            }
            set {
                сНДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНКSpecified {
            get {
                return сНКFieldSpecified;
            }
            set {
                сНКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДОSpecified {
            get {
                return дОFieldSpecified;
            }
            set {
                дОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КОSpecified {
            get {
                return кОFieldSpecified;
            }
            set {
                кОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СКДSpecified {
            get {
                return сКДFieldSpecified;
            }
            set {
                сКДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СККSpecified {
            get {
                return сККFieldSpecified;
            }
            set {
                сККFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ValueSpecified {
            get {
                return valueFieldSpecified;
            }
            set {
                valueFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОСВСчет object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОСВСчет object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОСВСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВСчет);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОСВСчет obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОСВСчет Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОСВСчет)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОСВСчет object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОСВСчет object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВСчет);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВСчет obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОСВСчет LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументОСВОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("383")]
        Item383,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОСВПоСчетам : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументОСВПоСчетамОСВПоСчету> оСВПоСчетуField;
        
        private ПериодМесяцТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументОСВПоСчетамОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool оСВПоСчетуFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ОСВПоСчету", Order=0)]
        public List<ФайлДокументОСВПоСчетамОСВПоСчету> ОСВПоСчету {
            get {
                if ((this.оСВПоСчетуField == null)) {
                    this.оСВПоСчетуField = new List<ФайлДокументОСВПоСчетамОСВПоСчету>();
                }
                return this.оСВПоСчетуField;
            }
            set {
                if ((this.оСВПоСчетуField != null)) {
                    if ((оСВПоСчетуField.Equals(value) != true)) {
                        this.оСВПоСчетуField = value;
                        this.OnPropertyChanged("ОСВПоСчету");
                    }
                }
                else {
                    this.оСВПоСчетуField = value;
                    this.OnPropertyChanged("ОСВПоСчету");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодМесяцТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументОСВПоСчетамОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОСВПоСчетам));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ОСВПоСчетуSpecified {
            get {
                return оСВПоСчетуFieldSpecified;
            }
            set {
                оСВПоСчетуFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОСВПоСчетам object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОСВПоСчетам object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВПоСчетам object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОСВПоСчетам obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВПоСчетам);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОСВПоСчетам obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОСВПоСчетам Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОСВПоСчетам)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОСВПоСчетам object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОСВПоСчетам object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВПоСчетам object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВПоСчетам obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВПоСчетам);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВПоСчетам obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОСВПоСчетам LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОСВПоСчетамОСВПоСчету : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ> строкаОСВField;
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool строкаОСВFieldSpecified;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("СтрокаОСВ", Order=0)]
        public List<ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ> СтрокаОСВ {
            get {
                if ((this.строкаОСВField == null)) {
                    this.строкаОСВField = new List<ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ>();
                }
                return this.строкаОСВField;
            }
            set {
                if ((this.строкаОСВField != null)) {
                    if ((строкаОСВField.Equals(value) != true)) {
                        this.строкаОСВField = value;
                        this.OnPropertyChanged("СтрокаОСВ");
                    }
                }
                else {
                    this.строкаОСВField = value;
                    this.OnPropertyChanged("СтрокаОСВ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОСВПоСчетамОСВПоСчету));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СтрокаОСВSpecified {
            get {
                return строкаОСВFieldSpecified;
            }
            set {
                строкаОСВFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОСВПоСчетамОСВПоСчету object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОСВПоСчетамОСВПоСчету object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВПоСчетамОСВПоСчету object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОСВПоСчетамОСВПоСчету obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВПоСчетамОСВПоСчету);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОСВПоСчетамОСВПоСчету obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОСВПоСчетамОСВПоСчету Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОСВПоСчетамОСВПоСчету)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОСВПоСчетамОСВПоСчету object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОСВПоСчетамОСВПоСчету object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВПоСчетамОСВПоСчету object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВПоСчетамОСВПоСчету obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВПоСчетамОСВПоСчету);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВПоСчетамОСВПоСчету obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОСВПоСчетамОСВПоСчету LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет счетField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool счетFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет Счет {
            get {
                if ((this.счетField == null)) {
                    this.счетField = new ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет();
                }
                return this.счетField;
            }
            set {
                if ((this.счетField != null)) {
                    if ((счетField.Equals(value) != true)) {
                        this.счетField = value;
                        this.OnPropertyChanged("Счет");
                    }
                }
                else {
                    this.счетField = value;
                    this.OnPropertyChanged("Счет");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СчетSpecified {
            get {
                return счетFieldSpecified;
            }
            set {
                счетFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет : System.ComponentModel.INotifyPropertyChanged {
        
        private СубконтоПоПредставлениюТип субконто1Field;
        
        private СубконтоПоПредставлениюТип субконто2Field;
        
        private СубконтоПоПредставлениюТип субконто3Field;
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаField;
        
        private string кодСчетаРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРField;
        
        private bool типСчетаРFieldSpecified;
        
        private string кодСчетаРРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРРField;
        
        private bool типСчетаРРFieldSpecified;
        
        private decimal сНДField;
        
        private decimal сНКField;
        
        private decimal доField;
        
        private decimal коField;
        
        private decimal сКДField;
        
        private decimal сККField;
        
        private string срокОплатыПоДоговоруField;
        
        private decimal процентнаяСтавкаField;
        
        private bool процентнаяСтавкаFieldSpecified;
        
        private ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчетРежимПогашения режимПогашенияField;
        
        private bool режимПогашенияFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool субконто1FieldSpecified;
        
        private bool субконто2FieldSpecified;
        
        private bool субконто3FieldSpecified;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        private bool типСчетаFieldSpecified;
        
        private bool кодСчетаРFieldSpecified;
        
        private bool кодСчетаРРFieldSpecified;
        
        private bool сНДFieldSpecified;
        
        private bool сНКFieldSpecified;
        
        private bool дОFieldSpecified;
        
        private bool кОFieldSpecified;
        
        private bool сКДFieldSpecified;
        
        private bool сККFieldSpecified;
        
        private bool срокОплатыПоДоговоруFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public СубконтоПоПредставлениюТип Субконто1 {
            get {
                if ((this.субконто1Field == null)) {
                    this.субконто1Field = new СубконтоПоПредставлениюТип();
                }
                return this.субконто1Field;
            }
            set {
                if ((this.субконто1Field != null)) {
                    if ((субконто1Field.Equals(value) != true)) {
                        this.субконто1Field = value;
                        this.OnPropertyChanged("Субконто1");
                    }
                }
                else {
                    this.субконто1Field = value;
                    this.OnPropertyChanged("Субконто1");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public СубконтоПоПредставлениюТип Субконто2 {
            get {
                if ((this.субконто2Field == null)) {
                    this.субконто2Field = new СубконтоПоПредставлениюТип();
                }
                return this.субконто2Field;
            }
            set {
                if ((this.субконто2Field != null)) {
                    if ((субконто2Field.Equals(value) != true)) {
                        this.субконто2Field = value;
                        this.OnPropertyChanged("Субконто2");
                    }
                }
                else {
                    this.субконто2Field = value;
                    this.OnPropertyChanged("Субконто2");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public СубконтоПоПредставлениюТип Субконто3 {
            get {
                if ((this.субконто3Field == null)) {
                    this.субконто3Field = new СубконтоПоПредставлениюТип();
                }
                return this.субконто3Field;
            }
            set {
                if ((this.субконто3Field != null)) {
                    if ((субконто3Field.Equals(value) != true)) {
                        this.субконто3Field = value;
                        this.OnPropertyChanged("Субконто3");
                    }
                }
                else {
                    this.субконто3Field = value;
                    this.OnPropertyChanged("Субконто3");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчета {
            get {
                return this.типСчетаField;
            }
            set {
                if ((типСчетаField.Equals(value) != true)) {
                    this.типСчетаField = value;
                    this.OnPropertyChanged("ТипСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаР {
            get {
                return this.кодСчетаРField;
            }
            set {
                if ((this.кодСчетаРField != null)) {
                    if ((кодСчетаРField.Equals(value) != true)) {
                        this.кодСчетаРField = value;
                        this.OnPropertyChanged("КодСчетаР");
                    }
                }
                else {
                    this.кодСчетаРField = value;
                    this.OnPropertyChanged("КодСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаР {
            get {
                return this.типСчетаРField;
            }
            set {
                if ((типСчетаРField.Equals(value) != true)) {
                    this.типСчетаРField = value;
                    this.OnPropertyChanged("ТипСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРSpecified {
            get {
                return this.типСчетаРFieldSpecified;
            }
            set {
                if ((типСчетаРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаРР {
            get {
                return this.кодСчетаРРField;
            }
            set {
                if ((this.кодСчетаРРField != null)) {
                    if ((кодСчетаРРField.Equals(value) != true)) {
                        this.кодСчетаРРField = value;
                        this.OnPropertyChanged("КодСчетаРР");
                    }
                }
                else {
                    this.кодСчетаРРField = value;
                    this.OnPropertyChanged("КодСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаРР {
            get {
                return this.типСчетаРРField;
            }
            set {
                if ((типСчетаРРField.Equals(value) != true)) {
                    this.типСчетаРРField = value;
                    this.OnPropertyChanged("ТипСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРРSpecified {
            get {
                return this.типСчетаРРFieldSpecified;
            }
            set {
                if ((типСчетаРРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНД {
            get {
                return this.сНДField;
            }
            set {
                if ((this.сНДField != null)) {
                    if ((сНДField.Equals(value) != true)) {
                        this.сНДField = value;
                        this.OnPropertyChanged("СНД");
                    }
                }
                else {
                    this.сНДField = value;
                    this.OnPropertyChanged("СНД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНК {
            get {
                return this.сНКField;
            }
            set {
                if ((this.сНКField != null)) {
                    if ((сНКField.Equals(value) != true)) {
                        this.сНКField = value;
                        this.OnPropertyChanged("СНК");
                    }
                }
                else {
                    this.сНКField = value;
                    this.OnPropertyChanged("СНК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДО {
            get {
                return this.доField;
            }
            set {
                if ((this.доField != null)) {
                    if ((доField.Equals(value) != true)) {
                        this.доField = value;
                        this.OnPropertyChanged("ДО");
                    }
                }
                else {
                    this.доField = value;
                    this.OnPropertyChanged("ДО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal КО {
            get {
                return this.коField;
            }
            set {
                if ((this.коField != null)) {
                    if ((коField.Equals(value) != true)) {
                        this.коField = value;
                        this.OnPropertyChanged("КО");
                    }
                }
                else {
                    this.коField = value;
                    this.OnPropertyChanged("КО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКД {
            get {
                return this.сКДField;
            }
            set {
                if ((this.сКДField != null)) {
                    if ((сКДField.Equals(value) != true)) {
                        this.сКДField = value;
                        this.OnPropertyChanged("СКД");
                    }
                }
                else {
                    this.сКДField = value;
                    this.OnPropertyChanged("СКД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКК {
            get {
                return this.сККField;
            }
            set {
                if ((this.сККField != null)) {
                    if ((сККField.Equals(value) != true)) {
                        this.сККField = value;
                        this.OnPropertyChanged("СКК");
                    }
                }
                else {
                    this.сККField = value;
                    this.OnPropertyChanged("СКК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СрокОплатыПоДоговору {
            get {
                return this.срокОплатыПоДоговоруField;
            }
            set {
                if ((this.срокОплатыПоДоговоруField != null)) {
                    if ((срокОплатыПоДоговоруField.Equals(value) != true)) {
                        this.срокОплатыПоДоговоруField = value;
                        this.OnPropertyChanged("СрокОплатыПоДоговору");
                    }
                }
                else {
                    this.срокОплатыПоДоговоруField = value;
                    this.OnPropertyChanged("СрокОплатыПоДоговору");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ПроцентнаяСтавка {
            get {
                return this.процентнаяСтавкаField;
            }
            set {
                if ((this.процентнаяСтавкаField != null)) {
                    if ((процентнаяСтавкаField.Equals(value) != true)) {
                        this.процентнаяСтавкаField = value;
                        this.OnPropertyChanged("ПроцентнаяСтавка");
                    }
                }
                else {
                    this.процентнаяСтавкаField = value;
                    this.OnPropertyChanged("ПроцентнаяСтавка");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ПроцентнаяСтавкаSpecified {
            get {
                return this.процентнаяСтавкаFieldSpecified;
            }
            set {
                if ((процентнаяСтавкаFieldSpecified.Equals(value) != true)) {
                    this.процентнаяСтавкаFieldSpecified = value;
                    this.OnPropertyChanged("ПроцентнаяСтавкаSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчетРежимПогашения РежимПогашения {
            get {
                return this.режимПогашенияField;
            }
            set {
                if ((режимПогашенияField.Equals(value) != true)) {
                    this.режимПогашенияField = value;
                    this.OnPropertyChanged("РежимПогашения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool РежимПогашенияSpecified {
            get {
                return this.режимПогашенияFieldSpecified;
            }
            set {
                if ((режимПогашенияFieldSpecified.Equals(value) != true)) {
                    this.режимПогашенияFieldSpecified = value;
                    this.OnPropertyChanged("РежимПогашенияSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool Субконто1Specified {
            get {
                return субконто1FieldSpecified;
            }
            set {
                субконто1FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool Субконто2Specified {
            get {
                return субконто2FieldSpecified;
            }
            set {
                субконто2FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool Субконто3Specified {
            get {
                return субконто3FieldSpecified;
            }
            set {
                субконто3FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипСчетаSpecified {
            get {
                return типСчетаFieldSpecified;
            }
            set {
                типСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРSpecified {
            get {
                return кодСчетаРFieldSpecified;
            }
            set {
                кодСчетаРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРРSpecified {
            get {
                return кодСчетаРРFieldSpecified;
            }
            set {
                кодСчетаРРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНДSpecified {
            get {
                return сНДFieldSpecified;
            }
            set {
                сНДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНКSpecified {
            get {
                return сНКFieldSpecified;
            }
            set {
                сНКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДОSpecified {
            get {
                return дОFieldSpecified;
            }
            set {
                дОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КОSpecified {
            get {
                return кОFieldSpecified;
            }
            set {
                кОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СКДSpecified {
            get {
                return сКДFieldSpecified;
            }
            set {
                сКДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СККSpecified {
            get {
                return сККFieldSpecified;
            }
            set {
                сККFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СрокОплатыПоДоговоруSpecified {
            get {
                return срокОплатыПоДоговоруFieldSpecified;
            }
            set {
                срокОплатыПоДоговоруFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчет LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументОСВПоСчетамОСВПоСчетуСтрокаОСВСчетРежимПогашения {
        
        /// <remarks/>
        ВКЛ,
        
        /// <remarks/>
        НКЛ,
        
        /// <remarks/>
        РКЛ,
        
        /// <remarks/>
        Кредит,
        
        /// <remarks/>
        Овердрафт,
        
        /// <remarks/>
        Прочее,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументОСВПоСчетамОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("383")]
        Item383,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументАнализСчетов : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументАнализСчетовАнализСчета> анализСчетаField;
        
        private ПериодМесяцТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументАнализСчетовОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool анализСчетаFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("АнализСчета", Order=0)]
        public List<ФайлДокументАнализСчетовАнализСчета> АнализСчета {
            get {
                if ((this.анализСчетаField == null)) {
                    this.анализСчетаField = new List<ФайлДокументАнализСчетовАнализСчета>();
                }
                return this.анализСчетаField;
            }
            set {
                if ((this.анализСчетаField != null)) {
                    if ((анализСчетаField.Equals(value) != true)) {
                        this.анализСчетаField = value;
                        this.OnPropertyChanged("АнализСчета");
                    }
                }
                else {
                    this.анализСчетаField = value;
                    this.OnPropertyChanged("АнализСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодМесяцТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументАнализСчетовОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументАнализСчетов));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool АнализСчетаSpecified {
            get {
                return анализСчетаFieldSpecified;
            }
            set {
                анализСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументАнализСчетов object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументАнализСчетов object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументАнализСчетов object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументАнализСчетов obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументАнализСчетов);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументАнализСчетов obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументАнализСчетов Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументАнализСчетов)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументАнализСчетов object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументАнализСчетов object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументАнализСчетов object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументАнализСчетов obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументАнализСчетов);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументАнализСчетов obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументАнализСчетов LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументАнализСчетовАнализСчета : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа> строкаАнализаField;
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool строкаАнализаFieldSpecified;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("СтрокаАнализа", Order=0)]
        public List<ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа> СтрокаАнализа {
            get {
                if ((this.строкаАнализаField == null)) {
                    this.строкаАнализаField = new List<ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа>();
                }
                return this.строкаАнализаField;
            }
            set {
                if ((this.строкаАнализаField != null)) {
                    if ((строкаАнализаField.Equals(value) != true)) {
                        this.строкаАнализаField = value;
                        this.OnPropertyChanged("СтрокаАнализа");
                    }
                }
                else {
                    this.строкаАнализаField = value;
                    this.OnPropertyChanged("СтрокаАнализа");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументАнализСчетовАнализСчета));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СтрокаАнализаSpecified {
            get {
                return строкаАнализаFieldSpecified;
            }
            set {
                строкаАнализаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументАнализСчетовАнализСчета object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументАнализСчетовАнализСчета object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументАнализСчетовАнализСчета object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументАнализСчетовАнализСчета obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументАнализСчетовАнализСчета);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументАнализСчетовАнализСчета obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументАнализСчетовАнализСчета Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументАнализСчетовАнализСчета)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументАнализСчетовАнализСчета object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументАнализСчетовАнализСчета object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументАнализСчетовАнализСчета object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументАнализСчетовАнализСчета obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументАнализСчетовАнализСчета);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументАнализСчетовАнализСчета obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументАнализСчетовАнализСчета LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет счетField;
        
        private List<ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция> корреспонденцияField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool счетFieldSpecified;
        
        private bool корреспонденцияFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет Счет {
            get {
                if ((this.счетField == null)) {
                    this.счетField = new ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет();
                }
                return this.счетField;
            }
            set {
                if ((this.счетField != null)) {
                    if ((счетField.Equals(value) != true)) {
                        this.счетField = value;
                        this.OnPropertyChanged("Счет");
                    }
                }
                else {
                    this.счетField = value;
                    this.OnPropertyChanged("Счет");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Корреспонденция", Order=1)]
        public List<ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция> Корреспонденция {
            get {
                if ((this.корреспонденцияField == null)) {
                    this.корреспонденцияField = new List<ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция>();
                }
                return this.корреспонденцияField;
            }
            set {
                if ((this.корреспонденцияField != null)) {
                    if ((корреспонденцияField.Equals(value) != true)) {
                        this.корреспонденцияField = value;
                        this.OnPropertyChanged("Корреспонденция");
                    }
                }
                else {
                    this.корреспонденцияField = value;
                    this.OnPropertyChanged("Корреспонденция");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СчетSpecified {
            get {
                return счетFieldSpecified;
            }
            set {
                счетFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КорреспонденцияSpecified {
            get {
                return корреспонденцияFieldSpecified;
            }
            set {
                корреспонденцияFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументАнализСчетовАнализСчетаСтрокаАнализа LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет : System.ComponentModel.INotifyPropertyChanged {
        
        private СубконтоПоПредставлениюТип субконто1Field;
        
        private СубконтоПоПредставлениюТип субконто2Field;
        
        private СубконтоПоПредставлениюТип субконто3Field;
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаField;
        
        private string кодСчетаРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРField;
        
        private bool типСчетаРFieldSpecified;
        
        private string кодСчетаРРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРРField;
        
        private bool типСчетаРРFieldSpecified;
        
        private decimal сНДField;
        
        private decimal сНКField;
        
        private decimal доField;
        
        private decimal коField;
        
        private decimal сКДField;
        
        private decimal сККField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool субконто1FieldSpecified;
        
        private bool субконто2FieldSpecified;
        
        private bool субконто3FieldSpecified;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        private bool типСчетаFieldSpecified;
        
        private bool кодСчетаРFieldSpecified;
        
        private bool кодСчетаРРFieldSpecified;
        
        private bool сНДFieldSpecified;
        
        private bool сНКFieldSpecified;
        
        private bool дОFieldSpecified;
        
        private bool кОFieldSpecified;
        
        private bool сКДFieldSpecified;
        
        private bool сККFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public СубконтоПоПредставлениюТип Субконто1 {
            get {
                if ((this.субконто1Field == null)) {
                    this.субконто1Field = new СубконтоПоПредставлениюТип();
                }
                return this.субконто1Field;
            }
            set {
                if ((this.субконто1Field != null)) {
                    if ((субконто1Field.Equals(value) != true)) {
                        this.субконто1Field = value;
                        this.OnPropertyChanged("Субконто1");
                    }
                }
                else {
                    this.субконто1Field = value;
                    this.OnPropertyChanged("Субконто1");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public СубконтоПоПредставлениюТип Субконто2 {
            get {
                if ((this.субконто2Field == null)) {
                    this.субконто2Field = new СубконтоПоПредставлениюТип();
                }
                return this.субконто2Field;
            }
            set {
                if ((this.субконто2Field != null)) {
                    if ((субконто2Field.Equals(value) != true)) {
                        this.субконто2Field = value;
                        this.OnPropertyChanged("Субконто2");
                    }
                }
                else {
                    this.субконто2Field = value;
                    this.OnPropertyChanged("Субконто2");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public СубконтоПоПредставлениюТип Субконто3 {
            get {
                if ((this.субконто3Field == null)) {
                    this.субконто3Field = new СубконтоПоПредставлениюТип();
                }
                return this.субконто3Field;
            }
            set {
                if ((this.субконто3Field != null)) {
                    if ((субконто3Field.Equals(value) != true)) {
                        this.субконто3Field = value;
                        this.OnPropertyChanged("Субконто3");
                    }
                }
                else {
                    this.субконто3Field = value;
                    this.OnPropertyChanged("Субконто3");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчета {
            get {
                return this.типСчетаField;
            }
            set {
                if ((типСчетаField.Equals(value) != true)) {
                    this.типСчетаField = value;
                    this.OnPropertyChanged("ТипСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаР {
            get {
                return this.кодСчетаРField;
            }
            set {
                if ((this.кодСчетаРField != null)) {
                    if ((кодСчетаРField.Equals(value) != true)) {
                        this.кодСчетаРField = value;
                        this.OnPropertyChanged("КодСчетаР");
                    }
                }
                else {
                    this.кодСчетаРField = value;
                    this.OnPropertyChanged("КодСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаР {
            get {
                return this.типСчетаРField;
            }
            set {
                if ((типСчетаРField.Equals(value) != true)) {
                    this.типСчетаРField = value;
                    this.OnPropertyChanged("ТипСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРSpecified {
            get {
                return this.типСчетаРFieldSpecified;
            }
            set {
                if ((типСчетаРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаРР {
            get {
                return this.кодСчетаРРField;
            }
            set {
                if ((this.кодСчетаРРField != null)) {
                    if ((кодСчетаРРField.Equals(value) != true)) {
                        this.кодСчетаРРField = value;
                        this.OnPropertyChanged("КодСчетаРР");
                    }
                }
                else {
                    this.кодСчетаРРField = value;
                    this.OnPropertyChanged("КодСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаРР {
            get {
                return this.типСчетаРРField;
            }
            set {
                if ((типСчетаРРField.Equals(value) != true)) {
                    this.типСчетаРРField = value;
                    this.OnPropertyChanged("ТипСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРРSpecified {
            get {
                return this.типСчетаРРFieldSpecified;
            }
            set {
                if ((типСчетаРРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНД {
            get {
                return this.сНДField;
            }
            set {
                if ((this.сНДField != null)) {
                    if ((сНДField.Equals(value) != true)) {
                        this.сНДField = value;
                        this.OnPropertyChanged("СНД");
                    }
                }
                else {
                    this.сНДField = value;
                    this.OnPropertyChanged("СНД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНК {
            get {
                return this.сНКField;
            }
            set {
                if ((this.сНКField != null)) {
                    if ((сНКField.Equals(value) != true)) {
                        this.сНКField = value;
                        this.OnPropertyChanged("СНК");
                    }
                }
                else {
                    this.сНКField = value;
                    this.OnPropertyChanged("СНК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДО {
            get {
                return this.доField;
            }
            set {
                if ((this.доField != null)) {
                    if ((доField.Equals(value) != true)) {
                        this.доField = value;
                        this.OnPropertyChanged("ДО");
                    }
                }
                else {
                    this.доField = value;
                    this.OnPropertyChanged("ДО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal КО {
            get {
                return this.коField;
            }
            set {
                if ((this.коField != null)) {
                    if ((коField.Equals(value) != true)) {
                        this.коField = value;
                        this.OnPropertyChanged("КО");
                    }
                }
                else {
                    this.коField = value;
                    this.OnPropertyChanged("КО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКД {
            get {
                return this.сКДField;
            }
            set {
                if ((this.сКДField != null)) {
                    if ((сКДField.Equals(value) != true)) {
                        this.сКДField = value;
                        this.OnPropertyChanged("СКД");
                    }
                }
                else {
                    this.сКДField = value;
                    this.OnPropertyChanged("СКД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКК {
            get {
                return this.сККField;
            }
            set {
                if ((this.сККField != null)) {
                    if ((сККField.Equals(value) != true)) {
                        this.сККField = value;
                        this.OnPropertyChanged("СКК");
                    }
                }
                else {
                    this.сККField = value;
                    this.OnPropertyChanged("СКК");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool Субконто1Specified {
            get {
                return субконто1FieldSpecified;
            }
            set {
                субконто1FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool Субконто2Specified {
            get {
                return субконто2FieldSpecified;
            }
            set {
                субконто2FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool Субконто3Specified {
            get {
                return субконто3FieldSpecified;
            }
            set {
                субконто3FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипСчетаSpecified {
            get {
                return типСчетаFieldSpecified;
            }
            set {
                типСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРSpecified {
            get {
                return кодСчетаРFieldSpecified;
            }
            set {
                кодСчетаРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРРSpecified {
            get {
                return кодСчетаРРFieldSpecified;
            }
            set {
                кодСчетаРРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНДSpecified {
            get {
                return сНДFieldSpecified;
            }
            set {
                сНДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНКSpecified {
            get {
                return сНКFieldSpecified;
            }
            set {
                сНКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДОSpecified {
            get {
                return дОFieldSpecified;
            }
            set {
                дОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КОSpecified {
            get {
                return кОFieldSpecified;
            }
            set {
                кОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СКДSpecified {
            get {
                return сКДFieldSpecified;
            }
            set {
                сКДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СККSpecified {
            get {
                return сККFieldSpecified;
            }
            set {
                сККFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаСчет LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаField;
        
        private string кодСчетаРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРField;
        
        private bool типСчетаРFieldSpecified;
        
        private string кодСчетаРРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРРField;
        
        private bool типСчетаРРFieldSpecified;
        
        private decimal доField;
        
        private decimal коField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        private bool типСчетаFieldSpecified;
        
        private bool кодСчетаРFieldSpecified;
        
        private bool кодСчетаРРFieldSpecified;
        
        private bool дОFieldSpecified;
        
        private bool кОFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчета {
            get {
                return this.типСчетаField;
            }
            set {
                if ((типСчетаField.Equals(value) != true)) {
                    this.типСчетаField = value;
                    this.OnPropertyChanged("ТипСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаР {
            get {
                return this.кодСчетаРField;
            }
            set {
                if ((this.кодСчетаРField != null)) {
                    if ((кодСчетаРField.Equals(value) != true)) {
                        this.кодСчетаРField = value;
                        this.OnPropertyChanged("КодСчетаР");
                    }
                }
                else {
                    this.кодСчетаРField = value;
                    this.OnPropertyChanged("КодСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаР {
            get {
                return this.типСчетаРField;
            }
            set {
                if ((типСчетаРField.Equals(value) != true)) {
                    this.типСчетаРField = value;
                    this.OnPropertyChanged("ТипСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРSpecified {
            get {
                return this.типСчетаРFieldSpecified;
            }
            set {
                if ((типСчетаРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаРР {
            get {
                return this.кодСчетаРРField;
            }
            set {
                if ((this.кодСчетаРРField != null)) {
                    if ((кодСчетаРРField.Equals(value) != true)) {
                        this.кодСчетаРРField = value;
                        this.OnPropertyChanged("КодСчетаРР");
                    }
                }
                else {
                    this.кодСчетаРРField = value;
                    this.OnPropertyChanged("КодСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаРР {
            get {
                return this.типСчетаРРField;
            }
            set {
                if ((типСчетаРРField.Equals(value) != true)) {
                    this.типСчетаРРField = value;
                    this.OnPropertyChanged("ТипСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРРSpecified {
            get {
                return this.типСчетаРРFieldSpecified;
            }
            set {
                if ((типСчетаРРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДО {
            get {
                return this.доField;
            }
            set {
                if ((this.доField != null)) {
                    if ((доField.Equals(value) != true)) {
                        this.доField = value;
                        this.OnPropertyChanged("ДО");
                    }
                }
                else {
                    this.доField = value;
                    this.OnPropertyChanged("ДО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal КО {
            get {
                return this.коField;
            }
            set {
                if ((this.коField != null)) {
                    if ((коField.Equals(value) != true)) {
                        this.коField = value;
                        this.OnPropertyChanged("КО");
                    }
                }
                else {
                    this.коField = value;
                    this.OnPropertyChanged("КО");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипСчетаSpecified {
            get {
                return типСчетаFieldSpecified;
            }
            set {
                типСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРSpecified {
            get {
                return кодСчетаРFieldSpecified;
            }
            set {
                кодСчетаРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРРSpecified {
            get {
                return кодСчетаРРFieldSpecified;
            }
            set {
                кодСчетаРРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДОSpecified {
            get {
                return дОFieldSpecified;
            }
            set {
                дОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КОSpecified {
            get {
                return кОFieldSpecified;
            }
            set {
                кОFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументАнализСчетовАнализСчетаСтрокаАнализаКорреспонденция LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументАнализСчетовОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("383")]
        Item383,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОперБанкСч : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументОперБанкСчСчет> бухгалтерскиеСчетаField;
        
        private List<ФайлДокументОперБанкСчСчетУчета> счетУчетаField;
        
        private ПериодМесяцТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументОперБанкСчОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool бухгалтерскиеСчетаFieldSpecified;
        
        private bool счетУчетаFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Счет", IsNullable=false)]
        public List<ФайлДокументОперБанкСчСчет> БухгалтерскиеСчета {
            get {
                if ((this.бухгалтерскиеСчетаField == null)) {
                    this.бухгалтерскиеСчетаField = new List<ФайлДокументОперБанкСчСчет>();
                }
                return this.бухгалтерскиеСчетаField;
            }
            set {
                if ((this.бухгалтерскиеСчетаField != null)) {
                    if ((бухгалтерскиеСчетаField.Equals(value) != true)) {
                        this.бухгалтерскиеСчетаField = value;
                        this.OnPropertyChanged("БухгалтерскиеСчета");
                    }
                }
                else {
                    this.бухгалтерскиеСчетаField = value;
                    this.OnPropertyChanged("БухгалтерскиеСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("СчетУчета", Order=1)]
        public List<ФайлДокументОперБанкСчСчетУчета> СчетУчета {
            get {
                if ((this.счетУчетаField == null)) {
                    this.счетУчетаField = new List<ФайлДокументОперБанкСчСчетУчета>();
                }
                return this.счетУчетаField;
            }
            set {
                if ((this.счетУчетаField != null)) {
                    if ((счетУчетаField.Equals(value) != true)) {
                        this.счетУчетаField = value;
                        this.OnPropertyChanged("СчетУчета");
                    }
                }
                else {
                    this.счетУчетаField = value;
                    this.OnPropertyChanged("СчетУчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодМесяцТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументОперБанкСчОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОперБанкСч));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool БухгалтерскиеСчетаSpecified {
            get {
                return бухгалтерскиеСчетаFieldSpecified;
            }
            set {
                бухгалтерскиеСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СчетУчетаSpecified {
            get {
                return счетУчетаFieldSpecified;
            }
            set {
                счетУчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСч object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОперБанкСч object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСч object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСч obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСч);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСч obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСч Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОперБанкСч)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСч object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОперБанкСч object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСч object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСч obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСч);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСч obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСч LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОперБанкСчСчет : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументОперБанкСчСчетСубСчет> субСчетField;
        
        private string кодField;
        
        private string наименованиеField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool субСчетFieldSpecified;
        
        private bool кодFieldSpecified;
        
        private bool наименованиеFieldSpecified;
        
        private bool типFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("СубСчет", Order=0)]
        public List<ФайлДокументОперБанкСчСчетСубСчет> СубСчет {
            get {
                if ((this.субСчетField == null)) {
                    this.субСчетField = new List<ФайлДокументОперБанкСчСчетСубСчет>();
                }
                return this.субСчетField;
            }
            set {
                if ((this.субСчетField != null)) {
                    if ((субСчетField.Equals(value) != true)) {
                        this.субСчетField = value;
                        this.OnPropertyChanged("СубСчет");
                    }
                }
                else {
                    this.субСчетField = value;
                    this.OnPropertyChanged("СубСчет");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета Тип {
            get {
                return this.типField;
            }
            set {
                if ((типField.Equals(value) != true)) {
                    this.типField = value;
                    this.OnPropertyChanged("Тип");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОперБанкСчСчет));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СубСчетSpecified {
            get {
                return субСчетFieldSpecified;
            }
            set {
                субСчетFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипSpecified {
            get {
                return типFieldSpecified;
            }
            set {
                типFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчет object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОперБанкСчСчет object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчет);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчет obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчет Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОперБанкСчСчет)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчет object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОперБанкСчСчет object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчет);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчет obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчет LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОперБанкСчСчетСубСчет : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументОперБанкСчСчетСубСчетСубСубСчет> субСубСчетField;
        
        private string кодField;
        
        private string наименованиеField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool субСубСчетFieldSpecified;
        
        private bool кодFieldSpecified;
        
        private bool наименованиеFieldSpecified;
        
        private bool типFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("СубСубСчет", Order=0)]
        public List<ФайлДокументОперБанкСчСчетСубСчетСубСубСчет> СубСубСчет {
            get {
                if ((this.субСубСчетField == null)) {
                    this.субСубСчетField = new List<ФайлДокументОперБанкСчСчетСубСчетСубСубСчет>();
                }
                return this.субСубСчетField;
            }
            set {
                if ((this.субСубСчетField != null)) {
                    if ((субСубСчетField.Equals(value) != true)) {
                        this.субСубСчетField = value;
                        this.OnPropertyChanged("СубСубСчет");
                    }
                }
                else {
                    this.субСубСчетField = value;
                    this.OnPropertyChanged("СубСубСчет");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета Тип {
            get {
                return this.типField;
            }
            set {
                if ((типField.Equals(value) != true)) {
                    this.типField = value;
                    this.OnPropertyChanged("Тип");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОперБанкСчСчетСубСчет));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СубСубСчетSpecified {
            get {
                return субСубСчетFieldSpecified;
            }
            set {
                субСубСчетFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипSpecified {
            get {
                return типFieldSpecified;
            }
            set {
                типFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетСубСчет object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОперБанкСчСчетСубСчет object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетСубСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетСубСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетСубСчет);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетСубСчет obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетСубСчет Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОперБанкСчСчетСубСчет)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетСубСчет object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОперБанкСчСчетСубСчет object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетСубСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетСубСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетСубСчет);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетСубСчет obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетСубСчет LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОперБанкСчСчетСубСчетСубСубСчет : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодField;
        
        private string наименованиеField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодFieldSpecified;
        
        private bool наименованиеFieldSpecified;
        
        private bool типFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета Тип {
            get {
                return this.типField;
            }
            set {
                if ((типField.Equals(value) != true)) {
                    this.типField = value;
                    this.OnPropertyChanged("Тип");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОперБанкСчСчетСубСчетСубСубСчет));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипSpecified {
            get {
                return типFieldSpecified;
            }
            set {
                типFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетСубСчетСубСубСчет object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОперБанкСчСчетСубСчетСубСубСчет object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетСубСчетСубСубСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетСубСчетСубСубСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетСубСчетСубСубСчет);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетСубСчетСубСубСчет obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетСубСчетСубСубСчет Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОперБанкСчСчетСубСчетСубСубСчет)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетСубСчетСубСубСчет object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОперБанкСчСчетСубСчетСубСубСчет object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетСубСчетСубСубСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетСубСчетСубСубСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетСубСчетСубСубСчет);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетСубСчетСубСубСчет obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетСубСчетСубСубСчет LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОперБанкСчСчетУчета : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументОперБанкСчСчетУчетаБанкСч> банкСчField;
        
        private string кодСчетаField;
        
        private decimal сальдоНачальноеField;
        
        private decimal оборотыДтField;
        
        private decimal оборотыКтField;
        
        private decimal сальдоКонечноеField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool банкСчFieldSpecified;
        
        private bool кодСчетаFieldSpecified;
        
        private bool сальдоНачальноеFieldSpecified;
        
        private bool оборотыДтFieldSpecified;
        
        private bool оборотыКтFieldSpecified;
        
        private bool сальдоКонечноеFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("БанкСч", Order=0)]
        public List<ФайлДокументОперБанкСчСчетУчетаБанкСч> БанкСч {
            get {
                if ((this.банкСчField == null)) {
                    this.банкСчField = new List<ФайлДокументОперБанкСчСчетУчетаБанкСч>();
                }
                return this.банкСчField;
            }
            set {
                if ((this.банкСчField != null)) {
                    if ((банкСчField.Equals(value) != true)) {
                        this.банкСчField = value;
                        this.OnPropertyChanged("БанкСч");
                    }
                }
                else {
                    this.банкСчField = value;
                    this.OnPropertyChanged("БанкСч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СальдоНачальное {
            get {
                return this.сальдоНачальноеField;
            }
            set {
                if ((this.сальдоНачальноеField != null)) {
                    if ((сальдоНачальноеField.Equals(value) != true)) {
                        this.сальдоНачальноеField = value;
                        this.OnPropertyChanged("СальдоНачальное");
                    }
                }
                else {
                    this.сальдоНачальноеField = value;
                    this.OnPropertyChanged("СальдоНачальное");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОборотыДт {
            get {
                return this.оборотыДтField;
            }
            set {
                if ((this.оборотыДтField != null)) {
                    if ((оборотыДтField.Equals(value) != true)) {
                        this.оборотыДтField = value;
                        this.OnPropertyChanged("ОборотыДт");
                    }
                }
                else {
                    this.оборотыДтField = value;
                    this.OnPropertyChanged("ОборотыДт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОборотыКт {
            get {
                return this.оборотыКтField;
            }
            set {
                if ((this.оборотыКтField != null)) {
                    if ((оборотыКтField.Equals(value) != true)) {
                        this.оборотыКтField = value;
                        this.OnPropertyChanged("ОборотыКт");
                    }
                }
                else {
                    this.оборотыКтField = value;
                    this.OnPropertyChanged("ОборотыКт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СальдоКонечное {
            get {
                return this.сальдоКонечноеField;
            }
            set {
                if ((this.сальдоКонечноеField != null)) {
                    if ((сальдоКонечноеField.Equals(value) != true)) {
                        this.сальдоКонечноеField = value;
                        this.OnPropertyChanged("СальдоКонечное");
                    }
                }
                else {
                    this.сальдоКонечноеField = value;
                    this.OnPropertyChanged("СальдоКонечное");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОперБанкСчСчетУчета));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool БанкСчSpecified {
            get {
                return банкСчFieldSpecified;
            }
            set {
                банкСчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СальдоНачальноеSpecified {
            get {
                return сальдоНачальноеFieldSpecified;
            }
            set {
                сальдоНачальноеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОборотыДтSpecified {
            get {
                return оборотыДтFieldSpecified;
            }
            set {
                оборотыДтFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОборотыКтSpecified {
            get {
                return оборотыКтFieldSpecified;
            }
            set {
                оборотыКтFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СальдоКонечноеSpecified {
            get {
                return сальдоКонечноеFieldSpecified;
            }
            set {
                сальдоКонечноеFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетУчета object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОперБанкСчСчетУчета object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетУчета object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетУчета obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетУчета);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетУчета obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетУчета Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОперБанкСчСчетУчета)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетУчета object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОперБанкСчСчетУчета object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетУчета object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетУчета obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетУчета);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетУчета obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетУчета LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОперБанкСчСчетУчетаБанкСч : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументОперБанкСчСчетУчетаБанкСчОперация> операцияField;
        
        private string наименованиеField;
        
        private string номерField;
        
        private string бИКField;
        
        private string банкField;
        
        private string валютаField;
        
        private decimal сальдоНачальноеField;
        
        private decimal оборотыДтField;
        
        private decimal оборотыКтField;
        
        private decimal сальдоКонечноеField;
        
        private decimal сальдоНачальноеВалField;
        
        private bool сальдоНачальноеВалFieldSpecified;
        
        private decimal оборотыДтВалField;
        
        private bool оборотыДтВалFieldSpecified;
        
        private decimal оборотыКтВалField;
        
        private bool оборотыКтВалFieldSpecified;
        
        private decimal сальдоКонечноеВалField;
        
        private bool сальдоКонечноеВалFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool операцияFieldSpecified;
        
        private bool наименованиеFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool бИКFieldSpecified;
        
        private bool банкFieldSpecified;
        
        private bool валютаFieldSpecified;
        
        private bool сальдоНачальноеFieldSpecified;
        
        private bool оборотыДтFieldSpecified;
        
        private bool оборотыКтFieldSpecified;
        
        private bool сальдоКонечноеFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Операция", Order=0)]
        public List<ФайлДокументОперБанкСчСчетУчетаБанкСчОперация> Операция {
            get {
                if ((this.операцияField == null)) {
                    this.операцияField = new List<ФайлДокументОперБанкСчСчетУчетаБанкСчОперация>();
                }
                return this.операцияField;
            }
            set {
                if ((this.операцияField != null)) {
                    if ((операцияField.Equals(value) != true)) {
                        this.операцияField = value;
                        this.OnPropertyChanged("Операция");
                    }
                }
                else {
                    this.операцияField = value;
                    this.OnPropertyChanged("Операция");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string БИК {
            get {
                return this.бИКField;
            }
            set {
                if ((this.бИКField != null)) {
                    if ((бИКField.Equals(value) != true)) {
                        this.бИКField = value;
                        this.OnPropertyChanged("БИК");
                    }
                }
                else {
                    this.бИКField = value;
                    this.OnPropertyChanged("БИК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Банк {
            get {
                return this.банкField;
            }
            set {
                if ((this.банкField != null)) {
                    if ((банкField.Equals(value) != true)) {
                        this.банкField = value;
                        this.OnPropertyChanged("Банк");
                    }
                }
                else {
                    this.банкField = value;
                    this.OnPropertyChanged("Банк");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Валюта {
            get {
                return this.валютаField;
            }
            set {
                if ((this.валютаField != null)) {
                    if ((валютаField.Equals(value) != true)) {
                        this.валютаField = value;
                        this.OnPropertyChanged("Валюта");
                    }
                }
                else {
                    this.валютаField = value;
                    this.OnPropertyChanged("Валюта");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СальдоНачальное {
            get {
                return this.сальдоНачальноеField;
            }
            set {
                if ((this.сальдоНачальноеField != null)) {
                    if ((сальдоНачальноеField.Equals(value) != true)) {
                        this.сальдоНачальноеField = value;
                        this.OnPropertyChanged("СальдоНачальное");
                    }
                }
                else {
                    this.сальдоНачальноеField = value;
                    this.OnPropertyChanged("СальдоНачальное");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОборотыДт {
            get {
                return this.оборотыДтField;
            }
            set {
                if ((this.оборотыДтField != null)) {
                    if ((оборотыДтField.Equals(value) != true)) {
                        this.оборотыДтField = value;
                        this.OnPropertyChanged("ОборотыДт");
                    }
                }
                else {
                    this.оборотыДтField = value;
                    this.OnPropertyChanged("ОборотыДт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОборотыКт {
            get {
                return this.оборотыКтField;
            }
            set {
                if ((this.оборотыКтField != null)) {
                    if ((оборотыКтField.Equals(value) != true)) {
                        this.оборотыКтField = value;
                        this.OnPropertyChanged("ОборотыКт");
                    }
                }
                else {
                    this.оборотыКтField = value;
                    this.OnPropertyChanged("ОборотыКт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СальдоКонечное {
            get {
                return this.сальдоКонечноеField;
            }
            set {
                if ((this.сальдоКонечноеField != null)) {
                    if ((сальдоКонечноеField.Equals(value) != true)) {
                        this.сальдоКонечноеField = value;
                        this.OnPropertyChanged("СальдоКонечное");
                    }
                }
                else {
                    this.сальдоКонечноеField = value;
                    this.OnPropertyChanged("СальдоКонечное");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СальдоНачальноеВал {
            get {
                return this.сальдоНачальноеВалField;
            }
            set {
                if ((this.сальдоНачальноеВалField != null)) {
                    if ((сальдоНачальноеВалField.Equals(value) != true)) {
                        this.сальдоНачальноеВалField = value;
                        this.OnPropertyChanged("СальдоНачальноеВал");
                    }
                }
                else {
                    this.сальдоНачальноеВалField = value;
                    this.OnPropertyChanged("СальдоНачальноеВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СальдоНачальноеВалSpecified {
            get {
                return this.сальдоНачальноеВалFieldSpecified;
            }
            set {
                if ((сальдоНачальноеВалFieldSpecified.Equals(value) != true)) {
                    this.сальдоНачальноеВалFieldSpecified = value;
                    this.OnPropertyChanged("СальдоНачальноеВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОборотыДтВал {
            get {
                return this.оборотыДтВалField;
            }
            set {
                if ((this.оборотыДтВалField != null)) {
                    if ((оборотыДтВалField.Equals(value) != true)) {
                        this.оборотыДтВалField = value;
                        this.OnPropertyChanged("ОборотыДтВал");
                    }
                }
                else {
                    this.оборотыДтВалField = value;
                    this.OnPropertyChanged("ОборотыДтВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ОборотыДтВалSpecified {
            get {
                return this.оборотыДтВалFieldSpecified;
            }
            set {
                if ((оборотыДтВалFieldSpecified.Equals(value) != true)) {
                    this.оборотыДтВалFieldSpecified = value;
                    this.OnPropertyChanged("ОборотыДтВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ОборотыКтВал {
            get {
                return this.оборотыКтВалField;
            }
            set {
                if ((this.оборотыКтВалField != null)) {
                    if ((оборотыКтВалField.Equals(value) != true)) {
                        this.оборотыКтВалField = value;
                        this.OnPropertyChanged("ОборотыКтВал");
                    }
                }
                else {
                    this.оборотыКтВалField = value;
                    this.OnPropertyChanged("ОборотыКтВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ОборотыКтВалSpecified {
            get {
                return this.оборотыКтВалFieldSpecified;
            }
            set {
                if ((оборотыКтВалFieldSpecified.Equals(value) != true)) {
                    this.оборотыКтВалFieldSpecified = value;
                    this.OnPropertyChanged("ОборотыКтВалSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СальдоКонечноеВал {
            get {
                return this.сальдоКонечноеВалField;
            }
            set {
                if ((this.сальдоКонечноеВалField != null)) {
                    if ((сальдоКонечноеВалField.Equals(value) != true)) {
                        this.сальдоКонечноеВалField = value;
                        this.OnPropertyChanged("СальдоКонечноеВал");
                    }
                }
                else {
                    this.сальдоКонечноеВалField = value;
                    this.OnPropertyChanged("СальдоКонечноеВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СальдоКонечноеВалSpecified {
            get {
                return this.сальдоКонечноеВалFieldSpecified;
            }
            set {
                if ((сальдоКонечноеВалFieldSpecified.Equals(value) != true)) {
                    this.сальдоКонечноеВалFieldSpecified = value;
                    this.OnPropertyChanged("СальдоКонечноеВалSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОперБанкСчСчетУчетаБанкСч));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ОперацияSpecified {
            get {
                return операцияFieldSpecified;
            }
            set {
                операцияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool БИКSpecified {
            get {
                return бИКFieldSpecified;
            }
            set {
                бИКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool БанкSpecified {
            get {
                return банкFieldSpecified;
            }
            set {
                банкFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВалютаSpecified {
            get {
                return валютаFieldSpecified;
            }
            set {
                валютаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СальдоНачальноеSpecified {
            get {
                return сальдоНачальноеFieldSpecified;
            }
            set {
                сальдоНачальноеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОборотыДтSpecified {
            get {
                return оборотыДтFieldSpecified;
            }
            set {
                оборотыДтFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОборотыКтSpecified {
            get {
                return оборотыКтFieldSpecified;
            }
            set {
                оборотыКтFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СальдоКонечноеSpecified {
            get {
                return сальдоКонечноеFieldSpecified;
            }
            set {
                сальдоКонечноеFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетУчетаБанкСч object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОперБанкСчСчетУчетаБанкСч object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетУчетаБанкСч object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетУчетаБанкСч obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетУчетаБанкСч);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетУчетаБанкСч obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетУчетаБанкСч Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОперБанкСчСчетУчетаБанкСч)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетУчетаБанкСч object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОперБанкСчСчетУчетаБанкСч object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетУчетаБанкСч object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетУчетаБанкСч obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетУчетаБанкСч);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетУчетаБанкСч obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетУчетаБанкСч LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОперБанкСчСчетУчетаБанкСчОперация : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент контрагентField;
        
        private string датаField;
        
        private string докНомерField;
        
        private string докДатаField;
        
        private string видОперацииField;
        
        private string назначениеField;
        
        private string счетДтField;
        
        private string счетКтField;
        
        private decimal суммаField;
        
        private decimal суммаВалField;
        
        private bool суммаВалFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool контрагентFieldSpecified;
        
        private bool датаFieldSpecified;
        
        private bool докНомерFieldSpecified;
        
        private bool докДатаFieldSpecified;
        
        private bool видОперацииFieldSpecified;
        
        private bool назначениеFieldSpecified;
        
        private bool счетДтFieldSpecified;
        
        private bool счетКтFieldSpecified;
        
        private bool суммаFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент Контрагент {
            get {
                if ((this.контрагентField == null)) {
                    this.контрагентField = new ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент();
                }
                return this.контрагентField;
            }
            set {
                if ((this.контрагентField != null)) {
                    if ((контрагентField.Equals(value) != true)) {
                        this.контрагентField = value;
                        this.OnPropertyChanged("Контрагент");
                    }
                }
                else {
                    this.контрагентField = value;
                    this.OnPropertyChanged("Контрагент");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДокНомер {
            get {
                return this.докНомерField;
            }
            set {
                if ((this.докНомерField != null)) {
                    if ((докНомерField.Equals(value) != true)) {
                        this.докНомерField = value;
                        this.OnPropertyChanged("ДокНомер");
                    }
                }
                else {
                    this.докНомерField = value;
                    this.OnPropertyChanged("ДокНомер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДокДата {
            get {
                return this.докДатаField;
            }
            set {
                if ((this.докДатаField != null)) {
                    if ((докДатаField.Equals(value) != true)) {
                        this.докДатаField = value;
                        this.OnPropertyChanged("ДокДата");
                    }
                }
                else {
                    this.докДатаField = value;
                    this.OnPropertyChanged("ДокДата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ВидОперации {
            get {
                return this.видОперацииField;
            }
            set {
                if ((this.видОперацииField != null)) {
                    if ((видОперацииField.Equals(value) != true)) {
                        this.видОперацииField = value;
                        this.OnPropertyChanged("ВидОперации");
                    }
                }
                else {
                    this.видОперацииField = value;
                    this.OnPropertyChanged("ВидОперации");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Назначение {
            get {
                return this.назначениеField;
            }
            set {
                if ((this.назначениеField != null)) {
                    if ((назначениеField.Equals(value) != true)) {
                        this.назначениеField = value;
                        this.OnPropertyChanged("Назначение");
                    }
                }
                else {
                    this.назначениеField = value;
                    this.OnPropertyChanged("Назначение");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СчетДт {
            get {
                return this.счетДтField;
            }
            set {
                if ((this.счетДтField != null)) {
                    if ((счетДтField.Equals(value) != true)) {
                        this.счетДтField = value;
                        this.OnPropertyChanged("СчетДт");
                    }
                }
                else {
                    this.счетДтField = value;
                    this.OnPropertyChanged("СчетДт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СчетКт {
            get {
                return this.счетКтField;
            }
            set {
                if ((this.счетКтField != null)) {
                    if ((счетКтField.Equals(value) != true)) {
                        this.счетКтField = value;
                        this.OnPropertyChanged("СчетКт");
                    }
                }
                else {
                    this.счетКтField = value;
                    this.OnPropertyChanged("СчетКт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Сумма {
            get {
                return this.суммаField;
            }
            set {
                if ((this.суммаField != null)) {
                    if ((суммаField.Equals(value) != true)) {
                        this.суммаField = value;
                        this.OnPropertyChanged("Сумма");
                    }
                }
                else {
                    this.суммаField = value;
                    this.OnPropertyChanged("Сумма");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаВал {
            get {
                return this.суммаВалField;
            }
            set {
                if ((this.суммаВалField != null)) {
                    if ((суммаВалField.Equals(value) != true)) {
                        this.суммаВалField = value;
                        this.OnPropertyChanged("СуммаВал");
                    }
                }
                else {
                    this.суммаВалField = value;
                    this.OnPropertyChanged("СуммаВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СуммаВалSpecified {
            get {
                return this.суммаВалFieldSpecified;
            }
            set {
                if ((суммаВалFieldSpecified.Equals(value) != true)) {
                    this.суммаВалFieldSpecified = value;
                    this.OnPropertyChanged("СуммаВалSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОперБанкСчСчетУчетаБанкСчОперация));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КонтрагентSpecified {
            get {
                return контрагентFieldSpecified;
            }
            set {
                контрагентFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДокНомерSpecified {
            get {
                return докНомерFieldSpecified;
            }
            set {
                докНомерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДокДатаSpecified {
            get {
                return докДатаFieldSpecified;
            }
            set {
                докДатаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВидОперацииSpecified {
            get {
                return видОперацииFieldSpecified;
            }
            set {
                видОперацииFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НазначениеSpecified {
            get {
                return назначениеFieldSpecified;
            }
            set {
                назначениеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СчетДтSpecified {
            get {
                return счетДтFieldSpecified;
            }
            set {
                счетДтFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СчетКтSpecified {
            get {
                return счетКтFieldSpecified;
            }
            set {
                счетКтFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаSpecified {
            get {
                return суммаFieldSpecified;
            }
            set {
                суммаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетУчетаБанкСчОперация object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОперБанкСчСчетУчетаБанкСчОперация object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетУчетаБанкСчОперация object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетУчетаБанкСчОперация obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетУчетаБанкСчОперация);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетУчетаБанкСчОперация obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетУчетаБанкСчОперация Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОперБанкСчСчетУчетаБанкСчОперация)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетУчетаБанкСчОперация object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОперБанкСчСчетУчетаБанкСчОперация object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетУчетаБанкСчОперация object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетУчетаБанкСчОперация obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетУчетаБанкСчОперация);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетУчетаБанкСчОперация obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетУчетаБанкСчОперация LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент : System.ComponentModel.INotifyPropertyChanged {
        
        private string наименованиеField;
        
        private string иННField;
        
        private string кППField;
        
        private string договорField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наименованиеFieldSpecified;
        
        private bool иННFieldSpecified;
        
        private bool кППFieldSpecified;
        
        private bool договорFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Договор {
            get {
                return this.договорField;
            }
            set {
                if ((this.договорField != null)) {
                    if ((договорField.Equals(value) != true)) {
                        this.договорField = value;
                        this.OnPropertyChanged("Договор");
                    }
                }
                else {
                    this.договорField = value;
                    this.OnPropertyChanged("Договор");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДоговорSpecified {
            get {
                return договорFieldSpecified;
            }
            set {
                договорFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументОперБанкСчСчетУчетаБанкСчОперацияКонтрагент LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументОперБанкСчОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("383")]
        Item383,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочДохРасх : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументПрочДохРасхДоходы доходыField;
        
        private ФайлДокументПрочДохРасхРасходы расходыField;
        
        private ПериодКварталТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументПрочДохРасхОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool доходыFieldSpecified;
        
        private bool расходыFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументПрочДохРасхДоходы Доходы {
            get {
                if ((this.доходыField == null)) {
                    this.доходыField = new ФайлДокументПрочДохРасхДоходы();
                }
                return this.доходыField;
            }
            set {
                if ((this.доходыField != null)) {
                    if ((доходыField.Equals(value) != true)) {
                        this.доходыField = value;
                        this.OnPropertyChanged("Доходы");
                    }
                }
                else {
                    this.доходыField = value;
                    this.OnPropertyChanged("Доходы");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументПрочДохРасхРасходы Расходы {
            get {
                if ((this.расходыField == null)) {
                    this.расходыField = new ФайлДокументПрочДохРасхРасходы();
                }
                return this.расходыField;
            }
            set {
                if ((this.расходыField != null)) {
                    if ((расходыField.Equals(value) != true)) {
                        this.расходыField = value;
                        this.OnPropertyChanged("Расходы");
                    }
                }
                else {
                    this.расходыField = value;
                    this.OnPropertyChanged("Расходы");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодКварталТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрочДохРасхОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочДохРасх));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДоходыSpecified {
            get {
                return доходыFieldSpecified;
            }
            set {
                доходыFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РасходыSpecified {
            get {
                return расходыFieldSpecified;
            }
            set {
                расходыFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочДохРасх object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочДохРасх object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочДохРасх object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочДохРасх obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочДохРасх);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочДохРасх obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочДохРасх Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочДохРасх)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочДохРасх object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочДохРасх object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочДохРасх object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочДохРасх obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочДохРасх);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочДохРасх obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочДохРасх LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочДохРасхДоходы : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументПрочДохРасхДоходыПоСтатье> поСтатьеField;
        
        private string итогоField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поСтатьеFieldSpecified;
        
        private bool итогоFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ПоСтатье", Order=0)]
        public List<ФайлДокументПрочДохРасхДоходыПоСтатье> ПоСтатье {
            get {
                if ((this.поСтатьеField == null)) {
                    this.поСтатьеField = new List<ФайлДокументПрочДохРасхДоходыПоСтатье>();
                }
                return this.поСтатьеField;
            }
            set {
                if ((this.поСтатьеField != null)) {
                    if ((поСтатьеField.Equals(value) != true)) {
                        this.поСтатьеField = value;
                        this.OnPropertyChanged("ПоСтатье");
                    }
                }
                else {
                    this.поСтатьеField = value;
                    this.OnPropertyChanged("ПоСтатье");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Итого {
            get {
                return this.итогоField;
            }
            set {
                if ((this.итогоField != null)) {
                    if ((итогоField.Equals(value) != true)) {
                        this.итогоField = value;
                        this.OnPropertyChanged("Итого");
                    }
                }
                else {
                    this.итогоField = value;
                    this.OnPropertyChanged("Итого");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочДохРасхДоходы));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоСтатьеSpecified {
            get {
                return поСтатьеFieldSpecified;
            }
            set {
                поСтатьеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогоSpecified {
            get {
                return итогоFieldSpecified;
            }
            set {
                итогоFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочДохРасхДоходы object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочДохРасхДоходы object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочДохРасхДоходы object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочДохРасхДоходы obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочДохРасхДоходы);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочДохРасхДоходы obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочДохРасхДоходы Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочДохРасхДоходы)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочДохРасхДоходы object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочДохРасхДоходы object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочДохРасхДоходы object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочДохРасхДоходы obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочДохРасхДоходы);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочДохРасхДоходы obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочДохРасхДоходы LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочДохРасхДоходыПоСтатье : System.ComponentModel.INotifyPropertyChanged {
        
        private string наимField;
        
        private string суммаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наимFieldSpecified;
        
        private bool суммаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Сумма {
            get {
                return this.суммаField;
            }
            set {
                if ((this.суммаField != null)) {
                    if ((суммаField.Equals(value) != true)) {
                        this.суммаField = value;
                        this.OnPropertyChanged("Сумма");
                    }
                }
                else {
                    this.суммаField = value;
                    this.OnPropertyChanged("Сумма");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочДохРасхДоходыПоСтатье));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаSpecified {
            get {
                return суммаFieldSpecified;
            }
            set {
                суммаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочДохРасхДоходыПоСтатье object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочДохРасхДоходыПоСтатье object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочДохРасхДоходыПоСтатье object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочДохРасхДоходыПоСтатье obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочДохРасхДоходыПоСтатье);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочДохРасхДоходыПоСтатье obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочДохРасхДоходыПоСтатье Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочДохРасхДоходыПоСтатье)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочДохРасхДоходыПоСтатье object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочДохРасхДоходыПоСтатье object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочДохРасхДоходыПоСтатье object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочДохРасхДоходыПоСтатье obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочДохРасхДоходыПоСтатье);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочДохРасхДоходыПоСтатье obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочДохРасхДоходыПоСтатье LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочДохРасхРасходы : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументПрочДохРасхРасходыПоСтатье> поСтатьеField;
        
        private string итогоField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поСтатьеFieldSpecified;
        
        private bool итогоFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ПоСтатье", Order=0)]
        public List<ФайлДокументПрочДохРасхРасходыПоСтатье> ПоСтатье {
            get {
                if ((this.поСтатьеField == null)) {
                    this.поСтатьеField = new List<ФайлДокументПрочДохРасхРасходыПоСтатье>();
                }
                return this.поСтатьеField;
            }
            set {
                if ((this.поСтатьеField != null)) {
                    if ((поСтатьеField.Equals(value) != true)) {
                        this.поСтатьеField = value;
                        this.OnPropertyChanged("ПоСтатье");
                    }
                }
                else {
                    this.поСтатьеField = value;
                    this.OnPropertyChanged("ПоСтатье");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Итого {
            get {
                return this.итогоField;
            }
            set {
                if ((this.итогоField != null)) {
                    if ((итогоField.Equals(value) != true)) {
                        this.итогоField = value;
                        this.OnPropertyChanged("Итого");
                    }
                }
                else {
                    this.итогоField = value;
                    this.OnPropertyChanged("Итого");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочДохРасхРасходы));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоСтатьеSpecified {
            get {
                return поСтатьеFieldSpecified;
            }
            set {
                поСтатьеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогоSpecified {
            get {
                return итогоFieldSpecified;
            }
            set {
                итогоFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочДохРасхРасходы object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочДохРасхРасходы object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочДохРасхРасходы object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочДохРасхРасходы obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочДохРасхРасходы);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочДохРасхРасходы obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочДохРасхРасходы Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочДохРасхРасходы)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочДохРасхРасходы object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочДохРасхРасходы object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочДохРасхРасходы object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочДохРасхРасходы obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочДохРасхРасходы);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочДохРасхРасходы obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочДохРасхРасходы LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочДохРасхРасходыПоСтатье : System.ComponentModel.INotifyPropertyChanged {
        
        private string наимField;
        
        private string суммаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наимFieldSpecified;
        
        private bool суммаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Сумма {
            get {
                return this.суммаField;
            }
            set {
                if ((this.суммаField != null)) {
                    if ((суммаField.Equals(value) != true)) {
                        this.суммаField = value;
                        this.OnPropertyChanged("Сумма");
                    }
                }
                else {
                    this.суммаField = value;
                    this.OnPropertyChanged("Сумма");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочДохРасхРасходыПоСтатье));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаSpecified {
            get {
                return суммаFieldSpecified;
            }
            set {
                суммаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочДохРасхРасходыПоСтатье object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочДохРасхРасходыПоСтатье object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочДохРасхРасходыПоСтатье object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочДохРасхРасходыПоСтатье obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочДохРасхРасходыПоСтатье);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочДохРасхРасходыПоСтатье obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочДохРасхРасходыПоСтатье Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочДохРасхРасходыПоСтатье)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочДохРасхРасходыПоСтатье object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочДохРасхРасходыПоСтатье object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочДохРасхРасходыПоСтатье object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочДохРасхРасходыПоСтатье obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочДохРасхРасходыПоСтатье);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочДохРасхРасходыПоСтатье obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочДохРасхРасходыПоСтатье LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрочДохРасхОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("385")]
        Item385,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументРасшФинВлож : System.ComponentModel.INotifyPropertyChanged {
        
        private ФинВложенияТип финВложКсрField;
        
        private ФинВложенияТип финВложДсрField;
        
        private ПериодКварталТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументРасшФинВложОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool финВложКсрFieldSpecified;
        
        private bool финВложДсрFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФинВложенияТип ФинВложКср {
            get {
                if ((this.финВложКсрField == null)) {
                    this.финВложКсрField = new ФинВложенияТип();
                }
                return this.финВложКсрField;
            }
            set {
                if ((this.финВложКсрField != null)) {
                    if ((финВложКсрField.Equals(value) != true)) {
                        this.финВложКсрField = value;
                        this.OnPropertyChanged("ФинВложКср");
                    }
                }
                else {
                    this.финВложКсрField = value;
                    this.OnPropertyChanged("ФинВложКср");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФинВложенияТип ФинВложДср {
            get {
                if ((this.финВложДсрField == null)) {
                    this.финВложДсрField = new ФинВложенияТип();
                }
                return this.финВложДсрField;
            }
            set {
                if ((this.финВложДсрField != null)) {
                    if ((финВложДсрField.Equals(value) != true)) {
                        this.финВложДсрField = value;
                        this.OnPropertyChanged("ФинВложДср");
                    }
                }
                else {
                    this.финВложДсрField = value;
                    this.OnPropertyChanged("ФинВложДср");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодКварталТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументРасшФинВложОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументРасшФинВлож));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ФинВложКсрSpecified {
            get {
                return финВложКсрFieldSpecified;
            }
            set {
                финВложКсрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ФинВложДсрSpecified {
            get {
                return финВложДсрFieldSpecified;
            }
            set {
                финВложДсрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументРасшФинВлож object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументРасшФинВлож object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументРасшФинВлож object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументРасшФинВлож obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументРасшФинВлож);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументРасшФинВлож obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументРасшФинВлож Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументРасшФинВлож)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументРасшФинВлож object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументРасшФинВлож object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументРасшФинВлож object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументРасшФинВлож obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументРасшФинВлож);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументРасшФинВлож obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументРасшФинВлож LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументРасшФинВложОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументСтруктВыр : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументСтруктВырВыручка выручкаField;
        
        private List<ФайлДокументСтруктВырВыручкаВал> выручкаВалField;
        
        private ПериодМесяцТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументСтруктВырОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool выручкаFieldSpecified;
        
        private bool выручкаВалFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументСтруктВырВыручка Выручка {
            get {
                if ((this.выручкаField == null)) {
                    this.выручкаField = new ФайлДокументСтруктВырВыручка();
                }
                return this.выручкаField;
            }
            set {
                if ((this.выручкаField != null)) {
                    if ((выручкаField.Equals(value) != true)) {
                        this.выручкаField = value;
                        this.OnPropertyChanged("Выручка");
                    }
                }
                else {
                    this.выручкаField = value;
                    this.OnPropertyChanged("Выручка");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ВыручкаВал", Order=1)]
        public List<ФайлДокументСтруктВырВыручкаВал> ВыручкаВал {
            get {
                if ((this.выручкаВалField == null)) {
                    this.выручкаВалField = new List<ФайлДокументСтруктВырВыручкаВал>();
                }
                return this.выручкаВалField;
            }
            set {
                if ((this.выручкаВалField != null)) {
                    if ((выручкаВалField.Equals(value) != true)) {
                        this.выручкаВалField = value;
                        this.OnPropertyChanged("ВыручкаВал");
                    }
                }
                else {
                    this.выручкаВалField = value;
                    this.OnPropertyChanged("ВыручкаВал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодМесяцТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументСтруктВырОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСтруктВыр));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВыручкаSpecified {
            get {
                return выручкаFieldSpecified;
            }
            set {
                выручкаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВыручкаВалSpecified {
            get {
                return выручкаВалFieldSpecified;
            }
            set {
                выручкаВалFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСтруктВыр object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСтруктВыр object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСтруктВыр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСтруктВыр obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСтруктВыр);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументСтруктВыр obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументСтруктВыр Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСтруктВыр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументСтруктВыр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСтруктВыр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСтруктВыр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументСтруктВыр obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСтруктВыр);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументСтруктВыр obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументСтруктВыр LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументСтруктВырВыручка : System.ComponentModel.INotifyPropertyChanged {
        
        private decimal госЗакФОField;
        
        private decimal госЗакСРФField;
        
        private decimal регВидДеятField;
        
        private decimal постТрансфField;
        
        private decimal итогоField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool госЗакФОFieldSpecified;
        
        private bool госЗакСРФFieldSpecified;
        
        private bool регВидДеятFieldSpecified;
        
        private bool постТрансфFieldSpecified;
        
        private bool итогоFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ГосЗакФО {
            get {
                return this.госЗакФОField;
            }
            set {
                if ((this.госЗакФОField != null)) {
                    if ((госЗакФОField.Equals(value) != true)) {
                        this.госЗакФОField = value;
                        this.OnPropertyChanged("ГосЗакФО");
                    }
                }
                else {
                    this.госЗакФОField = value;
                    this.OnPropertyChanged("ГосЗакФО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ГосЗакСРФ {
            get {
                return this.госЗакСРФField;
            }
            set {
                if ((this.госЗакСРФField != null)) {
                    if ((госЗакСРФField.Equals(value) != true)) {
                        this.госЗакСРФField = value;
                        this.OnPropertyChanged("ГосЗакСРФ");
                    }
                }
                else {
                    this.госЗакСРФField = value;
                    this.OnPropertyChanged("ГосЗакСРФ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal РегВидДеят {
            get {
                return this.регВидДеятField;
            }
            set {
                if ((this.регВидДеятField != null)) {
                    if ((регВидДеятField.Equals(value) != true)) {
                        this.регВидДеятField = value;
                        this.OnPropertyChanged("РегВидДеят");
                    }
                }
                else {
                    this.регВидДеятField = value;
                    this.OnPropertyChanged("РегВидДеят");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ПостТрансф {
            get {
                return this.постТрансфField;
            }
            set {
                if ((this.постТрансфField != null)) {
                    if ((постТрансфField.Equals(value) != true)) {
                        this.постТрансфField = value;
                        this.OnPropertyChanged("ПостТрансф");
                    }
                }
                else {
                    this.постТрансфField = value;
                    this.OnPropertyChanged("ПостТрансф");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Итого {
            get {
                return this.итогоField;
            }
            set {
                if ((this.итогоField != null)) {
                    if ((итогоField.Equals(value) != true)) {
                        this.итогоField = value;
                        this.OnPropertyChanged("Итого");
                    }
                }
                else {
                    this.итогоField = value;
                    this.OnPropertyChanged("Итого");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСтруктВырВыручка));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ГосЗакФОSpecified {
            get {
                return госЗакФОFieldSpecified;
            }
            set {
                госЗакФОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ГосЗакСРФSpecified {
            get {
                return госЗакСРФFieldSpecified;
            }
            set {
                госЗакСРФFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РегВидДеятSpecified {
            get {
                return регВидДеятFieldSpecified;
            }
            set {
                регВидДеятFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПостТрансфSpecified {
            get {
                return постТрансфFieldSpecified;
            }
            set {
                постТрансфFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогоSpecified {
            get {
                return итогоFieldSpecified;
            }
            set {
                итогоFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСтруктВырВыручка object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСтруктВырВыручка object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСтруктВырВыручка object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСтруктВырВыручка obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСтруктВырВыручка);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументСтруктВырВыручка obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументСтруктВырВыручка Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСтруктВырВыручка)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументСтруктВырВыручка object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСтруктВырВыручка object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСтруктВырВыручка object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументСтруктВырВыручка obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСтруктВырВыручка);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументСтруктВырВыручка obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументСтруктВырВыручка LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументСтруктВырВыручкаВал : System.ComponentModel.INotifyPropertyChanged {
        
        private string валютаField;
        
        private decimal сумРубField;
        
        private decimal сумВалField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool валютаFieldSpecified;
        
        private bool сумРубFieldSpecified;
        
        private bool сумВалFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Валюта {
            get {
                return this.валютаField;
            }
            set {
                if ((this.валютаField != null)) {
                    if ((валютаField.Equals(value) != true)) {
                        this.валютаField = value;
                        this.OnPropertyChanged("Валюта");
                    }
                }
                else {
                    this.валютаField = value;
                    this.OnPropertyChanged("Валюта");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СумРуб {
            get {
                return this.сумРубField;
            }
            set {
                if ((this.сумРубField != null)) {
                    if ((сумРубField.Equals(value) != true)) {
                        this.сумРубField = value;
                        this.OnPropertyChanged("СумРуб");
                    }
                }
                else {
                    this.сумРубField = value;
                    this.OnPropertyChanged("СумРуб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СумВал {
            get {
                return this.сумВалField;
            }
            set {
                if ((this.сумВалField != null)) {
                    if ((сумВалField.Equals(value) != true)) {
                        this.сумВалField = value;
                        this.OnPropertyChanged("СумВал");
                    }
                }
                else {
                    this.сумВалField = value;
                    this.OnPropertyChanged("СумВал");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументСтруктВырВыручкаВал));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВалютаSpecified {
            get {
                return валютаFieldSpecified;
            }
            set {
                валютаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумРубSpecified {
            get {
                return сумРубFieldSpecified;
            }
            set {
                сумРубFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумВалSpecified {
            get {
                return сумВалFieldSpecified;
            }
            set {
                сумВалFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументСтруктВырВыручкаВал object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументСтруктВырВыручкаВал object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументСтруктВырВыручкаВал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументСтруктВырВыручкаВал obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСтруктВырВыручкаВал);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументСтруктВырВыручкаВал obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументСтруктВырВыручкаВал Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументСтруктВырВыручкаВал)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументСтруктВырВыручкаВал object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументСтруктВырВыручкаВал object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументСтруктВырВыручкаВал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументСтруктВырВыручкаВал obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументСтруктВырВыручкаВал);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументСтруктВырВыручкаВал obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументСтруктВырВыручкаВал LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументСтруктВырОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказатели : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументПрочиеПоказателиСреднЧисл среднЧислField;
        
        private ФайлДокументПрочиеПоказателиФОТ фОТField;
        
        private ФайлДокументПрочиеПоказателиВыплЗарпл выплЗарплField;
        
        private ФайлДокументПрочиеПоказателиПросрЗарпл просрЗарплField;
        
        private ФайлДокументПрочиеПоказателиНезСтр незСтрField;
        
        private ФайлДокументПрочиеПоказателиИзмДоч измДочField;
        
        private ФайлДокументПрочиеПоказателиДоляФО доляФОField;
        
        private ФайлДокументПрочиеПоказателиДоляСубРФ доляСубРФField;
        
        private ФайлДокументПрочиеПоказателиИзмСост измСостField;
        
        private ФайлДокументПрочиеПоказателиПозРынк позРынкField;
        
        private ФайлДокументПрочиеПоказателиЗадКонтрУкр задКонтрУкрField;
        
        private ФайлДокументПрочиеПоказателиКорпДог корпДогField;
        
        private ФайлДокументПрочиеПоказателиИзмУстав измУставField;
        
        private ФайлДокументПрочиеПоказателиОбПФИ обПФИField;
        
        private ПериодМесяцТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументПрочиеПоказателиОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool среднЧислFieldSpecified;
        
        private bool фОТFieldSpecified;
        
        private bool выплЗарплFieldSpecified;
        
        private bool просрЗарплFieldSpecified;
        
        private bool незСтрFieldSpecified;
        
        private bool измДочFieldSpecified;
        
        private bool доляФОFieldSpecified;
        
        private bool доляСубРФFieldSpecified;
        
        private bool измСостFieldSpecified;
        
        private bool позРынкFieldSpecified;
        
        private bool задКонтрУкрFieldSpecified;
        
        private bool корпДогFieldSpecified;
        
        private bool измУставFieldSpecified;
        
        private bool обПФИFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументПрочиеПоказателиСреднЧисл СреднЧисл {
            get {
                if ((this.среднЧислField == null)) {
                    this.среднЧислField = new ФайлДокументПрочиеПоказателиСреднЧисл();
                }
                return this.среднЧислField;
            }
            set {
                if ((this.среднЧислField != null)) {
                    if ((среднЧислField.Equals(value) != true)) {
                        this.среднЧислField = value;
                        this.OnPropertyChanged("СреднЧисл");
                    }
                }
                else {
                    this.среднЧислField = value;
                    this.OnPropertyChanged("СреднЧисл");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументПрочиеПоказателиФОТ ФОТ {
            get {
                if ((this.фОТField == null)) {
                    this.фОТField = new ФайлДокументПрочиеПоказателиФОТ();
                }
                return this.фОТField;
            }
            set {
                if ((this.фОТField != null)) {
                    if ((фОТField.Equals(value) != true)) {
                        this.фОТField = value;
                        this.OnPropertyChanged("ФОТ");
                    }
                }
                else {
                    this.фОТField = value;
                    this.OnPropertyChanged("ФОТ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ФайлДокументПрочиеПоказателиВыплЗарпл ВыплЗарпл {
            get {
                if ((this.выплЗарплField == null)) {
                    this.выплЗарплField = new ФайлДокументПрочиеПоказателиВыплЗарпл();
                }
                return this.выплЗарплField;
            }
            set {
                if ((this.выплЗарплField != null)) {
                    if ((выплЗарплField.Equals(value) != true)) {
                        this.выплЗарплField = value;
                        this.OnPropertyChanged("ВыплЗарпл");
                    }
                }
                else {
                    this.выплЗарплField = value;
                    this.OnPropertyChanged("ВыплЗарпл");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ФайлДокументПрочиеПоказателиПросрЗарпл ПросрЗарпл {
            get {
                if ((this.просрЗарплField == null)) {
                    this.просрЗарплField = new ФайлДокументПрочиеПоказателиПросрЗарпл();
                }
                return this.просрЗарплField;
            }
            set {
                if ((this.просрЗарплField != null)) {
                    if ((просрЗарплField.Equals(value) != true)) {
                        this.просрЗарплField = value;
                        this.OnPropertyChanged("ПросрЗарпл");
                    }
                }
                else {
                    this.просрЗарплField = value;
                    this.OnPropertyChanged("ПросрЗарпл");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ФайлДокументПрочиеПоказателиНезСтр НезСтр {
            get {
                if ((this.незСтрField == null)) {
                    this.незСтрField = new ФайлДокументПрочиеПоказателиНезСтр();
                }
                return this.незСтрField;
            }
            set {
                if ((this.незСтрField != null)) {
                    if ((незСтрField.Equals(value) != true)) {
                        this.незСтрField = value;
                        this.OnPropertyChanged("НезСтр");
                    }
                }
                else {
                    this.незСтрField = value;
                    this.OnPropertyChanged("НезСтр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ФайлДокументПрочиеПоказателиИзмДоч ИзмДоч {
            get {
                if ((this.измДочField == null)) {
                    this.измДочField = new ФайлДокументПрочиеПоказателиИзмДоч();
                }
                return this.измДочField;
            }
            set {
                if ((this.измДочField != null)) {
                    if ((измДочField.Equals(value) != true)) {
                        this.измДочField = value;
                        this.OnPropertyChanged("ИзмДоч");
                    }
                }
                else {
                    this.измДочField = value;
                    this.OnPropertyChanged("ИзмДоч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ФайлДокументПрочиеПоказателиДоляФО ДоляФО {
            get {
                if ((this.доляФОField == null)) {
                    this.доляФОField = new ФайлДокументПрочиеПоказателиДоляФО();
                }
                return this.доляФОField;
            }
            set {
                if ((this.доляФОField != null)) {
                    if ((доляФОField.Equals(value) != true)) {
                        this.доляФОField = value;
                        this.OnPropertyChanged("ДоляФО");
                    }
                }
                else {
                    this.доляФОField = value;
                    this.OnPropertyChanged("ДоляФО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public ФайлДокументПрочиеПоказателиДоляСубРФ ДоляСубРФ {
            get {
                if ((this.доляСубРФField == null)) {
                    this.доляСубРФField = new ФайлДокументПрочиеПоказателиДоляСубРФ();
                }
                return this.доляСубРФField;
            }
            set {
                if ((this.доляСубРФField != null)) {
                    if ((доляСубРФField.Equals(value) != true)) {
                        this.доляСубРФField = value;
                        this.OnPropertyChanged("ДоляСубРФ");
                    }
                }
                else {
                    this.доляСубРФField = value;
                    this.OnPropertyChanged("ДоляСубРФ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public ФайлДокументПрочиеПоказателиИзмСост ИзмСост {
            get {
                if ((this.измСостField == null)) {
                    this.измСостField = new ФайлДокументПрочиеПоказателиИзмСост();
                }
                return this.измСостField;
            }
            set {
                if ((this.измСостField != null)) {
                    if ((измСостField.Equals(value) != true)) {
                        this.измСостField = value;
                        this.OnPropertyChanged("ИзмСост");
                    }
                }
                else {
                    this.измСостField = value;
                    this.OnPropertyChanged("ИзмСост");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public ФайлДокументПрочиеПоказателиПозРынк ПозРынк {
            get {
                if ((this.позРынкField == null)) {
                    this.позРынкField = new ФайлДокументПрочиеПоказателиПозРынк();
                }
                return this.позРынкField;
            }
            set {
                if ((this.позРынкField != null)) {
                    if ((позРынкField.Equals(value) != true)) {
                        this.позРынкField = value;
                        this.OnPropertyChanged("ПозРынк");
                    }
                }
                else {
                    this.позРынкField = value;
                    this.OnPropertyChanged("ПозРынк");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public ФайлДокументПрочиеПоказателиЗадКонтрУкр ЗадКонтрУкр {
            get {
                if ((this.задКонтрУкрField == null)) {
                    this.задКонтрУкрField = new ФайлДокументПрочиеПоказателиЗадКонтрУкр();
                }
                return this.задКонтрУкрField;
            }
            set {
                if ((this.задКонтрУкрField != null)) {
                    if ((задКонтрУкрField.Equals(value) != true)) {
                        this.задКонтрУкрField = value;
                        this.OnPropertyChanged("ЗадКонтрУкр");
                    }
                }
                else {
                    this.задКонтрУкрField = value;
                    this.OnPropertyChanged("ЗадКонтрУкр");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public ФайлДокументПрочиеПоказателиКорпДог КорпДог {
            get {
                if ((this.корпДогField == null)) {
                    this.корпДогField = new ФайлДокументПрочиеПоказателиКорпДог();
                }
                return this.корпДогField;
            }
            set {
                if ((this.корпДогField != null)) {
                    if ((корпДогField.Equals(value) != true)) {
                        this.корпДогField = value;
                        this.OnPropertyChanged("КорпДог");
                    }
                }
                else {
                    this.корпДогField = value;
                    this.OnPropertyChanged("КорпДог");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public ФайлДокументПрочиеПоказателиИзмУстав ИзмУстав {
            get {
                if ((this.измУставField == null)) {
                    this.измУставField = new ФайлДокументПрочиеПоказателиИзмУстав();
                }
                return this.измУставField;
            }
            set {
                if ((this.измУставField != null)) {
                    if ((измУставField.Equals(value) != true)) {
                        this.измУставField = value;
                        this.OnPropertyChanged("ИзмУстав");
                    }
                }
                else {
                    this.измУставField = value;
                    this.OnPropertyChanged("ИзмУстав");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public ФайлДокументПрочиеПоказателиОбПФИ ОбПФИ {
            get {
                if ((this.обПФИField == null)) {
                    this.обПФИField = new ФайлДокументПрочиеПоказателиОбПФИ();
                }
                return this.обПФИField;
            }
            set {
                if ((this.обПФИField != null)) {
                    if ((обПФИField.Equals(value) != true)) {
                        this.обПФИField = value;
                        this.OnPropertyChanged("ОбПФИ");
                    }
                }
                else {
                    this.обПФИField = value;
                    this.OnPropertyChanged("ОбПФИ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодМесяцТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрочиеПоказателиОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказатели));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СреднЧислSpecified {
            get {
                return среднЧислFieldSpecified;
            }
            set {
                среднЧислFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ФОТSpecified {
            get {
                return фОТFieldSpecified;
            }
            set {
                фОТFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВыплЗарплSpecified {
            get {
                return выплЗарплFieldSpecified;
            }
            set {
                выплЗарплFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрЗарплSpecified {
            get {
                return просрЗарплFieldSpecified;
            }
            set {
                просрЗарплFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НезСтрSpecified {
            get {
                return незСтрFieldSpecified;
            }
            set {
                незСтрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмДочSpecified {
            get {
                return измДочFieldSpecified;
            }
            set {
                измДочFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДоляФОSpecified {
            get {
                return доляФОFieldSpecified;
            }
            set {
                доляФОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДоляСубРФSpecified {
            get {
                return доляСубРФFieldSpecified;
            }
            set {
                доляСубРФFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмСостSpecified {
            get {
                return измСостFieldSpecified;
            }
            set {
                измСостFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПозРынкSpecified {
            get {
                return позРынкFieldSpecified;
            }
            set {
                позРынкFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадКонтрУкрSpecified {
            get {
                return задКонтрУкрFieldSpecified;
            }
            set {
                задКонтрУкрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КорпДогSpecified {
            get {
                return корпДогFieldSpecified;
            }
            set {
                корпДогFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмУставSpecified {
            get {
                return измУставFieldSpecified;
            }
            set {
                измУставFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбПФИSpecified {
            get {
                return обПФИFieldSpecified;
            }
            set {
                обПФИFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказатели object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказатели object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказатели object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказатели obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказатели);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказатели obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказатели Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказатели)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказатели object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказатели object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказатели object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказатели obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказатели);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказатели obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказатели LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиСреднЧисл : System.ComponentModel.INotifyPropertyChanged {
        
        private string величинаField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool величинаFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Величина {
            get {
                return this.величинаField;
            }
            set {
                if ((this.величинаField != null)) {
                    if ((величинаField.Equals(value) != true)) {
                        this.величинаField = value;
                        this.OnPropertyChanged("Величина");
                    }
                }
                else {
                    this.величинаField = value;
                    this.OnPropertyChanged("Величина");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиСреднЧисл));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВеличинаSpecified {
            get {
                return величинаFieldSpecified;
            }
            set {
                величинаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиСреднЧисл object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиСреднЧисл object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиСреднЧисл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиСреднЧисл obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиСреднЧисл);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиСреднЧисл obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиСреднЧисл Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиСреднЧисл)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиСреднЧисл object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиСреднЧисл object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиСреднЧисл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиСреднЧисл obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиСреднЧисл);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиСреднЧисл obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиСреднЧисл LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиФОТ : System.ComponentModel.INotifyPropertyChanged {
        
        private decimal величинаField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool величинаFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Величина {
            get {
                return this.величинаField;
            }
            set {
                if ((this.величинаField != null)) {
                    if ((величинаField.Equals(value) != true)) {
                        this.величинаField = value;
                        this.OnPropertyChanged("Величина");
                    }
                }
                else {
                    this.величинаField = value;
                    this.OnPropertyChanged("Величина");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиФОТ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВеличинаSpecified {
            get {
                return величинаFieldSpecified;
            }
            set {
                величинаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиФОТ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиФОТ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиФОТ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиФОТ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиФОТ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиФОТ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиФОТ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиФОТ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиФОТ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиФОТ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиФОТ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиФОТ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиФОТ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиФОТ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиФОТ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиВыплЗарпл : System.ComponentModel.INotifyPropertyChanged {
        
        private decimal величинаField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool величинаFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Величина {
            get {
                return this.величинаField;
            }
            set {
                if ((this.величинаField != null)) {
                    if ((величинаField.Equals(value) != true)) {
                        this.величинаField = value;
                        this.OnPropertyChanged("Величина");
                    }
                }
                else {
                    this.величинаField = value;
                    this.OnPropertyChanged("Величина");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиВыплЗарпл));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВеличинаSpecified {
            get {
                return величинаFieldSpecified;
            }
            set {
                величинаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиВыплЗарпл object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиВыплЗарпл object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиВыплЗарпл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиВыплЗарпл obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиВыплЗарпл);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиВыплЗарпл obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиВыплЗарпл Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиВыплЗарпл)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиВыплЗарпл object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиВыплЗарпл object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиВыплЗарпл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиВыплЗарпл obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиВыплЗарпл);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиВыплЗарпл obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиВыплЗарпл LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиПросрЗарпл : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументПрочиеПоказателиПросрЗарплПризнак признакField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool признакFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрочиеПоказателиПросрЗарплПризнак Признак {
            get {
                return this.признакField;
            }
            set {
                if ((признакField.Equals(value) != true)) {
                    this.признакField = value;
                    this.OnPropertyChanged("Признак");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиПросрЗарпл));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПризнакSpecified {
            get {
                return признакFieldSpecified;
            }
            set {
                признакFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиПросрЗарпл object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиПросрЗарпл object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиПросрЗарпл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиПросрЗарпл obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиПросрЗарпл);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиПросрЗарпл obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиПросрЗарпл Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиПросрЗарпл)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиПросрЗарпл object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиПросрЗарпл object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиПросрЗарпл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиПросрЗарпл obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиПросрЗарпл);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиПросрЗарпл obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиПросрЗарпл LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрочиеПоказателиПросрЗарплПризнак {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиНезСтр : System.ComponentModel.INotifyPropertyChanged {
        
        private decimal величинаField;
        
        private string отрБалField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool величинаFieldSpecified;
        
        private bool отрБалFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Величина {
            get {
                return this.величинаField;
            }
            set {
                if ((this.величинаField != null)) {
                    if ((величинаField.Equals(value) != true)) {
                        this.величинаField = value;
                        this.OnPropertyChanged("Величина");
                    }
                }
                else {
                    this.величинаField = value;
                    this.OnPropertyChanged("Величина");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОтрБал {
            get {
                return this.отрБалField;
            }
            set {
                if ((this.отрБалField != null)) {
                    if ((отрБалField.Equals(value) != true)) {
                        this.отрБалField = value;
                        this.OnPropertyChanged("ОтрБал");
                    }
                }
                else {
                    this.отрБалField = value;
                    this.OnPropertyChanged("ОтрБал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиНезСтр));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВеличинаSpecified {
            get {
                return величинаFieldSpecified;
            }
            set {
                величинаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтрБалSpecified {
            get {
                return отрБалFieldSpecified;
            }
            set {
                отрБалFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиНезСтр object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиНезСтр object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиНезСтр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиНезСтр obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиНезСтр);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиНезСтр obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиНезСтр Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиНезСтр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиНезСтр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиНезСтр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиНезСтр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиНезСтр obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиНезСтр);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиНезСтр obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиНезСтр LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиИзмДоч : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументПрочиеПоказателиИзмДочПризнак признакField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool признакFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрочиеПоказателиИзмДочПризнак Признак {
            get {
                return this.признакField;
            }
            set {
                if ((признакField.Equals(value) != true)) {
                    this.признакField = value;
                    this.OnPropertyChanged("Признак");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиИзмДоч));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПризнакSpecified {
            get {
                return признакFieldSpecified;
            }
            set {
                признакFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиИзмДоч object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиИзмДоч object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиИзмДоч object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиИзмДоч obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиИзмДоч);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиИзмДоч obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиИзмДоч Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиИзмДоч)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиИзмДоч object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиИзмДоч object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиИзмДоч object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиИзмДоч obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиИзмДоч);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиИзмДоч obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиИзмДоч LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрочиеПоказателиИзмДочПризнак {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиДоляФО : System.ComponentModel.INotifyPropertyChanged {
        
        private string числField;
        
        private string знамField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool числFieldSpecified;
        
        private bool знамFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Числ {
            get {
                return this.числField;
            }
            set {
                if ((this.числField != null)) {
                    if ((числField.Equals(value) != true)) {
                        this.числField = value;
                        this.OnPropertyChanged("Числ");
                    }
                }
                else {
                    this.числField = value;
                    this.OnPropertyChanged("Числ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Знам {
            get {
                return this.знамField;
            }
            set {
                if ((this.знамField != null)) {
                    if ((знамField.Equals(value) != true)) {
                        this.знамField = value;
                        this.OnPropertyChanged("Знам");
                    }
                }
                else {
                    this.знамField = value;
                    this.OnPropertyChanged("Знам");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиДоляФО));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ЧислSpecified {
            get {
                return числFieldSpecified;
            }
            set {
                числFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗнамSpecified {
            get {
                return знамFieldSpecified;
            }
            set {
                знамFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиДоляФО object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиДоляФО object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиДоляФО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиДоляФО obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиДоляФО);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиДоляФО obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиДоляФО Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиДоляФО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиДоляФО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиДоляФО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиДоляФО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиДоляФО obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиДоляФО);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиДоляФО obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиДоляФО LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиДоляСубРФ : System.ComponentModel.INotifyPropertyChanged {
        
        private string числField;
        
        private string знамField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool числFieldSpecified;
        
        private bool знамFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Числ {
            get {
                return this.числField;
            }
            set {
                if ((this.числField != null)) {
                    if ((числField.Equals(value) != true)) {
                        this.числField = value;
                        this.OnPropertyChanged("Числ");
                    }
                }
                else {
                    this.числField = value;
                    this.OnPropertyChanged("Числ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Знам {
            get {
                return this.знамField;
            }
            set {
                if ((this.знамField != null)) {
                    if ((знамField.Equals(value) != true)) {
                        this.знамField = value;
                        this.OnPropertyChanged("Знам");
                    }
                }
                else {
                    this.знамField = value;
                    this.OnPropertyChanged("Знам");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиДоляСубРФ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ЧислSpecified {
            get {
                return числFieldSpecified;
            }
            set {
                числFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗнамSpecified {
            get {
                return знамFieldSpecified;
            }
            set {
                знамFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиДоляСубРФ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиДоляСубРФ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиДоляСубРФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиДоляСубРФ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиДоляСубРФ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиДоляСубРФ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиДоляСубРФ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиДоляСубРФ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиДоляСубРФ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиДоляСубРФ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиДоляСубРФ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиДоляСубРФ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиДоляСубРФ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиДоляСубРФ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиДоляСубРФ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиИзмСост : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументПрочиеПоказателиИзмСостПризнак признакField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool признакFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрочиеПоказателиИзмСостПризнак Признак {
            get {
                return this.признакField;
            }
            set {
                if ((признакField.Equals(value) != true)) {
                    this.признакField = value;
                    this.OnPropertyChanged("Признак");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиИзмСост));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПризнакSpecified {
            get {
                return признакFieldSpecified;
            }
            set {
                признакFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиИзмСост object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиИзмСост object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиИзмСост object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиИзмСост obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиИзмСост);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиИзмСост obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиИзмСост Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиИзмСост)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиИзмСост object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиИзмСост object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиИзмСост object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиИзмСост obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиИзмСост);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиИзмСост obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиИзмСост LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрочиеПоказателиИзмСостПризнак {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиПозРынк : System.ComponentModel.INotifyPropertyChanged {
        
        private decimal величинаField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool величинаFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Величина {
            get {
                return this.величинаField;
            }
            set {
                if ((this.величинаField != null)) {
                    if ((величинаField.Equals(value) != true)) {
                        this.величинаField = value;
                        this.OnPropertyChanged("Величина");
                    }
                }
                else {
                    this.величинаField = value;
                    this.OnPropertyChanged("Величина");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиПозРынк));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ВеличинаSpecified {
            get {
                return величинаFieldSpecified;
            }
            set {
                величинаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиПозРынк object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиПозРынк object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиПозРынк object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиПозРынк obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиПозРынк);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиПозРынк obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиПозРынк Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиПозРынк)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиПозРынк object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиПозРынк object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиПозРынк object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиПозРынк obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиПозРынк);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиПозРынк obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиПозРынк LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиЗадКонтрУкр : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументПрочиеПоказателиЗадКонтрУкрПризнак признакField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool признакFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрочиеПоказателиЗадКонтрУкрПризнак Признак {
            get {
                return this.признакField;
            }
            set {
                if ((признакField.Equals(value) != true)) {
                    this.признакField = value;
                    this.OnPropertyChanged("Признак");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиЗадКонтрУкр));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПризнакSpecified {
            get {
                return признакFieldSpecified;
            }
            set {
                признакFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиЗадКонтрУкр object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиЗадКонтрУкр object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиЗадКонтрУкр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиЗадКонтрУкр obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиЗадКонтрУкр);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиЗадКонтрУкр obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиЗадКонтрУкр Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиЗадКонтрУкр)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиЗадКонтрУкр object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиЗадКонтрУкр object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиЗадКонтрУкр object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиЗадКонтрУкр obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиЗадКонтрУкр);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиЗадКонтрУкр obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиЗадКонтрУкр LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрочиеПоказателиЗадКонтрУкрПризнак {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиКорпДог : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументПрочиеПоказателиКорпДогПризнак признакField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool признакFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрочиеПоказателиКорпДогПризнак Признак {
            get {
                return this.признакField;
            }
            set {
                if ((признакField.Equals(value) != true)) {
                    this.признакField = value;
                    this.OnPropertyChanged("Признак");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиКорпДог));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПризнакSpecified {
            get {
                return признакFieldSpecified;
            }
            set {
                признакFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиКорпДог object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиКорпДог object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиКорпДог object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиКорпДог obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиКорпДог);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиКорпДог obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиКорпДог Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиКорпДог)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиКорпДог object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиКорпДог object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиКорпДог object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиКорпДог obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиКорпДог);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиКорпДог obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиКорпДог LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрочиеПоказателиКорпДогПризнак {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиИзмУстав : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументПрочиеПоказателиИзмУставПризнак признакField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool признакFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрочиеПоказателиИзмУставПризнак Признак {
            get {
                return this.признакField;
            }
            set {
                if ((признакField.Equals(value) != true)) {
                    this.признакField = value;
                    this.OnPropertyChanged("Признак");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиИзмУстав));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПризнакSpecified {
            get {
                return признакFieldSpecified;
            }
            set {
                признакFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиИзмУстав object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиИзмУстав object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиИзмУстав object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиИзмУстав obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиИзмУстав);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиИзмУстав obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиИзмУстав Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиИзмУстав)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиИзмУстав object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиИзмУстав object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиИзмУстав object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиИзмУстав obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиИзмУстав);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиИзмУстав obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиИзмУстав LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрочиеПоказателиИзмУставПризнак {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументПрочиеПоказателиОбПФИ : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументПрочиеПоказателиОбПФИПризнак признакField;
        
        private string комментField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool признакFieldSpecified;
        
        private bool комментFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументПрочиеПоказателиОбПФИПризнак Признак {
            get {
                return this.признакField;
            }
            set {
                if ((признакField.Equals(value) != true)) {
                    this.признакField = value;
                    this.OnPropertyChanged("Признак");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Коммент {
            get {
                return this.комментField;
            }
            set {
                if ((this.комментField != null)) {
                    if ((комментField.Equals(value) != true)) {
                        this.комментField = value;
                        this.OnPropertyChanged("Коммент");
                    }
                }
                else {
                    this.комментField = value;
                    this.OnPropertyChanged("Коммент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументПрочиеПоказателиОбПФИ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПризнакSpecified {
            get {
                return признакFieldSpecified;
            }
            set {
                признакFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КомментSpecified {
            get {
                return комментFieldSpecified;
            }
            set {
                комментFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиОбПФИ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументПрочиеПоказателиОбПФИ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиОбПФИ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиОбПФИ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиОбПФИ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументПрочиеПоказателиОбПФИ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиОбПФИ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументПрочиеПоказателиОбПФИ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументПрочиеПоказателиОбПФИ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументПрочиеПоказателиОбПФИ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументПрочиеПоказателиОбПФИ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиОбПФИ obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументПрочиеПоказателиОбПФИ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументПрочиеПоказателиОбПФИ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументПрочиеПоказателиОбПФИ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрочиеПоказателиОбПФИПризнак {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументПрочиеПоказателиОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолж : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжИнтервал> интервалыField;
        
        private List<ФайлДокументДебКредЗадолжЗадолжВид> дебДсрField;
        
        private List<ФайлДокументДебКредЗадолжЗадолжВид1> дебКсрField;
        
        private List<ФайлДокументДебКредЗадолжЗадолжВид2> кредДсрField;
        
        private List<ФайлДокументДебКредЗадолжЗадолжВид3> кредКсрField;
        
        private ПериодКварталТип периодField;
        
        private string отчетГодField;
        
        private ФайлДокументДебКредЗадолжОКЕИ оКЕИField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool интервалыFieldSpecified;
        
        private bool дебДсрFieldSpecified;
        
        private bool дебКсрFieldSpecified;
        
        private bool кредДсрFieldSpecified;
        
        private bool кредКсрFieldSpecified;
        
        private bool периодFieldSpecified;
        
        private bool отчетГодFieldSpecified;
        
        private bool оКЕИFieldSpecified;
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Интервал", IsNullable=false)]
        public List<ФайлДокументДебКредЗадолжИнтервал> Интервалы {
            get {
                if ((this.интервалыField == null)) {
                    this.интервалыField = new List<ФайлДокументДебКредЗадолжИнтервал>();
                }
                return this.интервалыField;
            }
            set {
                if ((this.интервалыField != null)) {
                    if ((интервалыField.Equals(value) != true)) {
                        this.интервалыField = value;
                        this.OnPropertyChanged("Интервалы");
                    }
                }
                else {
                    this.интервалыField = value;
                    this.OnPropertyChanged("Интервалы");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ЗадолжВид", IsNullable=false)]
        public List<ФайлДокументДебКредЗадолжЗадолжВид> ДебДср {
            get {
                if ((this.дебДсрField == null)) {
                    this.дебДсрField = new List<ФайлДокументДебКредЗадолжЗадолжВид>();
                }
                return this.дебДсрField;
            }
            set {
                if ((this.дебДсрField != null)) {
                    if ((дебДсрField.Equals(value) != true)) {
                        this.дебДсрField = value;
                        this.OnPropertyChanged("ДебДср");
                    }
                }
                else {
                    this.дебДсрField = value;
                    this.OnPropertyChanged("ДебДср");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ЗадолжВид", IsNullable=false)]
        public List<ФайлДокументДебКредЗадолжЗадолжВид1> ДебКср {
            get {
                if ((this.дебКсрField == null)) {
                    this.дебКсрField = new List<ФайлДокументДебКредЗадолжЗадолжВид1>();
                }
                return this.дебКсрField;
            }
            set {
                if ((this.дебКсрField != null)) {
                    if ((дебКсрField.Equals(value) != true)) {
                        this.дебКсрField = value;
                        this.OnPropertyChanged("ДебКср");
                    }
                }
                else {
                    this.дебКсрField = value;
                    this.OnPropertyChanged("ДебКср");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ЗадолжВид", IsNullable=false)]
        public List<ФайлДокументДебКредЗадолжЗадолжВид2> КредДср {
            get {
                if ((this.кредДсрField == null)) {
                    this.кредДсрField = new List<ФайлДокументДебКредЗадолжЗадолжВид2>();
                }
                return this.кредДсрField;
            }
            set {
                if ((this.кредДсрField != null)) {
                    if ((кредДсрField.Equals(value) != true)) {
                        this.кредДсрField = value;
                        this.OnPropertyChanged("КредДср");
                    }
                }
                else {
                    this.кредДсрField = value;
                    this.OnPropertyChanged("КредДср");
                }
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ЗадолжВид", IsNullable=false)]
        public List<ФайлДокументДебКредЗадолжЗадолжВид3> КредКср {
            get {
                if ((this.кредКсрField == null)) {
                    this.кредКсрField = new List<ФайлДокументДебКредЗадолжЗадолжВид3>();
                }
                return this.кредКсрField;
            }
            set {
                if ((this.кредКсрField != null)) {
                    if ((кредКсрField.Equals(value) != true)) {
                        this.кредКсрField = value;
                        this.OnPropertyChanged("КредКср");
                    }
                }
                else {
                    this.кредКсрField = value;
                    this.OnPropertyChanged("КредКср");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ПериодКварталТип Период {
            get {
                return this.периодField;
            }
            set {
                if ((периодField.Equals(value) != true)) {
                    this.периодField = value;
                    this.OnPropertyChanged("Период");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ОтчетГод {
            get {
                return this.отчетГодField;
            }
            set {
                if ((this.отчетГодField != null)) {
                    if ((отчетГодField.Equals(value) != true)) {
                        this.отчетГодField = value;
                        this.OnPropertyChanged("ОтчетГод");
                    }
                }
                else {
                    this.отчетГодField = value;
                    this.OnPropertyChanged("ОтчетГод");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументДебКредЗадолжОКЕИ ОКЕИ {
            get {
                return this.оКЕИField;
            }
            set {
                if ((оКЕИField.Equals(value) != true)) {
                    this.оКЕИField = value;
                    this.OnPropertyChanged("ОКЕИ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолж));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ИнтервалыSpecified {
            get {
                return интервалыFieldSpecified;
            }
            set {
                интервалыFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДебДсрSpecified {
            get {
                return дебДсрFieldSpecified;
            }
            set {
                дебДсрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДебКсрSpecified {
            get {
                return дебКсрFieldSpecified;
            }
            set {
                дебКсрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КредДсрSpecified {
            get {
                return кредДсрFieldSpecified;
            }
            set {
                кредДсрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КредКсрSpecified {
            get {
                return кредКсрFieldSpecified;
            }
            set {
                кредКсрFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПериодSpecified {
            get {
                return периодFieldSpecified;
            }
            set {
                периодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОтчетГодSpecified {
            get {
                return отчетГодFieldSpecified;
            }
            set {
                отчетГодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОКЕИSpecified {
            get {
                return оКЕИFieldSpecified;
            }
            set {
                оКЕИFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолж object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолж object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолж object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолж obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолж);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолж obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолж Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолж)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолж object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолж object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолж object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолж obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолж);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолж obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолж LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжИнтервал : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодField;
        
        private string началоField;
        
        private string окончаниеField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодFieldSpecified;
        
        private bool началоFieldSpecified;
        
        private bool окончаниеFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Начало {
            get {
                return this.началоField;
            }
            set {
                if ((this.началоField != null)) {
                    if ((началоField.Equals(value) != true)) {
                        this.началоField = value;
                        this.OnPropertyChanged("Начало");
                    }
                }
                else {
                    this.началоField = value;
                    this.OnPropertyChanged("Начало");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Окончание {
            get {
                return this.окончаниеField;
            }
            set {
                if ((this.окончаниеField != null)) {
                    if ((окончаниеField.Equals(value) != true)) {
                        this.окончаниеField = value;
                        this.OnPropertyChanged("Окончание");
                    }
                }
                else {
                    this.окончаниеField = value;
                    this.OnPropertyChanged("Окончание");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжИнтервал));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НачалоSpecified {
            get {
                return началоFieldSpecified;
            }
            set {
                началоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОкончаниеSpecified {
            get {
                return окончаниеFieldSpecified;
            }
            set {
                окончаниеFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжИнтервал object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжИнтервал object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжИнтервал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжИнтервал obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжИнтервал);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжИнтервал obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжИнтервал Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжИнтервал)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжИнтервал object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжИнтервал object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжИнтервал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжИнтервал obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжИнтервал);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжИнтервал obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжИнтервал LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВид : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж> задолжField;
        
        private ФайлДокументДебКредЗадолжЗадолжВидИтого итогоField;
        
        private ФайлДокументДебКредЗадолжЗадолжВидВид видField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool задолжFieldSpecified;
        
        private bool итогоFieldSpecified;
        
        private bool видFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Задолж", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж> Задолж {
            get {
                if ((this.задолжField == null)) {
                    this.задолжField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж>();
                }
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументДебКредЗадолжЗадолжВидИтого Итого {
            get {
                if ((this.итогоField == null)) {
                    this.итогоField = new ФайлДокументДебКредЗадолжЗадолжВидИтого();
                }
                return this.итогоField;
            }
            set {
                if ((this.итогоField != null)) {
                    if ((итогоField.Equals(value) != true)) {
                        this.итогоField = value;
                        this.OnPropertyChanged("Итого");
                    }
                }
                else {
                    this.итогоField = value;
                    this.OnPropertyChanged("Итого");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументДебКредЗадолжЗадолжВидВид Вид {
            get {
                return this.видField;
            }
            set {
                if ((видField.Equals(value) != true)) {
                    this.видField = value;
                    this.OnPropertyChanged("Вид");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВид));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогоSpecified {
            get {
                return итогоFieldSpecified;
            }
            set {
                итогоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВидSpecified {
            get {
                return видFieldSpecified;
            }
            set {
                видFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВид object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВид object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВид object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВид obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВид);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВид obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВид Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВид)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВид object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВид object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВид object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВид obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВид);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВид obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВид LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолж : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент контрагентField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool контрагентFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент Контрагент {
            get {
                if ((this.контрагентField == null)) {
                    this.контрагентField = new ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент();
                }
                return this.контрагентField;
            }
            set {
                if ((this.контрагентField != null)) {
                    if ((контрагентField.Equals(value) != true)) {
                        this.контрагентField = value;
                        this.OnPropertyChanged("Контрагент");
                    }
                }
                else {
                    this.контрагентField = value;
                    this.OnPropertyChanged("Контрагент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолж));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КонтрагентSpecified {
            get {
                return контрагентFieldSpecified;
            }
            set {
                контрагентFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолж object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолж object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолж object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолж);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолж Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолж)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолж object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолж object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолж object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолж);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолж LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор> договорField;
        
        private string наимField;
        
        private string иННField;
        
        private string кППField;
        
        private string датаВознField;
        
        private string общаяField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool договорFieldSpecified;
        
        private bool наимFieldSpecified;
        
        private bool иННFieldSpecified;
        
        private bool кППFieldSpecified;
        
        private bool датаВознFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Договор", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор> Договор {
            get {
                if ((this.договорField == null)) {
                    this.договорField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор>();
                }
                return this.договорField;
            }
            set {
                if ((this.договорField != null)) {
                    if ((договорField.Equals(value) != true)) {
                        this.договорField = value;
                        this.OnPropertyChanged("Договор");
                    }
                }
                else {
                    this.договорField = value;
                    this.OnPropertyChanged("Договор");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДоговорSpecified {
            get {
                return договорFieldSpecified;
            }
            set {
                договорFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку> поСрокуField;
        
        private string наимField;
        
        private string номерField;
        
        private string датаField;
        
        private string датаВознField;
        
        private string общаяField;
        
        private string просрочField;
        
        private string резервField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поСрокуFieldSpecified;
        
        private bool наимFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool датаFieldSpecified;
        
        private bool датаВознFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        private bool просрочFieldSpecified;
        
        private bool резервFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ПоСроку", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку> ПоСроку {
            get {
                if ((this.поСрокуField == null)) {
                    this.поСрокуField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку>();
                }
                return this.поСрокуField;
            }
            set {
                if ((this.поСрокуField != null)) {
                    if ((поСрокуField.Equals(value) != true)) {
                        this.поСрокуField = value;
                        this.OnPropertyChanged("ПоСроку");
                    }
                }
                else {
                    this.поСрокуField = value;
                    this.OnPropertyChanged("ПоСроку");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Просроч {
            get {
                return this.просрочField;
            }
            set {
                if ((this.просрочField != null)) {
                    if ((просрочField.Equals(value) != true)) {
                        this.просрочField = value;
                        this.OnPropertyChanged("Просроч");
                    }
                }
                else {
                    this.просрочField = value;
                    this.OnPropertyChanged("Просроч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Резерв {
            get {
                return this.резервField;
            }
            set {
                if ((this.резервField != null)) {
                    if ((резервField.Equals(value) != true)) {
                        this.резервField = value;
                        this.OnPropertyChanged("Резерв");
                    }
                }
                else {
                    this.резервField = value;
                    this.OnPropertyChanged("Резерв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоСрокуSpecified {
            get {
                return поСрокуFieldSpecified;
            }
            set {
                поСрокуFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрочSpecified {
            get {
                return просрочFieldSpecified;
            }
            set {
                просрочFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезервSpecified {
            get {
                return резервFieldSpecified;
            }
            set {
                резервFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодField;
        
        private string задолжField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодFieldSpecified;
        
        private bool задолжFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Задолж {
            get {
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидИтого : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку> поСрокуField;
        
        private string общаяField;
        
        private string просрочField;
        
        private string резервField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поСрокуFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        private bool просрочFieldSpecified;
        
        private bool резервFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ПоСроку", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку> ПоСроку {
            get {
                if ((this.поСрокуField == null)) {
                    this.поСрокуField = new List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку>();
                }
                return this.поСрокуField;
            }
            set {
                if ((this.поСрокуField != null)) {
                    if ((поСрокуField.Equals(value) != true)) {
                        this.поСрокуField = value;
                        this.OnPropertyChanged("ПоСроку");
                    }
                }
                else {
                    this.поСрокуField = value;
                    this.OnPropertyChanged("ПоСроку");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Просроч {
            get {
                return this.просрочField;
            }
            set {
                if ((this.просрочField != null)) {
                    if ((просрочField.Equals(value) != true)) {
                        this.просрочField = value;
                        this.OnPropertyChanged("Просроч");
                    }
                }
                else {
                    this.просрочField = value;
                    this.OnPropertyChanged("Просроч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Резерв {
            get {
                return this.резервField;
            }
            set {
                if ((this.резервField != null)) {
                    if ((резервField.Equals(value) != true)) {
                        this.резервField = value;
                        this.OnPropertyChanged("Резерв");
                    }
                }
                else {
                    this.резервField = value;
                    this.OnPropertyChanged("Резерв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидИтого));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоСрокуSpecified {
            get {
                return поСрокуFieldSpecified;
            }
            set {
                поСрокуFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрочSpecified {
            get {
                return просрочFieldSpecified;
            }
            set {
                просрочFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезервSpecified {
            get {
                return резервFieldSpecified;
            }
            set {
                резервFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтого object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидИтого object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтого object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтого obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтого);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтого obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтого Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидИтого)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтого object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидИтого object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтого object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтого obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтого);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтого obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтого LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодField;
        
        private string задолжField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодFieldSpecified;
        
        private bool задолжFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Задолж {
            get {
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументДебКредЗадолжЗадолжВидВид {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВид1 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж1> задолжField;
        
        private ФайлДокументДебКредЗадолжЗадолжВидИтого1 итогоField;
        
        private ФайлДокументДебКредЗадолжЗадолжВидВид1 видField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool задолжFieldSpecified;
        
        private bool итогоFieldSpecified;
        
        private bool видFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Задолж", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж1> Задолж {
            get {
                if ((this.задолжField == null)) {
                    this.задолжField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж1>();
                }
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументДебКредЗадолжЗадолжВидИтого1 Итого {
            get {
                if ((this.итогоField == null)) {
                    this.итогоField = new ФайлДокументДебКредЗадолжЗадолжВидИтого1();
                }
                return this.итогоField;
            }
            set {
                if ((this.итогоField != null)) {
                    if ((итогоField.Equals(value) != true)) {
                        this.итогоField = value;
                        this.OnPropertyChanged("Итого");
                    }
                }
                else {
                    this.итогоField = value;
                    this.OnPropertyChanged("Итого");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументДебКредЗадолжЗадолжВидВид1 Вид {
            get {
                return this.видField;
            }
            set {
                if ((видField.Equals(value) != true)) {
                    this.видField = value;
                    this.OnPropertyChanged("Вид");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВид1));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогоSpecified {
            get {
                return итогоFieldSpecified;
            }
            set {
                итогоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВидSpecified {
            get {
                return видFieldSpecified;
            }
            set {
                видFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВид1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВид1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВид1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВид1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВид1);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВид1 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВид1 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВид1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВид1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВид1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВид1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВид1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВид1);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВид1 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВид1 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 : System.ComponentModel.INotifyPropertyChanged {
        
        private object itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool itemFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Контрагент", typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("Прочее", typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее), Order=0)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолж1));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ItemSpecified {
            get {
                return itemFieldSpecified;
            }
            set {
                itemFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолж1);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолж1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолж1);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолж1 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1> договорField;
        
        private string наимField;
        
        private string иННField;
        
        private string кППField;
        
        private string датаВознField;
        
        private string общаяField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool договорFieldSpecified;
        
        private bool наимFieldSpecified;
        
        private bool иННFieldSpecified;
        
        private bool кППFieldSpecified;
        
        private bool датаВознFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Договор", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1> Договор {
            get {
                if ((this.договорField == null)) {
                    this.договорField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1>();
                }
                return this.договорField;
            }
            set {
                if ((this.договорField != null)) {
                    if ((договорField.Equals(value) != true)) {
                        this.договорField = value;
                        this.OnPropertyChanged("Договор");
                    }
                }
                else {
                    this.договорField = value;
                    this.OnPropertyChanged("Договор");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДоговорSpecified {
            get {
                return договорFieldSpecified;
            }
            set {
                договорFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент1 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1> поСрокуField;
        
        private string наимField;
        
        private string номерField;
        
        private string датаField;
        
        private string датаВознField;
        
        private string общаяField;
        
        private string просрочField;
        
        private string резервField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поСрокуFieldSpecified;
        
        private bool наимFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool датаFieldSpecified;
        
        private bool датаВознFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        private bool просрочFieldSpecified;
        
        private bool резервFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ПоСроку", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1> ПоСроку {
            get {
                if ((this.поСрокуField == null)) {
                    this.поСрокуField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1>();
                }
                return this.поСрокуField;
            }
            set {
                if ((this.поСрокуField != null)) {
                    if ((поСрокуField.Equals(value) != true)) {
                        this.поСрокуField = value;
                        this.OnPropertyChanged("ПоСроку");
                    }
                }
                else {
                    this.поСрокуField = value;
                    this.OnPropertyChanged("ПоСроку");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Просроч {
            get {
                return this.просрочField;
            }
            set {
                if ((this.просрочField != null)) {
                    if ((просрочField.Equals(value) != true)) {
                        this.просрочField = value;
                        this.OnPropertyChanged("Просроч");
                    }
                }
                else {
                    this.просрочField = value;
                    this.OnPropertyChanged("Просроч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Резерв {
            get {
                return this.резервField;
            }
            set {
                if ((this.резервField != null)) {
                    if ((резервField.Equals(value) != true)) {
                        this.резервField = value;
                        this.OnPropertyChanged("Резерв");
                    }
                }
                else {
                    this.резервField = value;
                    this.OnPropertyChanged("Резерв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоСрокуSpecified {
            get {
                return поСрокуFieldSpecified;
            }
            set {
                поСрокуFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрочSpecified {
            get {
                return просрочFieldSpecified;
            }
            set {
                просрочFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезервSpecified {
            get {
                return резервFieldSpecified;
            }
            set {
                резервFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор1 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодField;
        
        private string задолжField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодFieldSpecified;
        
        private bool задолжFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Задолж {
            get {
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку1 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее : System.ComponentModel.INotifyPropertyChanged {
        
        private string наимField;
        
        private string датаВознField;
        
        private string общаяField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наимFieldSpecified;
        
        private bool датаВознFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидИтого1 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1> поСрокуField;
        
        private string общаяField;
        
        private string просрочField;
        
        private string резервField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поСрокуFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        private bool просрочFieldSpecified;
        
        private bool резервFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ПоСроку", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1> ПоСроку {
            get {
                if ((this.поСрокуField == null)) {
                    this.поСрокуField = new List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1>();
                }
                return this.поСрокуField;
            }
            set {
                if ((this.поСрокуField != null)) {
                    if ((поСрокуField.Equals(value) != true)) {
                        this.поСрокуField = value;
                        this.OnPropertyChanged("ПоСроку");
                    }
                }
                else {
                    this.поСрокуField = value;
                    this.OnPropertyChanged("ПоСроку");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Просроч {
            get {
                return this.просрочField;
            }
            set {
                if ((this.просрочField != null)) {
                    if ((просрочField.Equals(value) != true)) {
                        this.просрочField = value;
                        this.OnPropertyChanged("Просроч");
                    }
                }
                else {
                    this.просрочField = value;
                    this.OnPropertyChanged("Просроч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Резерв {
            get {
                return this.резервField;
            }
            set {
                if ((this.резервField != null)) {
                    if ((резервField.Equals(value) != true)) {
                        this.резервField = value;
                        this.OnPropertyChanged("Резерв");
                    }
                }
                else {
                    this.резервField = value;
                    this.OnPropertyChanged("Резерв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидИтого1));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоСрокуSpecified {
            get {
                return поСрокуFieldSpecified;
            }
            set {
                поСрокуFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрочSpecified {
            get {
                return просрочFieldSpecified;
            }
            set {
                просрочFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезервSpecified {
            get {
                return резервFieldSpecified;
            }
            set {
                резервFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтого1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидИтого1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтого1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтого1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтого1);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтого1 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтого1 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидИтого1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтого1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидИтого1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтого1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтого1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтого1);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтого1 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтого1 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодField;
        
        private string задолжField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодFieldSpecified;
        
        private bool задолжFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Задолж {
            get {
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку1 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументДебКредЗадолжЗадолжВидВид1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВид2 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж2> задолжField;
        
        private ФайлДокументДебКредЗадолжЗадолжВидИтого2 итогоField;
        
        private ФайлДокументДебКредЗадолжЗадолжВидВид2 видField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool задолжFieldSpecified;
        
        private bool итогоFieldSpecified;
        
        private bool видFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Задолж", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж2> Задолж {
            get {
                if ((this.задолжField == null)) {
                    this.задолжField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж2>();
                }
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументДебКредЗадолжЗадолжВидИтого2 Итого {
            get {
                if ((this.итогоField == null)) {
                    this.итогоField = new ФайлДокументДебКредЗадолжЗадолжВидИтого2();
                }
                return this.итогоField;
            }
            set {
                if ((this.итогоField != null)) {
                    if ((итогоField.Equals(value) != true)) {
                        this.итогоField = value;
                        this.OnPropertyChanged("Итого");
                    }
                }
                else {
                    this.итогоField = value;
                    this.OnPropertyChanged("Итого");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументДебКредЗадолжЗадолжВидВид2 Вид {
            get {
                return this.видField;
            }
            set {
                if ((видField.Equals(value) != true)) {
                    this.видField = value;
                    this.OnPropertyChanged("Вид");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВид2));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогоSpecified {
            get {
                return итогоFieldSpecified;
            }
            set {
                итогоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВидSpecified {
            get {
                return видFieldSpecified;
            }
            set {
                видFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВид2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВид2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВид2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВид2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВид2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВид2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВид2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВид2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВид2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВид2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВид2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВид2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВид2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВид2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВид2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 : System.ComponentModel.INotifyPropertyChanged {
        
        private ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 контрагентField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool контрагентFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 Контрагент {
            get {
                if ((this.контрагентField == null)) {
                    this.контрагентField = new ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2();
                }
                return this.контрагентField;
            }
            set {
                if ((this.контрагентField != null)) {
                    if ((контрагентField.Equals(value) != true)) {
                        this.контрагентField = value;
                        this.OnPropertyChanged("Контрагент");
                    }
                }
                else {
                    this.контрагентField = value;
                    this.OnPropertyChanged("Контрагент");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолж2));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КонтрагентSpecified {
            get {
                return контрагентFieldSpecified;
            }
            set {
                контрагентFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолж2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолж2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолж2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолж2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2> договорField;
        
        private string наимField;
        
        private string иННField;
        
        private string кППField;
        
        private string датаВознField;
        
        private string общаяField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool договорFieldSpecified;
        
        private bool наимFieldSpecified;
        
        private bool иННFieldSpecified;
        
        private bool кППFieldSpecified;
        
        private bool датаВознFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Договор", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2> Договор {
            get {
                if ((this.договорField == null)) {
                    this.договорField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2>();
                }
                return this.договорField;
            }
            set {
                if ((this.договорField != null)) {
                    if ((договорField.Equals(value) != true)) {
                        this.договорField = value;
                        this.OnPropertyChanged("Договор");
                    }
                }
                else {
                    this.договорField = value;
                    this.OnPropertyChanged("Договор");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДоговорSpecified {
            get {
                return договорFieldSpecified;
            }
            set {
                договорFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2> поСрокуField;
        
        private string наимField;
        
        private string номерField;
        
        private string датаField;
        
        private string датаВознField;
        
        private string общаяField;
        
        private string просрочField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поСрокуFieldSpecified;
        
        private bool наимFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool датаFieldSpecified;
        
        private bool датаВознFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        private bool просрочFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ПоСроку", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2> ПоСроку {
            get {
                if ((this.поСрокуField == null)) {
                    this.поСрокуField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2>();
                }
                return this.поСрокуField;
            }
            set {
                if ((this.поСрокуField != null)) {
                    if ((поСрокуField.Equals(value) != true)) {
                        this.поСрокуField = value;
                        this.OnPropertyChanged("ПоСроку");
                    }
                }
                else {
                    this.поСрокуField = value;
                    this.OnPropertyChanged("ПоСроку");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Просроч {
            get {
                return this.просрочField;
            }
            set {
                if ((this.просрочField != null)) {
                    if ((просрочField.Equals(value) != true)) {
                        this.просрочField = value;
                        this.OnPropertyChanged("Просроч");
                    }
                }
                else {
                    this.просрочField = value;
                    this.OnPropertyChanged("Просроч");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоСрокуSpecified {
            get {
                return поСрокуFieldSpecified;
            }
            set {
                поСрокуFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрочSpecified {
            get {
                return просрочFieldSpecified;
            }
            set {
                просрочFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодField;
        
        private string задолжField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодFieldSpecified;
        
        private bool задолжFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Задолж {
            get {
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидИтого2 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2> поСрокуField;
        
        private string общаяField;
        
        private string просрочField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поСрокуFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        private bool просрочFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ПоСроку", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2> ПоСроку {
            get {
                if ((this.поСрокуField == null)) {
                    this.поСрокуField = new List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2>();
                }
                return this.поСрокуField;
            }
            set {
                if ((this.поСрокуField != null)) {
                    if ((поСрокуField.Equals(value) != true)) {
                        this.поСрокуField = value;
                        this.OnPropertyChanged("ПоСроку");
                    }
                }
                else {
                    this.поСрокуField = value;
                    this.OnPropertyChanged("ПоСроку");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Просроч {
            get {
                return this.просрочField;
            }
            set {
                if ((this.просрочField != null)) {
                    if ((просрочField.Equals(value) != true)) {
                        this.просрочField = value;
                        this.OnPropertyChanged("Просроч");
                    }
                }
                else {
                    this.просрочField = value;
                    this.OnPropertyChanged("Просроч");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидИтого2));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоСрокуSpecified {
            get {
                return поСрокуFieldSpecified;
            }
            set {
                поСрокуFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрочSpecified {
            get {
                return просрочFieldSpecified;
            }
            set {
                просрочFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтого2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидИтого2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтого2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтого2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтого2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтого2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтого2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидИтого2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтого2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидИтого2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтого2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтого2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтого2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтого2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтого2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодField;
        
        private string задолжField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодFieldSpecified;
        
        private bool задолжFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Задолж {
            get {
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументДебКредЗадолжЗадолжВидВид2 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВид3 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж3> задолжField;
        
        private ФайлДокументДебКредЗадолжЗадолжВидИтого3 итогоField;
        
        private ФайлДокументДебКредЗадолжЗадолжВидВид3 видField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool задолжFieldSpecified;
        
        private bool итогоFieldSpecified;
        
        private bool видFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Задолж", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж3> Задолж {
            get {
                if ((this.задолжField == null)) {
                    this.задолжField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолж3>();
                }
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФайлДокументДебКредЗадолжЗадолжВидИтого3 Итого {
            get {
                if ((this.итогоField == null)) {
                    this.итогоField = new ФайлДокументДебКредЗадолжЗадолжВидИтого3();
                }
                return this.итогоField;
            }
            set {
                if ((this.итогоField != null)) {
                    if ((итогоField.Equals(value) != true)) {
                        this.итогоField = value;
                        this.OnPropertyChanged("Итого");
                    }
                }
                else {
                    this.итогоField = value;
                    this.OnPropertyChanged("Итого");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ФайлДокументДебКредЗадолжЗадолжВидВид3 Вид {
            get {
                return this.видField;
            }
            set {
                if ((видField.Equals(value) != true)) {
                    this.видField = value;
                    this.OnPropertyChanged("Вид");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВид3));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогоSpecified {
            get {
                return итогоFieldSpecified;
            }
            set {
                итогоFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВидSpecified {
            get {
                return видFieldSpecified;
            }
            set {
                видFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВид3 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВид3 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВид3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВид3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВид3);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВид3 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВид3 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВид3)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВид3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВид3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВид3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВид3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВид3);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВид3 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВид3 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 : System.ComponentModel.INotifyPropertyChanged {
        
        private object itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool itemFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Контрагент", typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("Прочее", typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1), Order=0)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолж3));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ItemSpecified {
            get {
                return itemFieldSpecified;
            }
            set {
                itemFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолж3);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолж3)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолж3);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолж3 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3> договорField;
        
        private string наимField;
        
        private string иННField;
        
        private string кППField;
        
        private string датаВознField;
        
        private string общаяField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool договорFieldSpecified;
        
        private bool наимFieldSpecified;
        
        private bool иННFieldSpecified;
        
        private bool кППFieldSpecified;
        
        private bool датаВознFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("Договор", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3> Договор {
            get {
                if ((this.договорField == null)) {
                    this.договорField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3>();
                }
                return this.договорField;
            }
            set {
                if ((this.договорField != null)) {
                    if ((договорField.Equals(value) != true)) {
                        this.договорField = value;
                        this.OnPropertyChanged("Договор");
                    }
                }
                else {
                    this.договорField = value;
                    this.OnPropertyChanged("Договор");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДоговорSpecified {
            get {
                return договорFieldSpecified;
            }
            set {
                договорFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагент3 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3> поСрокуField;
        
        private string наимField;
        
        private string номерField;
        
        private string датаField;
        
        private string датаВознField;
        
        private string общаяField;
        
        private string просрочField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поСрокуFieldSpecified;
        
        private bool наимFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool датаFieldSpecified;
        
        private bool датаВознFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        private bool просрочFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ПоСроку", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3> ПоСроку {
            get {
                if ((this.поСрокуField == null)) {
                    this.поСрокуField = new List<ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3>();
                }
                return this.поСрокуField;
            }
            set {
                if ((this.поСрокуField != null)) {
                    if ((поСрокуField.Equals(value) != true)) {
                        this.поСрокуField = value;
                        this.OnPropertyChanged("ПоСроку");
                    }
                }
                else {
                    this.поСрокуField = value;
                    this.OnPropertyChanged("ПоСроку");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Просроч {
            get {
                return this.просрочField;
            }
            set {
                if ((this.просрочField != null)) {
                    if ((просрочField.Equals(value) != true)) {
                        this.просрочField = value;
                        this.OnPropertyChanged("Просроч");
                    }
                }
                else {
                    this.просрочField = value;
                    this.OnPropertyChanged("Просроч");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоСрокуSpecified {
            get {
                return поСрокуFieldSpecified;
            }
            set {
                поСрокуFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрочSpecified {
            get {
                return просрочFieldSpecified;
            }
            set {
                просрочFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговор3 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодField;
        
        private string задолжField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодFieldSpecified;
        
        private bool задолжFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Задолж {
            get {
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжКонтрагентДоговорПоСроку3 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 : System.ComponentModel.INotifyPropertyChanged {
        
        private string наимField;
        
        private string датаВознField;
        
        private string общаяField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наимFieldSpecified;
        
        private bool датаВознFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наим {
            get {
                return this.наимField;
            }
            set {
                if ((this.наимField != null)) {
                    if ((наимField.Equals(value) != true)) {
                        this.наимField = value;
                        this.OnPropertyChanged("Наим");
                    }
                }
                else {
                    this.наимField = value;
                    this.OnPropertyChanged("Наим");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ДатаВозн {
            get {
                return this.датаВознField;
            }
            set {
                if ((this.датаВознField != null)) {
                    if ((датаВознField.Equals(value) != true)) {
                        this.датаВознField = value;
                        this.OnPropertyChanged("ДатаВозн");
                    }
                }
                else {
                    this.датаВознField = value;
                    this.OnPropertyChanged("ДатаВозн");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаимSpecified {
            get {
                return наимFieldSpecified;
            }
            set {
                наимFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаВознSpecified {
            get {
                return датаВознFieldSpecified;
            }
            set {
                датаВознFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидЗадолжПрочее1 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидИтого3 : System.ComponentModel.INotifyPropertyChanged {
        
        private List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3> поСрокуField;
        
        private string общаяField;
        
        private string просрочField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поСрокуFieldSpecified;
        
        private bool общаяFieldSpecified;
        
        private bool просрочFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ПоСроку", Order=0)]
        public List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3> ПоСроку {
            get {
                if ((this.поСрокуField == null)) {
                    this.поСрокуField = new List<ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3>();
                }
                return this.поСрокуField;
            }
            set {
                if ((this.поСрокуField != null)) {
                    if ((поСрокуField.Equals(value) != true)) {
                        this.поСрокуField = value;
                        this.OnPropertyChanged("ПоСроку");
                    }
                }
                else {
                    this.поСрокуField = value;
                    this.OnPropertyChanged("ПоСроку");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Общая {
            get {
                return this.общаяField;
            }
            set {
                if ((this.общаяField != null)) {
                    if ((общаяField.Equals(value) != true)) {
                        this.общаяField = value;
                        this.OnPropertyChanged("Общая");
                    }
                }
                else {
                    this.общаяField = value;
                    this.OnPropertyChanged("Общая");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Просроч {
            get {
                return this.просрочField;
            }
            set {
                if ((this.просрочField != null)) {
                    if ((просрочField.Equals(value) != true)) {
                        this.просрочField = value;
                        this.OnPropertyChanged("Просроч");
                    }
                }
                else {
                    this.просрочField = value;
                    this.OnPropertyChanged("Просроч");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидИтого3));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоСрокуSpecified {
            get {
                return поСрокуFieldSpecified;
            }
            set {
                поСрокуFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбщаяSpecified {
            get {
                return общаяFieldSpecified;
            }
            set {
                общаяFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПросрочSpecified {
            get {
                return просрочFieldSpecified;
            }
            set {
                просрочFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтого3 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидИтого3 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтого3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтого3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтого3);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтого3 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтого3 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидИтого3)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтого3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидИтого3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтого3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтого3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтого3);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтого3 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтого3 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодField;
        
        private string задолжField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодFieldSpecified;
        
        private bool задолжFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Код {
            get {
                return this.кодField;
            }
            set {
                if ((this.кодField != null)) {
                    if ((кодField.Equals(value) != true)) {
                        this.кодField = value;
                        this.OnPropertyChanged("Код");
                    }
                }
                else {
                    this.кодField = value;
                    this.OnPropertyChanged("Код");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Задолж {
            get {
                return this.задолжField;
            }
            set {
                if ((this.задолжField != null)) {
                    if ((задолжField.Equals(value) != true)) {
                        this.задолжField = value;
                        this.OnPropertyChanged("Задолж");
                    }
                }
                else {
                    this.задолжField = value;
                    this.OnPropertyChanged("Задолж");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодSpecified {
            get {
                return кодFieldSpecified;
            }
            set {
                кодFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЗадолжSpecified {
            get {
                return задолжFieldSpecified;
            }
            set {
                задолжFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДебКредЗадолжЗадолжВидИтогоПоСроку3 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументДебКредЗадолжЗадолжВидВид3 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументДебКредЗадолжОКЕИ {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("384")]
        Item384,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("385")]
        Item385,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ФайлДокументДопФайл : System.ComponentModel.INotifyPropertyChanged {
        
        private string имяФайлаField;
        
        private byte[] valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool имяФайлаFieldSpecified;
        
        private bool valueFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИмяФайла {
            get {
                return this.имяФайлаField;
            }
            set {
                if ((this.имяФайлаField != null)) {
                    if ((имяФайлаField.Equals(value) != true)) {
                        this.имяФайлаField = value;
                        this.OnPropertyChanged("ИмяФайла");
                    }
                }
                else {
                    this.имяФайлаField = value;
                    this.OnPropertyChanged("ИмяФайла");
                }
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute(DataType="base64Binary")]
        public byte[] Value {
            get {
                if ((this.valueField == null)) {
                    this.valueField = new byte[]();
                }
                return this.valueField;
            }
            set {
                if ((this.valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        this.valueField = value;
                        this.OnPropertyChanged("Value");
                    }
                }
                else {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ФайлДокументДопФайл));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ИмяФайлаSpecified {
            get {
                return имяФайлаFieldSpecified;
            }
            set {
                имяФайлаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ValueSpecified {
            get {
                return valueFieldSpecified;
            }
            set {
                valueFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ФайлДокументДопФайл object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ФайлДокументДопФайл object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ФайлДокументДопФайл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ФайлДокументДопФайл obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДопФайл);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ФайлДокументДопФайл obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ФайлДокументДопФайл Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ФайлДокументДопФайл)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ФайлДокументДопФайл object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ФайлДокументДопФайл object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ФайлДокументДопФайл object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ФайлДокументДопФайл obj, out System.Exception exception) {
            exception = null;
            obj = default(ФайлДокументДопФайл);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ФайлДокументДопФайл obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ФайлДокументДопФайл LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлДокументКНД {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0710099")]
        Item0710099,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum ФайлВерсФорм {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5.08.03")]
        Item50803,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class АдрРФТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string индексField;
        
        private string кодРегионField;
        
        private string районField;
        
        private string городField;
        
        private string населПунктField;
        
        private string улицаField;
        
        private string домField;
        
        private string корпусField;
        
        private string квартField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool индексFieldSpecified;
        
        private bool кодРегионFieldSpecified;
        
        private bool районFieldSpecified;
        
        private bool городFieldSpecified;
        
        private bool населПунктFieldSpecified;
        
        private bool улицаFieldSpecified;
        
        private bool домFieldSpecified;
        
        private bool корпусFieldSpecified;
        
        private bool квартFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Индекс {
            get {
                return this.индексField;
            }
            set {
                if ((this.индексField != null)) {
                    if ((индексField.Equals(value) != true)) {
                        this.индексField = value;
                        this.OnPropertyChanged("Индекс");
                    }
                }
                else {
                    this.индексField = value;
                    this.OnPropertyChanged("Индекс");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодРегион {
            get {
                return this.кодРегионField;
            }
            set {
                if ((this.кодРегионField != null)) {
                    if ((кодРегионField.Equals(value) != true)) {
                        this.кодРегионField = value;
                        this.OnPropertyChanged("КодРегион");
                    }
                }
                else {
                    this.кодРегионField = value;
                    this.OnPropertyChanged("КодРегион");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Район {
            get {
                return this.районField;
            }
            set {
                if ((this.районField != null)) {
                    if ((районField.Equals(value) != true)) {
                        this.районField = value;
                        this.OnPropertyChanged("Район");
                    }
                }
                else {
                    this.районField = value;
                    this.OnPropertyChanged("Район");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Город {
            get {
                return this.городField;
            }
            set {
                if ((this.городField != null)) {
                    if ((городField.Equals(value) != true)) {
                        this.городField = value;
                        this.OnPropertyChanged("Город");
                    }
                }
                else {
                    this.городField = value;
                    this.OnPropertyChanged("Город");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаселПункт {
            get {
                return this.населПунктField;
            }
            set {
                if ((this.населПунктField != null)) {
                    if ((населПунктField.Equals(value) != true)) {
                        this.населПунктField = value;
                        this.OnPropertyChanged("НаселПункт");
                    }
                }
                else {
                    this.населПунктField = value;
                    this.OnPropertyChanged("НаселПункт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Улица {
            get {
                return this.улицаField;
            }
            set {
                if ((this.улицаField != null)) {
                    if ((улицаField.Equals(value) != true)) {
                        this.улицаField = value;
                        this.OnPropertyChanged("Улица");
                    }
                }
                else {
                    this.улицаField = value;
                    this.OnPropertyChanged("Улица");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дом {
            get {
                return this.домField;
            }
            set {
                if ((this.домField != null)) {
                    if ((домField.Equals(value) != true)) {
                        this.домField = value;
                        this.OnPropertyChanged("Дом");
                    }
                }
                else {
                    this.домField = value;
                    this.OnPropertyChanged("Дом");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Корпус {
            get {
                return this.корпусField;
            }
            set {
                if ((this.корпусField != null)) {
                    if ((корпусField.Equals(value) != true)) {
                        this.корпусField = value;
                        this.OnPropertyChanged("Корпус");
                    }
                }
                else {
                    this.корпусField = value;
                    this.OnPropertyChanged("Корпус");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Кварт {
            get {
                return this.квартField;
            }
            set {
                if ((this.квартField != null)) {
                    if ((квартField.Equals(value) != true)) {
                        this.квартField = value;
                        this.OnPropertyChanged("Кварт");
                    }
                }
                else {
                    this.квартField = value;
                    this.OnPropertyChanged("Кварт");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрРФТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ИндексSpecified {
            get {
                return индексFieldSpecified;
            }
            set {
                индексFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодРегионSpecified {
            get {
                return кодРегионFieldSpecified;
            }
            set {
                кодРегионFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РайонSpecified {
            get {
                return районFieldSpecified;
            }
            set {
                районFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ГородSpecified {
            get {
                return городFieldSpecified;
            }
            set {
                городFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаселПунктSpecified {
            get {
                return населПунктFieldSpecified;
            }
            set {
                населПунктFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УлицаSpecified {
            get {
                return улицаFieldSpecified;
            }
            set {
                улицаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДомSpecified {
            get {
                return домFieldSpecified;
            }
            set {
                домFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КорпусSpecified {
            get {
                return корпусFieldSpecified;
            }
            set {
                корпусFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КвартSpecified {
            get {
                return квартFieldSpecified;
            }
            set {
                квартFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АдрРФТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an АдрРФТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АдрРФТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АдрРФТип obj, out System.Exception exception) {
            exception = null;
            obj = default(АдрРФТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out АдрРФТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static АдрРФТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((АдрРФТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current АдрРФТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an АдрРФТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АдрРФТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out АдрРФТип obj, out System.Exception exception) {
            exception = null;
            obj = default(АдрРФТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out АдрРФТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static АдрРФТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СтрокаОСВТип : System.ComponentModel.INotifyPropertyChanged {
        
        private СтрокаОСВТипСчет счетField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool счетFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public СтрокаОСВТипСчет Счет {
            get {
                if ((this.счетField == null)) {
                    this.счетField = new СтрокаОСВТипСчет();
                }
                return this.счетField;
            }
            set {
                if ((this.счетField != null)) {
                    if ((счетField.Equals(value) != true)) {
                        this.счетField = value;
                        this.OnPropertyChanged("Счет");
                    }
                }
                else {
                    this.счетField = value;
                    this.OnPropertyChanged("Счет");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СчетSpecified {
            get {
                return счетFieldSpecified;
            }
            set {
                счетFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВТипСчет : System.ComponentModel.INotifyPropertyChanged {
        
        private СтрокаОСВТипСчетКонтрагент контрагентField;
        
        private СтрокаОСВТипСчетДоговор договорField;
        
        private СтрокаОСВТипСчетДокументРасчетов документРасчетовField;
        
        private СтрокаОСВТипСчетВидДоходаРасхода видДоходаРасходаField;
        
        private string кодСчетаField;
        
        private string наименованиеСчетаField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаField;
        
        private string кодСчетаРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРField;
        
        private bool типСчетаРFieldSpecified;
        
        private string кодСчетаРРField;
        
        private СтрокаОСВСТочностью3ТипСчетТипСчета типСчетаРРField;
        
        private bool типСчетаРРFieldSpecified;
        
        private decimal сНДField;
        
        private decimal сНКField;
        
        private decimal доField;
        
        private decimal коField;
        
        private decimal сКДField;
        
        private decimal сККField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool контрагентFieldSpecified;
        
        private bool договорFieldSpecified;
        
        private bool документРасчетовFieldSpecified;
        
        private bool видДоходаРасходаFieldSpecified;
        
        private bool кодСчетаFieldSpecified;
        
        private bool наименованиеСчетаFieldSpecified;
        
        private bool типСчетаFieldSpecified;
        
        private bool кодСчетаРFieldSpecified;
        
        private bool кодСчетаРРFieldSpecified;
        
        private bool сНДFieldSpecified;
        
        private bool сНКFieldSpecified;
        
        private bool дОFieldSpecified;
        
        private bool кОFieldSpecified;
        
        private bool сКДFieldSpecified;
        
        private bool сККFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public СтрокаОСВТипСчетКонтрагент Контрагент {
            get {
                if ((this.контрагентField == null)) {
                    this.контрагентField = new СтрокаОСВТипСчетКонтрагент();
                }
                return this.контрагентField;
            }
            set {
                if ((this.контрагентField != null)) {
                    if ((контрагентField.Equals(value) != true)) {
                        this.контрагентField = value;
                        this.OnPropertyChanged("Контрагент");
                    }
                }
                else {
                    this.контрагентField = value;
                    this.OnPropertyChanged("Контрагент");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public СтрокаОСВТипСчетДоговор Договор {
            get {
                if ((this.договорField == null)) {
                    this.договорField = new СтрокаОСВТипСчетДоговор();
                }
                return this.договорField;
            }
            set {
                if ((this.договорField != null)) {
                    if ((договорField.Equals(value) != true)) {
                        this.договорField = value;
                        this.OnPropertyChanged("Договор");
                    }
                }
                else {
                    this.договорField = value;
                    this.OnPropertyChanged("Договор");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public СтрокаОСВТипСчетДокументРасчетов ДокументРасчетов {
            get {
                if ((this.документРасчетовField == null)) {
                    this.документРасчетовField = new СтрокаОСВТипСчетДокументРасчетов();
                }
                return this.документРасчетовField;
            }
            set {
                if ((this.документРасчетовField != null)) {
                    if ((документРасчетовField.Equals(value) != true)) {
                        this.документРасчетовField = value;
                        this.OnPropertyChanged("ДокументРасчетов");
                    }
                }
                else {
                    this.документРасчетовField = value;
                    this.OnPropertyChanged("ДокументРасчетов");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public СтрокаОСВТипСчетВидДоходаРасхода ВидДоходаРасхода {
            get {
                if ((this.видДоходаРасходаField == null)) {
                    this.видДоходаРасходаField = new СтрокаОСВТипСчетВидДоходаРасхода();
                }
                return this.видДоходаРасходаField;
            }
            set {
                if ((this.видДоходаРасходаField != null)) {
                    if ((видДоходаРасходаField.Equals(value) != true)) {
                        this.видДоходаРасходаField = value;
                        this.OnPropertyChanged("ВидДоходаРасхода");
                    }
                }
                else {
                    this.видДоходаРасходаField = value;
                    this.OnPropertyChanged("ВидДоходаРасхода");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчета {
            get {
                return this.кодСчетаField;
            }
            set {
                if ((this.кодСчетаField != null)) {
                    if ((кодСчетаField.Equals(value) != true)) {
                        this.кодСчетаField = value;
                        this.OnPropertyChanged("КодСчета");
                    }
                }
                else {
                    this.кодСчетаField = value;
                    this.OnPropertyChanged("КодСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаименованиеСчета {
            get {
                return this.наименованиеСчетаField;
            }
            set {
                if ((this.наименованиеСчетаField != null)) {
                    if ((наименованиеСчетаField.Equals(value) != true)) {
                        this.наименованиеСчетаField = value;
                        this.OnPropertyChanged("НаименованиеСчета");
                    }
                }
                else {
                    this.наименованиеСчетаField = value;
                    this.OnPropertyChanged("НаименованиеСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчета {
            get {
                return this.типСчетаField;
            }
            set {
                if ((типСчетаField.Equals(value) != true)) {
                    this.типСчетаField = value;
                    this.OnPropertyChanged("ТипСчета");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаР {
            get {
                return this.кодСчетаРField;
            }
            set {
                if ((this.кодСчетаРField != null)) {
                    if ((кодСчетаРField.Equals(value) != true)) {
                        this.кодСчетаРField = value;
                        this.OnPropertyChanged("КодСчетаР");
                    }
                }
                else {
                    this.кодСчетаРField = value;
                    this.OnPropertyChanged("КодСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаР {
            get {
                return this.типСчетаРField;
            }
            set {
                if ((типСчетаРField.Equals(value) != true)) {
                    this.типСчетаРField = value;
                    this.OnPropertyChanged("ТипСчетаР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРSpecified {
            get {
                return this.типСчетаРFieldSpecified;
            }
            set {
                if ((типСчетаРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСчетаРР {
            get {
                return this.кодСчетаРРField;
            }
            set {
                if ((this.кодСчетаРРField != null)) {
                    if ((кодСчетаРРField.Equals(value) != true)) {
                        this.кодСчетаРРField = value;
                        this.OnPropertyChanged("КодСчетаРР");
                    }
                }
                else {
                    this.кодСчетаРРField = value;
                    this.OnPropertyChanged("КодСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public СтрокаОСВСТочностью3ТипСчетТипСчета ТипСчетаРР {
            get {
                return this.типСчетаРРField;
            }
            set {
                if ((типСчетаРРField.Equals(value) != true)) {
                    this.типСчетаРРField = value;
                    this.OnPropertyChanged("ТипСчетаРР");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ТипСчетаРРSpecified {
            get {
                return this.типСчетаРРFieldSpecified;
            }
            set {
                if ((типСчетаРРFieldSpecified.Equals(value) != true)) {
                    this.типСчетаРРFieldSpecified = value;
                    this.OnPropertyChanged("ТипСчетаРРSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНД {
            get {
                return this.сНДField;
            }
            set {
                if ((this.сНДField != null)) {
                    if ((сНДField.Equals(value) != true)) {
                        this.сНДField = value;
                        this.OnPropertyChanged("СНД");
                    }
                }
                else {
                    this.сНДField = value;
                    this.OnPropertyChanged("СНД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СНК {
            get {
                return this.сНКField;
            }
            set {
                if ((this.сНКField != null)) {
                    if ((сНКField.Equals(value) != true)) {
                        this.сНКField = value;
                        this.OnPropertyChanged("СНК");
                    }
                }
                else {
                    this.сНКField = value;
                    this.OnPropertyChanged("СНК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДО {
            get {
                return this.доField;
            }
            set {
                if ((this.доField != null)) {
                    if ((доField.Equals(value) != true)) {
                        this.доField = value;
                        this.OnPropertyChanged("ДО");
                    }
                }
                else {
                    this.доField = value;
                    this.OnPropertyChanged("ДО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal КО {
            get {
                return this.коField;
            }
            set {
                if ((this.коField != null)) {
                    if ((коField.Equals(value) != true)) {
                        this.коField = value;
                        this.OnPropertyChanged("КО");
                    }
                }
                else {
                    this.коField = value;
                    this.OnPropertyChanged("КО");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКД {
            get {
                return this.сКДField;
            }
            set {
                if ((this.сКДField != null)) {
                    if ((сКДField.Equals(value) != true)) {
                        this.сКДField = value;
                        this.OnPropertyChanged("СКД");
                    }
                }
                else {
                    this.сКДField = value;
                    this.OnPropertyChanged("СКД");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СКК {
            get {
                return this.сККField;
            }
            set {
                if ((this.сККField != null)) {
                    if ((сККField.Equals(value) != true)) {
                        this.сККField = value;
                        this.OnPropertyChanged("СКК");
                    }
                }
                else {
                    this.сККField = value;
                    this.OnPropertyChanged("СКК");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВТипСчет));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КонтрагентSpecified {
            get {
                return контрагентFieldSpecified;
            }
            set {
                контрагентFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДоговорSpecified {
            get {
                return договорFieldSpecified;
            }
            set {
                договорFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДокументРасчетовSpecified {
            get {
                return документРасчетовFieldSpecified;
            }
            set {
                документРасчетовFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ВидДоходаРасходаSpecified {
            get {
                return видДоходаРасходаFieldSpecified;
            }
            set {
                видДоходаРасходаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаSpecified {
            get {
                return кодСчетаFieldSpecified;
            }
            set {
                кодСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеСчетаSpecified {
            get {
                return наименованиеСчетаFieldSpecified;
            }
            set {
                наименованиеСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТипСчетаSpecified {
            get {
                return типСчетаFieldSpecified;
            }
            set {
                типСчетаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРSpecified {
            get {
                return кодСчетаРFieldSpecified;
            }
            set {
                кодСчетаРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСчетаРРSpecified {
            get {
                return кодСчетаРРFieldSpecified;
            }
            set {
                кодСчетаРРFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНДSpecified {
            get {
                return сНДFieldSpecified;
            }
            set {
                сНДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СНКSpecified {
            get {
                return сНКFieldSpecified;
            }
            set {
                сНКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДОSpecified {
            get {
                return дОFieldSpecified;
            }
            set {
                дОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КОSpecified {
            get {
                return кОFieldSpecified;
            }
            set {
                кОFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СКДSpecified {
            get {
                return сКДFieldSpecified;
            }
            set {
                сКДFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СККSpecified {
            get {
                return сККFieldSpecified;
            }
            set {
                сККFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВТипСчет object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВТипСчет object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВТипСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчет);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВТипСчет obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчет Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВТипСчет)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВТипСчет object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВТипСчет object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчет object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчет obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчет);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчет obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчет LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВТипСчетКонтрагент : System.ComponentModel.INotifyPropertyChanged {
        
        private string наименованиеField;
        
        private string иННField;
        
        private string кППField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наименованиеFieldSpecified;
        
        private bool иННFieldSpecified;
        
        private bool кППFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИНН {
            get {
                return this.иННField;
            }
            set {
                if ((this.иННField != null)) {
                    if ((иННField.Equals(value) != true)) {
                        this.иННField = value;
                        this.OnPropertyChanged("ИНН");
                    }
                }
                else {
                    this.иННField = value;
                    this.OnPropertyChanged("ИНН");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВТипСчетКонтрагент));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННSpecified {
            get {
                return иННFieldSpecified;
            }
            set {
                иННFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВТипСчетКонтрагент object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВТипСчетКонтрагент object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчетКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВТипСчетКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчетКонтрагент);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВТипСчетКонтрагент obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчетКонтрагент Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВТипСчетКонтрагент)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВТипСчетКонтрагент object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВТипСчетКонтрагент object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчетКонтрагент object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчетКонтрагент obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчетКонтрагент);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчетКонтрагент obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчетКонтрагент LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВТипСчетДоговор : System.ComponentModel.INotifyPropertyChanged {
        
        private List<СтрокаОСВТипСчетДоговорДатаПлатежа> датаПлатежаField;
        
        private string представлениеField;
        
        private string номерField;
        
        private string датаField;
        
        private string срокОплатыField;
        
        private string срокПогашенияField;
        
        private string срокОкончанияField;
        
        private string продуктField;
        
        private decimal суммаПоДоговоруField;
        
        private bool суммаПоДоговоруFieldSpecified;
        
        private string кодВалютыField;
        
        private decimal ставкаField;
        
        private bool ставкаFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool датаПлатежаFieldSpecified;
        
        private bool представлениеFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool датаFieldSpecified;
        
        private bool срокОплатыFieldSpecified;
        
        private bool срокПогашенияFieldSpecified;
        
        private bool срокОкончанияFieldSpecified;
        
        private bool продуктFieldSpecified;
        
        private bool кодВалютыFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("ДатаПлатежа", Order=0)]
        public List<СтрокаОСВТипСчетДоговорДатаПлатежа> ДатаПлатежа {
            get {
                if ((this.датаПлатежаField == null)) {
                    this.датаПлатежаField = new List<СтрокаОСВТипСчетДоговорДатаПлатежа>();
                }
                return this.датаПлатежаField;
            }
            set {
                if ((this.датаПлатежаField != null)) {
                    if ((датаПлатежаField.Equals(value) != true)) {
                        this.датаПлатежаField = value;
                        this.OnPropertyChanged("ДатаПлатежа");
                    }
                }
                else {
                    this.датаПлатежаField = value;
                    this.OnPropertyChanged("ДатаПлатежа");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Представление {
            get {
                return this.представлениеField;
            }
            set {
                if ((this.представлениеField != null)) {
                    if ((представлениеField.Equals(value) != true)) {
                        this.представлениеField = value;
                        this.OnPropertyChanged("Представление");
                    }
                }
                else {
                    this.представлениеField = value;
                    this.OnPropertyChanged("Представление");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СрокОплаты {
            get {
                return this.срокОплатыField;
            }
            set {
                if ((this.срокОплатыField != null)) {
                    if ((срокОплатыField.Equals(value) != true)) {
                        this.срокОплатыField = value;
                        this.OnPropertyChanged("СрокОплаты");
                    }
                }
                else {
                    this.срокОплатыField = value;
                    this.OnPropertyChanged("СрокОплаты");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СрокПогашения {
            get {
                return this.срокПогашенияField;
            }
            set {
                if ((this.срокПогашенияField != null)) {
                    if ((срокПогашенияField.Equals(value) != true)) {
                        this.срокПогашенияField = value;
                        this.OnPropertyChanged("СрокПогашения");
                    }
                }
                else {
                    this.срокПогашенияField = value;
                    this.OnPropertyChanged("СрокПогашения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string СрокОкончания {
            get {
                return this.срокОкончанияField;
            }
            set {
                if ((this.срокОкончанияField != null)) {
                    if ((срокОкончанияField.Equals(value) != true)) {
                        this.срокОкончанияField = value;
                        this.OnPropertyChanged("СрокОкончания");
                    }
                }
                else {
                    this.срокОкончанияField = value;
                    this.OnPropertyChanged("СрокОкончания");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Продукт {
            get {
                return this.продуктField;
            }
            set {
                if ((this.продуктField != null)) {
                    if ((продуктField.Equals(value) != true)) {
                        this.продуктField = value;
                        this.OnPropertyChanged("Продукт");
                    }
                }
                else {
                    this.продуктField = value;
                    this.OnPropertyChanged("Продукт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СуммаПоДоговору {
            get {
                return this.суммаПоДоговоруField;
            }
            set {
                if ((this.суммаПоДоговоруField != null)) {
                    if ((суммаПоДоговоруField.Equals(value) != true)) {
                        this.суммаПоДоговоруField = value;
                        this.OnPropertyChanged("СуммаПоДоговору");
                    }
                }
                else {
                    this.суммаПоДоговоруField = value;
                    this.OnPropertyChanged("СуммаПоДоговору");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СуммаПоДоговоруSpecified {
            get {
                return this.суммаПоДоговоруFieldSpecified;
            }
            set {
                if ((суммаПоДоговоруFieldSpecified.Equals(value) != true)) {
                    this.суммаПоДоговоруFieldSpecified = value;
                    this.OnPropertyChanged("СуммаПоДоговоруSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодВалюты {
            get {
                return this.кодВалютыField;
            }
            set {
                if ((this.кодВалютыField != null)) {
                    if ((кодВалютыField.Equals(value) != true)) {
                        this.кодВалютыField = value;
                        this.OnPropertyChanged("КодВалюты");
                    }
                }
                else {
                    this.кодВалютыField = value;
                    this.OnPropertyChanged("КодВалюты");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Ставка {
            get {
                return this.ставкаField;
            }
            set {
                if ((this.ставкаField != null)) {
                    if ((ставкаField.Equals(value) != true)) {
                        this.ставкаField = value;
                        this.OnPropertyChanged("Ставка");
                    }
                }
                else {
                    this.ставкаField = value;
                    this.OnPropertyChanged("Ставка");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СтавкаSpecified {
            get {
                return this.ставкаFieldSpecified;
            }
            set {
                if ((ставкаFieldSpecified.Equals(value) != true)) {
                    this.ставкаFieldSpecified = value;
                    this.OnPropertyChanged("СтавкаSpecified");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВТипСчетДоговор));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаПлатежаSpecified {
            get {
                return датаПлатежаFieldSpecified;
            }
            set {
                датаПлатежаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПредставлениеSpecified {
            get {
                return представлениеFieldSpecified;
            }
            set {
                представлениеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СрокОплатыSpecified {
            get {
                return срокОплатыFieldSpecified;
            }
            set {
                срокОплатыFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СрокПогашенияSpecified {
            get {
                return срокПогашенияFieldSpecified;
            }
            set {
                срокПогашенияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СрокОкончанияSpecified {
            get {
                return срокОкончанияFieldSpecified;
            }
            set {
                срокОкончанияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПродуктSpecified {
            get {
                return продуктFieldSpecified;
            }
            set {
                продуктFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодВалютыSpecified {
            get {
                return кодВалютыFieldSpecified;
            }
            set {
                кодВалютыFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВТипСчетДоговор object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВТипСчетДоговор object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчетДоговор object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВТипСчетДоговор obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчетДоговор);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВТипСчетДоговор obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчетДоговор Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВТипСчетДоговор)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВТипСчетДоговор object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВТипСчетДоговор object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчетДоговор object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчетДоговор obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчетДоговор);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчетДоговор obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчетДоговор LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВТипСчетДоговорДатаПлатежа : System.ComponentModel.INotifyPropertyChanged {
        
        private string датаField;
        
        private decimal суммаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool датаFieldSpecified;
        
        private bool суммаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Сумма {
            get {
                return this.суммаField;
            }
            set {
                if ((this.суммаField != null)) {
                    if ((суммаField.Equals(value) != true)) {
                        this.суммаField = value;
                        this.OnPropertyChanged("Сумма");
                    }
                }
                else {
                    this.суммаField = value;
                    this.OnPropertyChanged("Сумма");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВТипСчетДоговорДатаПлатежа));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаSpecified {
            get {
                return суммаFieldSpecified;
            }
            set {
                суммаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВТипСчетДоговорДатаПлатежа object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВТипСчетДоговорДатаПлатежа object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчетДоговорДатаПлатежа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВТипСчетДоговорДатаПлатежа obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчетДоговорДатаПлатежа);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВТипСчетДоговорДатаПлатежа obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчетДоговорДатаПлатежа Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВТипСчетДоговорДатаПлатежа)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВТипСчетДоговорДатаПлатежа object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВТипСчетДоговорДатаПлатежа object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчетДоговорДатаПлатежа object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчетДоговорДатаПлатежа obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчетДоговорДатаПлатежа);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчетДоговорДатаПлатежа obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчетДоговорДатаПлатежа LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВТипСчетДокументРасчетов : System.ComponentModel.INotifyPropertyChanged {
        
        private string представлениеField;
        
        private string номерField;
        
        private string датаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool представлениеFieldSpecified;
        
        private bool номерFieldSpecified;
        
        private bool датаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Представление {
            get {
                return this.представлениеField;
            }
            set {
                if ((this.представлениеField != null)) {
                    if ((представлениеField.Equals(value) != true)) {
                        this.представлениеField = value;
                        this.OnPropertyChanged("Представление");
                    }
                }
                else {
                    this.представлениеField = value;
                    this.OnPropertyChanged("Представление");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Номер {
            get {
                return this.номерField;
            }
            set {
                if ((this.номерField != null)) {
                    if ((номерField.Equals(value) != true)) {
                        this.номерField = value;
                        this.OnPropertyChanged("Номер");
                    }
                }
                else {
                    this.номерField = value;
                    this.OnPropertyChanged("Номер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Дата {
            get {
                return this.датаField;
            }
            set {
                if ((this.датаField != null)) {
                    if ((датаField.Equals(value) != true)) {
                        this.датаField = value;
                        this.OnPropertyChanged("Дата");
                    }
                }
                else {
                    this.датаField = value;
                    this.OnPropertyChanged("Дата");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВТипСчетДокументРасчетов));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПредставлениеSpecified {
            get {
                return представлениеFieldSpecified;
            }
            set {
                представлениеFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НомерSpecified {
            get {
                return номерFieldSpecified;
            }
            set {
                номерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДатаSpecified {
            get {
                return датаFieldSpecified;
            }
            set {
                датаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВТипСчетДокументРасчетов object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВТипСчетДокументРасчетов object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчетДокументРасчетов object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВТипСчетДокументРасчетов obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчетДокументРасчетов);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВТипСчетДокументРасчетов obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчетДокументРасчетов Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВТипСчетДокументРасчетов)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВТипСчетДокументРасчетов object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВТипСчетДокументРасчетов object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчетДокументРасчетов object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчетДокументРасчетов obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчетДокументРасчетов);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчетДокументРасчетов obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчетДокументРасчетов LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СтрокаОСВТипСчетВидДоходаРасхода : System.ComponentModel.INotifyPropertyChanged {
        
        private string наименованиеField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool наименованиеFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Наименование {
            get {
                return this.наименованиеField;
            }
            set {
                if ((this.наименованиеField != null)) {
                    if ((наименованиеField.Equals(value) != true)) {
                        this.наименованиеField = value;
                        this.OnPropertyChanged("Наименование");
                    }
                }
                else {
                    this.наименованиеField = value;
                    this.OnPropertyChanged("Наименование");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтрокаОСВТипСчетВидДоходаРасхода));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НаименованиеSpecified {
            get {
                return наименованиеFieldSpecified;
            }
            set {
                наименованиеFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтрокаОСВТипСчетВидДоходаРасхода object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтрокаОСВТипСчетВидДоходаРасхода object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчетВидДоходаРасхода object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтрокаОСВТипСчетВидДоходаРасхода obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчетВидДоходаРасхода);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтрокаОСВТипСчетВидДоходаРасхода obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчетВидДоходаРасхода Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтрокаОСВТипСчетВидДоходаРасхода)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтрокаОСВТипСчетВидДоходаРасхода object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтрокаОСВТипСчетВидДоходаРасхода object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтрокаОСВТипСчетВидДоходаРасхода object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчетВидДоходаРасхода obj, out System.Exception exception) {
            exception = null;
            obj = default(СтрокаОСВТипСчетВидДоходаРасхода);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтрокаОСВТипСчетВидДоходаРасхода obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтрокаОСВТипСчетВидДоходаРасхода LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОСВТип : System.ComponentModel.INotifyPropertyChanged {
        
        private List<СтрокаОСВТип> строкаОСВField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool строкаОСВFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("СтрокаОСВ", Order=0)]
        public List<СтрокаОСВТип> СтрокаОСВ {
            get {
                if ((this.строкаОСВField == null)) {
                    this.строкаОСВField = new List<СтрокаОСВТип>();
                }
                return this.строкаОСВField;
            }
            set {
                if ((this.строкаОСВField != null)) {
                    if ((строкаОСВField.Equals(value) != true)) {
                        this.строкаОСВField = value;
                        this.OnPropertyChanged("СтрокаОСВ");
                    }
                }
                else {
                    this.строкаОСВField = value;
                    this.OnPropertyChanged("СтрокаОСВ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОСВТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СтрокаОСВSpecified {
            get {
                return строкаОСВFieldSpecified;
            }
            set {
                строкаОСВFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОСВТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОСВТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОСВТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОСВТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОСВТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОСВТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОСВТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОСВТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОСВТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОСВТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОСВТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОСВТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОСВТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОСВТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОСВТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОСВСТочностью3Тип : System.ComponentModel.INotifyPropertyChanged {
        
        private List<СтрокаОСВСТочностью3Тип> строкаОСВField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool строкаОСВFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("СтрокаОСВ", Order=0)]
        public List<СтрокаОСВСТочностью3Тип> СтрокаОСВ {
            get {
                if ((this.строкаОСВField == null)) {
                    this.строкаОСВField = new List<СтрокаОСВСТочностью3Тип>();
                }
                return this.строкаОСВField;
            }
            set {
                if ((this.строкаОСВField != null)) {
                    if ((строкаОСВField.Equals(value) != true)) {
                        this.строкаОСВField = value;
                        this.OnPropertyChanged("СтрокаОСВ");
                    }
                }
                else {
                    this.строкаОСВField = value;
                    this.OnPropertyChanged("СтрокаОСВ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОСВСТочностью3Тип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СтрокаОСВSpecified {
            get {
                return строкаОСВFieldSpecified;
            }
            set {
                строкаОСВFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОСВСТочностью3Тип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОСВСТочностью3Тип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОСВСТочностью3Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОСВСТочностью3Тип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОСВСТочностью3Тип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОСВСТочностью3Тип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОСВСТочностью3Тип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОСВСТочностью3Тип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОСВСТочностью3Тип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОСВСТочностью3Тип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОСВСТочностью3Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОСВСТочностью3Тип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОСВСТочностью3Тип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОСВСТочностью3Тип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОСВСТочностью3Тип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class КредЗаймТочн3Тип : System.ComponentModel.INotifyPropertyChanged {
        
        private List<СтрокаКредЗаймТочн3Тип> строкаОСВField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool строкаОСВFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("СтрокаОСВ", Order=0)]
        public List<СтрокаКредЗаймТочн3Тип> СтрокаОСВ {
            get {
                if ((this.строкаОСВField == null)) {
                    this.строкаОСВField = new List<СтрокаКредЗаймТочн3Тип>();
                }
                return this.строкаОСВField;
            }
            set {
                if ((this.строкаОСВField != null)) {
                    if ((строкаОСВField.Equals(value) != true)) {
                        this.строкаОСВField = value;
                        this.OnPropertyChanged("СтрокаОСВ");
                    }
                }
                else {
                    this.строкаОСВField = value;
                    this.OnPropertyChanged("СтрокаОСВ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(КредЗаймТочн3Тип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СтрокаОСВSpecified {
            get {
                return строкаОСВFieldSpecified;
            }
            set {
                строкаОСВFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current КредЗаймТочн3Тип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an КредЗаймТочн3Тип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output КредЗаймТочн3Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out КредЗаймТочн3Тип obj, out System.Exception exception) {
            exception = null;
            obj = default(КредЗаймТочн3Тип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out КредЗаймТочн3Тип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static КредЗаймТочн3Тип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((КредЗаймТочн3Тип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current КредЗаймТочн3Тип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an КредЗаймТочн3Тип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output КредЗаймТочн3Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out КредЗаймТочн3Тип obj, out System.Exception exception) {
            exception = null;
            obj = default(КредЗаймТочн3Тип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out КредЗаймТочн3Тип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static КредЗаймТочн3Тип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class АнализСчетаСТочностью3Тип : System.ComponentModel.INotifyPropertyChanged {
        
        private List<АнализСчетаСТочностью3ТипСтрокаАнализа> строкаАнализаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool строкаАнализаFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("СтрокаАнализа", Order=0)]
        public List<АнализСчетаСТочностью3ТипСтрокаАнализа> СтрокаАнализа {
            get {
                if ((this.строкаАнализаField == null)) {
                    this.строкаАнализаField = new List<АнализСчетаСТочностью3ТипСтрокаАнализа>();
                }
                return this.строкаАнализаField;
            }
            set {
                if ((this.строкаАнализаField != null)) {
                    if ((строкаАнализаField.Equals(value) != true)) {
                        this.строкаАнализаField = value;
                        this.OnPropertyChanged("СтрокаАнализа");
                    }
                }
                else {
                    this.строкаАнализаField = value;
                    this.OnPropertyChanged("СтрокаАнализа");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АнализСчетаСТочностью3Тип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СтрокаАнализаSpecified {
            get {
                return строкаАнализаFieldSpecified;
            }
            set {
                строкаАнализаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3Тип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an АнализСчетаСТочностью3Тип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3Тип obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3Тип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out АнализСчетаСТочностью3Тип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3Тип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((АнализСчетаСТочностью3Тип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current АнализСчетаСТочностью3Тип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an АнализСчетаСТочностью3Тип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АнализСчетаСТочностью3Тип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3Тип obj, out System.Exception exception) {
            exception = null;
            obj = default(АнализСчетаСТочностью3Тип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out АнализСчетаСТочностью3Тип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static АнализСчетаСТочностью3Тип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class АдрИноТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string оКСМField;
        
        private string адрТекстField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool оКСМFieldSpecified;
        
        private bool адрТекстFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ОКСМ {
            get {
                return this.оКСМField;
            }
            set {
                if ((this.оКСМField != null)) {
                    if ((оКСМField.Equals(value) != true)) {
                        this.оКСМField = value;
                        this.OnPropertyChanged("ОКСМ");
                    }
                }
                else {
                    this.оКСМField = value;
                    this.OnPropertyChanged("ОКСМ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string АдрТекст {
            get {
                return this.адрТекстField;
            }
            set {
                if ((this.адрТекстField != null)) {
                    if ((адрТекстField.Equals(value) != true)) {
                        this.адрТекстField = value;
                        this.OnPropertyChanged("АдрТекст");
                    }
                }
                else {
                    this.адрТекстField = value;
                    this.OnPropertyChanged("АдрТекст");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(АдрИноТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ОКСМSpecified {
            get {
                return оКСМFieldSpecified;
            }
            set {
                оКСМFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool АдрТекстSpecified {
            get {
                return адрТекстFieldSpecified;
            }
            set {
                адрТекстFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current АдрИноТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an АдрИноТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output АдрИноТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out АдрИноТип obj, out System.Exception exception) {
            exception = null;
            obj = default(АдрИноТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out АдрИноТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static АдрИноТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((АдрИноТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current АдрИноТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an АдрИноТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output АдрИноТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out АдрИноТип obj, out System.Exception exception) {
            exception = null;
            obj = default(АдрИноТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out АдрИноТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static АдрИноТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class КорНБТип : System.ComponentModel.INotifyPropertyChanged {
        
        private КорНБТипПризнак признакField;
        
        private string суммаField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool признакFieldSpecified;
        
        private bool суммаFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public КорНБТипПризнак Признак {
            get {
                return this.признакField;
            }
            set {
                if ((признакField.Equals(value) != true)) {
                    this.признакField = value;
                    this.OnPropertyChanged("Признак");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Сумма {
            get {
                return this.суммаField;
            }
            set {
                if ((this.суммаField != null)) {
                    if ((суммаField.Equals(value) != true)) {
                        this.суммаField = value;
                        this.OnPropertyChanged("Сумма");
                    }
                }
                else {
                    this.суммаField = value;
                    this.OnPropertyChanged("Сумма");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(КорНБТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПризнакSpecified {
            get {
                return признакFieldSpecified;
            }
            set {
                признакFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СуммаSpecified {
            get {
                return суммаFieldSpecified;
            }
            set {
                суммаFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current КорНБТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an КорНБТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output КорНБТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out КорНБТип obj, out System.Exception exception) {
            exception = null;
            obj = default(КорНБТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out КорНБТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static КорНБТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((КорНБТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current КорНБТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an КорНБТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output КорНБТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out КорНБТип obj, out System.Exception exception) {
            exception = null;
            obj = default(КорНБТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out КорНБТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static КорНБТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum КорНБТипПризнак {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ПУАвТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string кБКField;
        
        private string налПУField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кБКFieldSpecified;
        
        private bool налПУFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КБК {
            get {
                return this.кБКField;
            }
            set {
                if ((this.кБКField != null)) {
                    if ((кБКField.Equals(value) != true)) {
                        this.кБКField = value;
                        this.OnPropertyChanged("КБК");
                    }
                }
                else {
                    this.кБКField = value;
                    this.OnPropertyChanged("КБК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалПУ {
            get {
                return this.налПУField;
            }
            set {
                if ((this.налПУField != null)) {
                    if ((налПУField.Equals(value) != true)) {
                        this.налПУField = value;
                        this.OnPropertyChanged("НалПУ");
                    }
                }
                else {
                    this.налПУField = value;
                    this.OnPropertyChanged("НалПУ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ПУАвТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КБКSpecified {
            get {
                return кБКFieldSpecified;
            }
            set {
                кБКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалПУSpecified {
            get {
                return налПУFieldSpecified;
            }
            set {
                налПУFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ПУАвТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ПУАвТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ПУАвТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ПУАвТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ПУАвТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ПУАвТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ПУАвТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ПУАвТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ПУАвТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ПУАвТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ПУАвТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ПУАвТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ПУАвТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ПУАвТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ПУАвТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ПУМесТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string кБКField;
        
        private string авПлат1Field;
        
        private string авПлат2Field;
        
        private string авПлат3Field;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кБКFieldSpecified;
        
        private bool авПлат1FieldSpecified;
        
        private bool авПлат2FieldSpecified;
        
        private bool авПлат3FieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КБК {
            get {
                return this.кБКField;
            }
            set {
                if ((this.кБКField != null)) {
                    if ((кБКField.Equals(value) != true)) {
                        this.кБКField = value;
                        this.OnPropertyChanged("КБК");
                    }
                }
                else {
                    this.кБКField = value;
                    this.OnPropertyChanged("КБК");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string АвПлат1 {
            get {
                return this.авПлат1Field;
            }
            set {
                if ((this.авПлат1Field != null)) {
                    if ((авПлат1Field.Equals(value) != true)) {
                        this.авПлат1Field = value;
                        this.OnPropertyChanged("АвПлат1");
                    }
                }
                else {
                    this.авПлат1Field = value;
                    this.OnPropertyChanged("АвПлат1");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string АвПлат2 {
            get {
                return this.авПлат2Field;
            }
            set {
                if ((this.авПлат2Field != null)) {
                    if ((авПлат2Field.Equals(value) != true)) {
                        this.авПлат2Field = value;
                        this.OnPropertyChanged("АвПлат2");
                    }
                }
                else {
                    this.авПлат2Field = value;
                    this.OnPropertyChanged("АвПлат2");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string АвПлат3 {
            get {
                return this.авПлат3Field;
            }
            set {
                if ((this.авПлат3Field != null)) {
                    if ((авПлат3Field.Equals(value) != true)) {
                        this.авПлат3Field = value;
                        this.OnPropertyChanged("АвПлат3");
                    }
                }
                else {
                    this.авПлат3Field = value;
                    this.OnPropertyChanged("АвПлат3");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ПУМесТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КБКSpecified {
            get {
                return кБКFieldSpecified;
            }
            set {
                кБКFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool АвПлат1Specified {
            get {
                return авПлат1FieldSpecified;
            }
            set {
                авПлат1FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool АвПлат2Specified {
            get {
                return авПлат2FieldSpecified;
            }
            set {
                авПлат2FieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool АвПлат3Specified {
            get {
                return авПлат3FieldSpecified;
            }
            set {
                авПлат3FieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ПУМесТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ПУМесТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ПУМесТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ПУМесТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ПУМесТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ПУМесТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ПУМесТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ПУМесТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ПУМесТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ПУМесТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ПУМесТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ПУМесТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ПУМесТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ПУМесТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ПУМесТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СвПолучТип : System.ComponentModel.INotifyPropertyChanged {
        
        private АдрРФТип мНПолучРФField;
        
        private ФИОТип фИОРукField;
        
        private string иННПолучField;
        
        private string кПППолучField;
        
        private string наимПолучField;
        
        private string тлфField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool мНПолучРФFieldSpecified;
        
        private bool фИОРукFieldSpecified;
        
        private bool иННПолучFieldSpecified;
        
        private bool кПППолучFieldSpecified;
        
        private bool наимПолучFieldSpecified;
        
        private bool тлфFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public АдрРФТип МНПолучРФ {
            get {
                if ((this.мНПолучРФField == null)) {
                    this.мНПолучРФField = new АдрРФТип();
                }
                return this.мНПолучРФField;
            }
            set {
                if ((this.мНПолучРФField != null)) {
                    if ((мНПолучРФField.Equals(value) != true)) {
                        this.мНПолучРФField = value;
                        this.OnPropertyChanged("МНПолучРФ");
                    }
                }
                else {
                    this.мНПолучРФField = value;
                    this.OnPropertyChanged("МНПолучРФ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ФИОТип ФИОРук {
            get {
                if ((this.фИОРукField == null)) {
                    this.фИОРукField = new ФИОТип();
                }
                return this.фИОРукField;
            }
            set {
                if ((this.фИОРукField != null)) {
                    if ((фИОРукField.Equals(value) != true)) {
                        this.фИОРукField = value;
                        this.OnPropertyChanged("ФИОРук");
                    }
                }
                else {
                    this.фИОРукField = value;
                    this.OnPropertyChanged("ФИОРук");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННПолуч {
            get {
                return this.иННПолучField;
            }
            set {
                if ((this.иННПолучField != null)) {
                    if ((иННПолучField.Equals(value) != true)) {
                        this.иННПолучField = value;
                        this.OnPropertyChanged("ИННПолуч");
                    }
                }
                else {
                    this.иННПолучField = value;
                    this.OnPropertyChanged("ИННПолуч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПППолуч {
            get {
                return this.кПППолучField;
            }
            set {
                if ((this.кПППолучField != null)) {
                    if ((кПППолучField.Equals(value) != true)) {
                        this.кПППолучField = value;
                        this.OnPropertyChanged("КПППолуч");
                    }
                }
                else {
                    this.кПППолучField = value;
                    this.OnPropertyChanged("КПППолуч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимПолуч {
            get {
                return this.наимПолучField;
            }
            set {
                if ((this.наимПолучField != null)) {
                    if ((наимПолучField.Equals(value) != true)) {
                        this.наимПолучField = value;
                        this.OnPropertyChanged("НаимПолуч");
                    }
                }
                else {
                    this.наимПолучField = value;
                    this.OnPropertyChanged("НаимПолуч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Тлф {
            get {
                return this.тлфField;
            }
            set {
                if ((this.тлфField != null)) {
                    if ((тлфField.Equals(value) != true)) {
                        this.тлфField = value;
                        this.OnPropertyChanged("Тлф");
                    }
                }
                else {
                    this.тлфField = value;
                    this.OnPropertyChanged("Тлф");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвПолучТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool МНПолучРФSpecified {
            get {
                return мНПолучРФFieldSpecified;
            }
            set {
                мНПолучРФFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ФИОРукSpecified {
            get {
                return фИОРукFieldSpecified;
            }
            set {
                фИОРукFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИННПолучSpecified {
            get {
                return иННПолучFieldSpecified;
            }
            set {
                иННПолучFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КПППолучSpecified {
            get {
                return кПППолучFieldSpecified;
            }
            set {
                кПППолучFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимПолучSpecified {
            get {
                return наимПолучFieldSpecified;
            }
            set {
                наимПолучFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТлфSpecified {
            get {
                return тлфFieldSpecified;
            }
            set {
                тлфFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвПолучТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СвПолучТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвПолучТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвПолучТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СвПолучТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СвПолучТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СвПолучТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СвПолучТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СвПолучТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СвПолучТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвПолучТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвПолучТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СвПолучТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СвПолучТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СвПолучТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СумВычТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодВычетField;
        
        private decimal сумВычетField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодВычетFieldSpecified;
        
        private bool сумВычетFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string КодВычет {
            get {
                return this.кодВычетField;
            }
            set {
                if ((this.кодВычетField != null)) {
                    if ((кодВычетField.Equals(value) != true)) {
                        this.кодВычетField = value;
                        this.OnPropertyChanged("КодВычет");
                    }
                }
                else {
                    this.кодВычетField = value;
                    this.OnPropertyChanged("КодВычет");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СумВычет {
            get {
                return this.сумВычетField;
            }
            set {
                if ((this.сумВычетField != null)) {
                    if ((сумВычетField.Equals(value) != true)) {
                        this.сумВычетField = value;
                        this.OnPropertyChanged("СумВычет");
                    }
                }
                else {
                    this.сумВычетField = value;
                    this.OnPropertyChanged("СумВычет");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СумВычТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодВычетSpecified {
            get {
                return кодВычетFieldSpecified;
            }
            set {
                кодВычетFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумВычетSpecified {
            get {
                return сумВычетFieldSpecified;
            }
            set {
                сумВычетFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СумВычТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СумВычТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СумВычТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СумВычТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СумВычТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СумВычТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СумВычТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СумВычТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СумВычТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СумВычТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СумВычТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СумВычТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СумВычТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СумВычТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СумВычТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СведСумНал : System.ComponentModel.INotifyPropertyChanged {
        
        private string налБазаField;
        
        private string сумНалField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool налБазаFieldSpecified;
        
        private bool сумНалFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалБаза {
            get {
                return this.налБазаField;
            }
            set {
                if ((this.налБазаField != null)) {
                    if ((налБазаField.Equals(value) != true)) {
                        this.налБазаField = value;
                        this.OnPropertyChanged("НалБаза");
                    }
                }
                else {
                    this.налБазаField = value;
                    this.OnPropertyChanged("НалБаза");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумНал {
            get {
                return this.сумНалField;
            }
            set {
                if ((this.сумНалField != null)) {
                    if ((сумНалField.Equals(value) != true)) {
                        this.сумНалField = value;
                        this.OnPropertyChanged("СумНал");
                    }
                }
                else {
                    this.сумНалField = value;
                    this.OnPropertyChanged("СумНал");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СведСумНал));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НалБазаSpecified {
            get {
                return налБазаFieldSpecified;
            }
            set {
                налБазаFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумНалSpecified {
            get {
                return сумНалFieldSpecified;
            }
            set {
                сумНалFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СведСумНал object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СведСумНал object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СведСумНал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СведСумНал obj, out System.Exception exception) {
            exception = null;
            obj = default(СведСумНал);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СведСумНал obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СведСумНал Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СведСумНал)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СведСумНал object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СведСумНал object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СведСумНал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СведСумНал obj, out System.Exception exception) {
            exception = null;
            obj = default(СведСумНал);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СведСумНал obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СведСумНал LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СвУчСдТип : System.ComponentModel.INotifyPropertyChanged {
        
        private object itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool itemFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute("СведИП", typeof(СвУчСдТипСведИП), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("СведЮЛ", typeof(СвУчСдТипСведЮЛ), Order=0)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                if ((this.itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        this.itemField = value;
                        this.OnPropertyChanged("Item");
                    }
                }
                else {
                    this.itemField = value;
                    this.OnPropertyChanged("Item");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвУчСдТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ItemSpecified {
            get {
                return itemFieldSpecified;
            }
            set {
                itemFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвУчСдТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СвУчСдТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвУчСдТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвУчСдТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СвУчСдТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СвУчСдТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СвУчСдТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СвУчСдТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СвУчСдТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СвУчСдТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвУчСдТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвУчСдТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СвУчСдТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СвУчСдТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СвУчСдТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СвУчСдТипСведИП : System.ComponentModel.INotifyPropertyChanged {
        
        private string иННФЛField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool иННФЛFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННФЛ {
            get {
                return this.иННФЛField;
            }
            set {
                if ((this.иННФЛField != null)) {
                    if ((иННФЛField.Equals(value) != true)) {
                        this.иННФЛField = value;
                        this.OnPropertyChanged("ИННФЛ");
                    }
                }
                else {
                    this.иННФЛField = value;
                    this.OnPropertyChanged("ИННФЛ");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвУчСдТипСведИП));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ИННФЛSpecified {
            get {
                return иННФЛFieldSpecified;
            }
            set {
                иННФЛFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвУчСдТипСведИП object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СвУчСдТипСведИП object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвУчСдТипСведИП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвУчСдТипСведИП obj, out System.Exception exception) {
            exception = null;
            obj = default(СвУчСдТипСведИП);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СвУчСдТипСведИП obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СвУчСдТипСведИП Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СвУчСдТипСведИП)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СвУчСдТипСведИП object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СвУчСдТипСведИП object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвУчСдТипСведИП object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвУчСдТипСведИП obj, out System.Exception exception) {
            exception = null;
            obj = default(СвУчСдТипСведИП);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СвУчСдТипСведИП obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СвУчСдТипСведИП LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class СвУчСдТипСведЮЛ : System.ComponentModel.INotifyPropertyChanged {
        
        private string иННЮЛField;
        
        private string кППField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool иННЮЛFieldSpecified;
        
        private bool кППFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ИННЮЛ {
            get {
                return this.иННЮЛField;
            }
            set {
                if ((this.иННЮЛField != null)) {
                    if ((иННЮЛField.Equals(value) != true)) {
                        this.иННЮЛField = value;
                        this.OnPropertyChanged("ИННЮЛ");
                    }
                }
                else {
                    this.иННЮЛField = value;
                    this.OnPropertyChanged("ИННЮЛ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КПП {
            get {
                return this.кППField;
            }
            set {
                if ((this.кППField != null)) {
                    if ((кППField.Equals(value) != true)) {
                        this.кППField = value;
                        this.OnPropertyChanged("КПП");
                    }
                }
                else {
                    this.кППField = value;
                    this.OnPropertyChanged("КПП");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвУчСдТипСведЮЛ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ИННЮЛSpecified {
            get {
                return иННЮЛFieldSpecified;
            }
            set {
                иННЮЛFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППSpecified {
            get {
                return кППFieldSpecified;
            }
            set {
                кППFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвУчСдТипСведЮЛ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СвУчСдТипСведЮЛ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвУчСдТипСведЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвУчСдТипСведЮЛ obj, out System.Exception exception) {
            exception = null;
            obj = default(СвУчСдТипСведЮЛ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СвУчСдТипСведЮЛ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СвУчСдТипСведЮЛ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СвУчСдТипСведЮЛ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СвУчСдТипСведЮЛ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СвУчСдТипСведЮЛ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвУчСдТипСведЮЛ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвУчСдТипСведЮЛ obj, out System.Exception exception) {
            exception = null;
            obj = default(СвУчСдТипСведЮЛ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СвУчСдТипСведЮЛ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СвУчСдТипСведЮЛ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СтавкаТип : System.ComponentModel.INotifyPropertyChanged {
        
        private decimal ставкаКвField;
        
        private bool ставкаКвFieldSpecified;
        
        private decimal ставкаПгField;
        
        private bool ставкаПгFieldSpecified;
        
        private decimal ставка9мField;
        
        private bool ставка9мFieldSpecified;
        
        private decimal ставкаНалПерField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool ставкаНалПерFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СтавкаКв {
            get {
                return this.ставкаКвField;
            }
            set {
                if ((this.ставкаКвField != null)) {
                    if ((ставкаКвField.Equals(value) != true)) {
                        this.ставкаКвField = value;
                        this.OnPropertyChanged("СтавкаКв");
                    }
                }
                else {
                    this.ставкаКвField = value;
                    this.OnPropertyChanged("СтавкаКв");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СтавкаКвSpecified {
            get {
                return this.ставкаКвFieldSpecified;
            }
            set {
                if ((ставкаКвFieldSpecified.Equals(value) != true)) {
                    this.ставкаКвFieldSpecified = value;
                    this.OnPropertyChanged("СтавкаКвSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СтавкаПг {
            get {
                return this.ставкаПгField;
            }
            set {
                if ((this.ставкаПгField != null)) {
                    if ((ставкаПгField.Equals(value) != true)) {
                        this.ставкаПгField = value;
                        this.OnPropertyChanged("СтавкаПг");
                    }
                }
                else {
                    this.ставкаПгField = value;
                    this.OnPropertyChanged("СтавкаПг");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СтавкаПгSpecified {
            get {
                return this.ставкаПгFieldSpecified;
            }
            set {
                if ((ставкаПгFieldSpecified.Equals(value) != true)) {
                    this.ставкаПгFieldSpecified = value;
                    this.OnPropertyChanged("СтавкаПгSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal Ставка9м {
            get {
                return this.ставка9мField;
            }
            set {
                if ((this.ставка9мField != null)) {
                    if ((ставка9мField.Equals(value) != true)) {
                        this.ставка9мField = value;
                        this.OnPropertyChanged("Ставка9м");
                    }
                }
                else {
                    this.ставка9мField = value;
                    this.OnPropertyChanged("Ставка9м");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Ставка9мSpecified {
            get {
                return this.ставка9мFieldSpecified;
            }
            set {
                if ((ставка9мFieldSpecified.Equals(value) != true)) {
                    this.ставка9мFieldSpecified = value;
                    this.OnPropertyChanged("Ставка9мSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СтавкаНалПер {
            get {
                return this.ставкаНалПерField;
            }
            set {
                if ((this.ставкаНалПерField != null)) {
                    if ((ставкаНалПерField.Equals(value) != true)) {
                        this.ставкаНалПерField = value;
                        this.OnPropertyChanged("СтавкаНалПер");
                    }
                }
                else {
                    this.ставкаНалПерField = value;
                    this.OnPropertyChanged("СтавкаНалПер");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СтавкаТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СтавкаНалПерSpecified {
            get {
                return ставкаНалПерFieldSpecified;
            }
            set {
                ставкаНалПерFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СтавкаТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СтавкаТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СтавкаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СтавкаТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СтавкаТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СтавкаТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СтавкаТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СтавкаТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СтавкаТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СтавкаТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СтавкаТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СтавкаТип obj, out System.Exception exception) {
            exception = null;
            obj = default(СтавкаТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СтавкаТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СтавкаТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class JavaScript : System.ComponentModel.INotifyPropertyChanged {
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(JavaScript));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current JavaScript object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an JavaScript object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output JavaScript object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out JavaScript obj, out System.Exception exception) {
            exception = null;
            obj = default(JavaScript);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out JavaScript obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static JavaScript Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((JavaScript)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current JavaScript object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an JavaScript object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output JavaScript object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out JavaScript obj, out System.Exception exception) {
            exception = null;
            obj = default(JavaScript);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out JavaScript obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static JavaScript LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СвУбытГод : System.ComponentModel.INotifyPropertyChanged {
        
        private string годУбытField;
        
        private string сумУбытField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool годУбытFieldSpecified;
        
        private bool сумУбытFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="gYear")]
        public string ГодУбыт {
            get {
                return this.годУбытField;
            }
            set {
                if ((this.годУбытField != null)) {
                    if ((годУбытField.Equals(value) != true)) {
                        this.годУбытField = value;
                        this.OnPropertyChanged("ГодУбыт");
                    }
                }
                else {
                    this.годУбытField = value;
                    this.OnPropertyChanged("ГодУбыт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумУбыт {
            get {
                return this.сумУбытField;
            }
            set {
                if ((this.сумУбытField != null)) {
                    if ((сумУбытField.Equals(value) != true)) {
                        this.сумУбытField = value;
                        this.OnPropertyChanged("СумУбыт");
                    }
                }
                else {
                    this.сумУбытField = value;
                    this.OnPropertyChanged("СумУбыт");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СвУбытГод));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ГодУбытSpecified {
            get {
                return годУбытFieldSpecified;
            }
            set {
                годУбытFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумУбытSpecified {
            get {
                return сумУбытFieldSpecified;
            }
            set {
                сумУбытFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СвУбытГод object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СвУбытГод object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СвУбытГод object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СвУбытГод obj, out System.Exception exception) {
            exception = null;
            obj = default(СвУбытГод);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СвУбытГод obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СвУбытГод Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СвУбытГод)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СвУбытГод object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СвУбытГод object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СвУбытГод object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СвУбытГод obj, out System.Exception exception) {
            exception = null;
            obj = default(СвУбытГод);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СвУбытГод obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СвУбытГод LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СумТип504 : System.ComponentModel.INotifyPropertyChanged {
        
        private string сумКвField;
        
        private string сумПгField;
        
        private string сум9мField;
        
        private string сумНалПерField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool сумКвFieldSpecified;
        
        private bool сумПгFieldSpecified;
        
        private bool сум9мFieldSpecified;
        
        private bool сумНалПерFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумКв {
            get {
                return this.сумКвField;
            }
            set {
                if ((this.сумКвField != null)) {
                    if ((сумКвField.Equals(value) != true)) {
                        this.сумКвField = value;
                        this.OnPropertyChanged("СумКв");
                    }
                }
                else {
                    this.сумКвField = value;
                    this.OnPropertyChanged("СумКв");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПг {
            get {
                return this.сумПгField;
            }
            set {
                if ((this.сумПгField != null)) {
                    if ((сумПгField.Equals(value) != true)) {
                        this.сумПгField = value;
                        this.OnPropertyChanged("СумПг");
                    }
                }
                else {
                    this.сумПгField = value;
                    this.OnPropertyChanged("СумПг");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Сум9м {
            get {
                return this.сум9мField;
            }
            set {
                if ((this.сум9мField != null)) {
                    if ((сум9мField.Equals(value) != true)) {
                        this.сум9мField = value;
                        this.OnPropertyChanged("Сум9м");
                    }
                }
                else {
                    this.сум9мField = value;
                    this.OnPropertyChanged("Сум9м");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумНалПер {
            get {
                return this.сумНалПерField;
            }
            set {
                if ((this.сумНалПерField != null)) {
                    if ((сумНалПерField.Equals(value) != true)) {
                        this.сумНалПерField = value;
                        this.OnPropertyChanged("СумНалПер");
                    }
                }
                else {
                    this.сумНалПерField = value;
                    this.OnPropertyChanged("СумНалПер");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СумТип504));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СумКвSpecified {
            get {
                return сумКвFieldSpecified;
            }
            set {
                сумКвFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПгSpecified {
            get {
                return сумПгFieldSpecified;
            }
            set {
                сумПгFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool Сум9мSpecified {
            get {
                return сум9мFieldSpecified;
            }
            set {
                сум9мFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумНалПерSpecified {
            get {
                return сумНалПерFieldSpecified;
            }
            set {
                сумНалПерFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СумТип504 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СумТип504 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СумТип504 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СумТип504 obj, out System.Exception exception) {
            exception = null;
            obj = default(СумТип504);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СумТип504 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СумТип504 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СумТип504)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СумТип504 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СумТип504 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СумТип504 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СумТип504 obj, out System.Exception exception) {
            exception = null;
            obj = default(СумТип504);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СумТип504 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СумТип504 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class СумТип505 : System.ComponentModel.INotifyPropertyChanged {
        
        private string сумЗаКвField;
        
        private string сумЗаПгField;
        
        private string сумЗа9мField;
        
        private string сумЗаНалПерField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool сумЗаКвFieldSpecified;
        
        private bool сумЗаПгFieldSpecified;
        
        private bool сумЗа9мFieldSpecified;
        
        private bool сумЗаНалПерFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумЗаКв {
            get {
                return this.сумЗаКвField;
            }
            set {
                if ((this.сумЗаКвField != null)) {
                    if ((сумЗаКвField.Equals(value) != true)) {
                        this.сумЗаКвField = value;
                        this.OnPropertyChanged("СумЗаКв");
                    }
                }
                else {
                    this.сумЗаКвField = value;
                    this.OnPropertyChanged("СумЗаКв");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумЗаПг {
            get {
                return this.сумЗаПгField;
            }
            set {
                if ((this.сумЗаПгField != null)) {
                    if ((сумЗаПгField.Equals(value) != true)) {
                        this.сумЗаПгField = value;
                        this.OnPropertyChanged("СумЗаПг");
                    }
                }
                else {
                    this.сумЗаПгField = value;
                    this.OnPropertyChanged("СумЗаПг");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумЗа9м {
            get {
                return this.сумЗа9мField;
            }
            set {
                if ((this.сумЗа9мField != null)) {
                    if ((сумЗа9мField.Equals(value) != true)) {
                        this.сумЗа9мField = value;
                        this.OnPropertyChanged("СумЗа9м");
                    }
                }
                else {
                    this.сумЗа9мField = value;
                    this.OnPropertyChanged("СумЗа9м");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумЗаНалПер {
            get {
                return this.сумЗаНалПерField;
            }
            set {
                if ((this.сумЗаНалПерField != null)) {
                    if ((сумЗаНалПерField.Equals(value) != true)) {
                        this.сумЗаНалПерField = value;
                        this.OnPropertyChanged("СумЗаНалПер");
                    }
                }
                else {
                    this.сумЗаНалПерField = value;
                    this.OnPropertyChanged("СумЗаНалПер");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(СумТип505));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool СумЗаКвSpecified {
            get {
                return сумЗаКвFieldSpecified;
            }
            set {
                сумЗаКвFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумЗаПгSpecified {
            get {
                return сумЗаПгFieldSpecified;
            }
            set {
                сумЗаПгFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумЗа9мSpecified {
            get {
                return сумЗа9мFieldSpecified;
            }
            set {
                сумЗа9мFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумЗаНалПерSpecified {
            get {
                return сумЗаНалПерFieldSpecified;
            }
            set {
                сумЗаНалПерFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current СумТип505 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an СумТип505 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output СумТип505 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out СумТип505 obj, out System.Exception exception) {
            exception = null;
            obj = default(СумТип505);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out СумТип505 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static СумТип505 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((СумТип505)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current СумТип505 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an СумТип505 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output СумТип505 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out СумТип505 obj, out System.Exception exception) {
            exception = null;
            obj = default(СумТип505);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out СумТип505 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static СумТип505 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class РаспрНалСубРФТип506 : System.ComponentModel.INotifyPropertyChanged {
        
        private РаспрНалСубРФТип506ТипНП типНПField;
        
        private РаспрНалСубРФТип506ОбРасч обРасчField;
        
        private string наимОПField;
        
        private string кППОПField;
        
        private РаспрНалСубРФТип506ОбязУплНалОП обязУплНалОПField;
        
        private string налБазаОргField;
        
        private string налБазаБезЛиквОПField;
        
        private decimal доляНалБазField;
        
        private bool доляНалБазFieldSpecified;
        
        private string налБазаДоляField;
        
        private decimal ставНалСубРФField;
        
        private bool ставНалСубРФFieldSpecified;
        
        private string сумНалField;
        
        private string налНачислСубРФField;
        
        private string налВыплВнеРФField;
        
        private string сумНалПField;
        
        private string месАвПлатField;
        
        private string месАвПлат1КвСледField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool типНПFieldSpecified;
        
        private bool обРасчFieldSpecified;
        
        private bool наимОПFieldSpecified;
        
        private bool кППОПFieldSpecified;
        
        private bool обязУплНалОПFieldSpecified;
        
        private bool налБазаОргFieldSpecified;
        
        private bool налБазаБезЛиквОПFieldSpecified;
        
        private bool налБазаДоляFieldSpecified;
        
        private bool сумНалFieldSpecified;
        
        private bool налНачислСубРФFieldSpecified;
        
        private bool налВыплВнеРФFieldSpecified;
        
        private bool сумНалПFieldSpecified;
        
        private bool месАвПлатFieldSpecified;
        
        private bool месАвПлат1КвСледFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public РаспрНалСубРФТип506ТипНП ТипНП {
            get {
                return this.типНПField;
            }
            set {
                if ((типНПField.Equals(value) != true)) {
                    this.типНПField = value;
                    this.OnPropertyChanged("ТипНП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public РаспрНалСубРФТип506ОбРасч ОбРасч {
            get {
                return this.обРасчField;
            }
            set {
                if ((обРасчField.Equals(value) != true)) {
                    this.обРасчField = value;
                    this.OnPropertyChanged("ОбРасч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимОП {
            get {
                return this.наимОПField;
            }
            set {
                if ((this.наимОПField != null)) {
                    if ((наимОПField.Equals(value) != true)) {
                        this.наимОПField = value;
                        this.OnPropertyChanged("НаимОП");
                    }
                }
                else {
                    this.наимОПField = value;
                    this.OnPropertyChanged("НаимОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КППОП {
            get {
                return this.кППОПField;
            }
            set {
                if ((this.кППОПField != null)) {
                    if ((кППОПField.Equals(value) != true)) {
                        this.кППОПField = value;
                        this.OnPropertyChanged("КППОП");
                    }
                }
                else {
                    this.кППОПField = value;
                    this.OnPropertyChanged("КППОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public РаспрНалСубРФТип506ОбязУплНалОП ОбязУплНалОП {
            get {
                return this.обязУплНалОПField;
            }
            set {
                if ((обязУплНалОПField.Equals(value) != true)) {
                    this.обязУплНалОПField = value;
                    this.OnPropertyChanged("ОбязУплНалОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалБазаОрг {
            get {
                return this.налБазаОргField;
            }
            set {
                if ((this.налБазаОргField != null)) {
                    if ((налБазаОргField.Equals(value) != true)) {
                        this.налБазаОргField = value;
                        this.OnPropertyChanged("НалБазаОрг");
                    }
                }
                else {
                    this.налБазаОргField = value;
                    this.OnPropertyChanged("НалБазаОрг");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалБазаБезЛиквОП {
            get {
                return this.налБазаБезЛиквОПField;
            }
            set {
                if ((this.налБазаБезЛиквОПField != null)) {
                    if ((налБазаБезЛиквОПField.Equals(value) != true)) {
                        this.налБазаБезЛиквОПField = value;
                        this.OnPropertyChanged("НалБазаБезЛиквОП");
                    }
                }
                else {
                    this.налБазаБезЛиквОПField = value;
                    this.OnPropertyChanged("НалБазаБезЛиквОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДоляНалБаз {
            get {
                return this.доляНалБазField;
            }
            set {
                if ((this.доляНалБазField != null)) {
                    if ((доляНалБазField.Equals(value) != true)) {
                        this.доляНалБазField = value;
                        this.OnPropertyChanged("ДоляНалБаз");
                    }
                }
                else {
                    this.доляНалБазField = value;
                    this.OnPropertyChanged("ДоляНалБаз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДоляНалБазSpecified {
            get {
                return this.доляНалБазFieldSpecified;
            }
            set {
                if ((доляНалБазFieldSpecified.Equals(value) != true)) {
                    this.доляНалБазFieldSpecified = value;
                    this.OnPropertyChanged("ДоляНалБазSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалБазаДоля {
            get {
                return this.налБазаДоляField;
            }
            set {
                if ((this.налБазаДоляField != null)) {
                    if ((налБазаДоляField.Equals(value) != true)) {
                        this.налБазаДоляField = value;
                        this.OnPropertyChanged("НалБазаДоля");
                    }
                }
                else {
                    this.налБазаДоляField = value;
                    this.OnPropertyChanged("НалБазаДоля");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СтавНалСубРФ {
            get {
                return this.ставНалСубРФField;
            }
            set {
                if ((this.ставНалСубРФField != null)) {
                    if ((ставНалСубРФField.Equals(value) != true)) {
                        this.ставНалСубРФField = value;
                        this.OnPropertyChanged("СтавНалСубРФ");
                    }
                }
                else {
                    this.ставНалСубРФField = value;
                    this.OnPropertyChanged("СтавНалСубРФ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СтавНалСубРФSpecified {
            get {
                return this.ставНалСубРФFieldSpecified;
            }
            set {
                if ((ставНалСубРФFieldSpecified.Equals(value) != true)) {
                    this.ставНалСубРФFieldSpecified = value;
                    this.OnPropertyChanged("СтавНалСубРФSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумНал {
            get {
                return this.сумНалField;
            }
            set {
                if ((this.сумНалField != null)) {
                    if ((сумНалField.Equals(value) != true)) {
                        this.сумНалField = value;
                        this.OnPropertyChanged("СумНал");
                    }
                }
                else {
                    this.сумНалField = value;
                    this.OnPropertyChanged("СумНал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалНачислСубРФ {
            get {
                return this.налНачислСубРФField;
            }
            set {
                if ((this.налНачислСубРФField != null)) {
                    if ((налНачислСубРФField.Equals(value) != true)) {
                        this.налНачислСубРФField = value;
                        this.OnPropertyChanged("НалНачислСубРФ");
                    }
                }
                else {
                    this.налНачислСубРФField = value;
                    this.OnPropertyChanged("НалНачислСубРФ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалВыплВнеРФ {
            get {
                return this.налВыплВнеРФField;
            }
            set {
                if ((this.налВыплВнеРФField != null)) {
                    if ((налВыплВнеРФField.Equals(value) != true)) {
                        this.налВыплВнеРФField = value;
                        this.OnPropertyChanged("НалВыплВнеРФ");
                    }
                }
                else {
                    this.налВыплВнеРФField = value;
                    this.OnPropertyChanged("НалВыплВнеРФ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумНалП {
            get {
                return this.сумНалПField;
            }
            set {
                if ((this.сумНалПField != null)) {
                    if ((сумНалПField.Equals(value) != true)) {
                        this.сумНалПField = value;
                        this.OnPropertyChanged("СумНалП");
                    }
                }
                else {
                    this.сумНалПField = value;
                    this.OnPropertyChanged("СумНалП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string МесАвПлат {
            get {
                return this.месАвПлатField;
            }
            set {
                if ((this.месАвПлатField != null)) {
                    if ((месАвПлатField.Equals(value) != true)) {
                        this.месАвПлатField = value;
                        this.OnPropertyChanged("МесАвПлат");
                    }
                }
                else {
                    this.месАвПлатField = value;
                    this.OnPropertyChanged("МесАвПлат");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string МесАвПлат1КвСлед {
            get {
                return this.месАвПлат1КвСледField;
            }
            set {
                if ((this.месАвПлат1КвСледField != null)) {
                    if ((месАвПлат1КвСледField.Equals(value) != true)) {
                        this.месАвПлат1КвСледField = value;
                        this.OnPropertyChanged("МесАвПлат1КвСлед");
                    }
                }
                else {
                    this.месАвПлат1КвСледField = value;
                    this.OnPropertyChanged("МесАвПлат1КвСлед");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(РаспрНалСубРФТип506));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ТипНПSpecified {
            get {
                return типНПFieldSpecified;
            }
            set {
                типНПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбРасчSpecified {
            get {
                return обРасчFieldSpecified;
            }
            set {
                обРасчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимОПSpecified {
            get {
                return наимОПFieldSpecified;
            }
            set {
                наимОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППОПSpecified {
            get {
                return кППОПFieldSpecified;
            }
            set {
                кППОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбязУплНалОПSpecified {
            get {
                return обязУплНалОПFieldSpecified;
            }
            set {
                обязУплНалОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалБазаОргSpecified {
            get {
                return налБазаОргFieldSpecified;
            }
            set {
                налБазаОргFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалБазаБезЛиквОПSpecified {
            get {
                return налБазаБезЛиквОПFieldSpecified;
            }
            set {
                налБазаБезЛиквОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалБазаДоляSpecified {
            get {
                return налБазаДоляFieldSpecified;
            }
            set {
                налБазаДоляFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумНалSpecified {
            get {
                return сумНалFieldSpecified;
            }
            set {
                сумНалFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалНачислСубРФSpecified {
            get {
                return налНачислСубРФFieldSpecified;
            }
            set {
                налНачислСубРФFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалВыплВнеРФSpecified {
            get {
                return налВыплВнеРФFieldSpecified;
            }
            set {
                налВыплВнеРФFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумНалПSpecified {
            get {
                return сумНалПFieldSpecified;
            }
            set {
                сумНалПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool МесАвПлатSpecified {
            get {
                return месАвПлатFieldSpecified;
            }
            set {
                месАвПлатFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool МесАвПлат1КвСледSpecified {
            get {
                return месАвПлат1КвСледFieldSpecified;
            }
            set {
                месАвПлат1КвСледFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current РаспрНалСубРФТип506 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an РаспрНалСубРФТип506 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output РаспрНалСубРФТип506 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out РаспрНалСубРФТип506 obj, out System.Exception exception) {
            exception = null;
            obj = default(РаспрНалСубРФТип506);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out РаспрНалСубРФТип506 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static РаспрНалСубРФТип506 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((РаспрНалСубРФТип506)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current РаспрНалСубРФТип506 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an РаспрНалСубРФТип506 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output РаспрНалСубРФТип506 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out РаспрНалСубРФТип506 obj, out System.Exception exception) {
            exception = null;
            obj = default(РаспрНалСубРФТип506);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out РаспрНалСубРФТип506 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static РаспрНалСубРФТип506 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum РаспрНалСубРФТип506ТипНП {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum РаспрНалСубРФТип506ОбРасч {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum РаспрНалСубРФТип506ОбязУплНалОП {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class РаспрНалСубРФТип507 : System.ComponentModel.INotifyPropertyChanged {
        
        private РаспрНалСубРФТип507ТипНП типНПField;
        
        private РаспрНалСубРФТип507ОбРасч обРасчField;
        
        private string кППОПField;
        
        private РаспрНалСубРФТип507ОбязУплНалОП обязУплНалОПField;
        
        private string наимОПField;
        
        private string налБазаОргField;
        
        private string налБазаБезЛиквОПField;
        
        private decimal доляНалБазField;
        
        private bool доляНалБазFieldSpecified;
        
        private string налБазаДоляField;
        
        private string налБазаДоляПнСтField;
        
        private decimal ставНалСубРФField;
        
        private bool ставНалСубРФFieldSpecified;
        
        private string сумНалField;
        
        private string налНачислСубРФField;
        
        private string налВыплВнеРФField;
        
        private string тСУплНачПерField;
        
        private string тСУменАвПредField;
        
        private string тСУменАвОтчField;
        
        private string сумНалПField;
        
        private string месАвПлатField;
        
        private string месАвПлат1КвСледField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool типНПFieldSpecified;
        
        private bool обРасчFieldSpecified;
        
        private bool кППОПFieldSpecified;
        
        private bool обязУплНалОПFieldSpecified;
        
        private bool наимОПFieldSpecified;
        
        private bool налБазаОргFieldSpecified;
        
        private bool налБазаБезЛиквОПFieldSpecified;
        
        private bool налБазаДоляFieldSpecified;
        
        private bool налБазаДоляПнСтFieldSpecified;
        
        private bool сумНалFieldSpecified;
        
        private bool налНачислСубРФFieldSpecified;
        
        private bool налВыплВнеРФFieldSpecified;
        
        private bool тСУплНачПерFieldSpecified;
        
        private bool тСУменАвПредFieldSpecified;
        
        private bool тСУменАвОтчFieldSpecified;
        
        private bool сумНалПFieldSpecified;
        
        private bool месАвПлатFieldSpecified;
        
        private bool месАвПлат1КвСледFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public РаспрНалСубРФТип507ТипНП ТипНП {
            get {
                return this.типНПField;
            }
            set {
                if ((типНПField.Equals(value) != true)) {
                    this.типНПField = value;
                    this.OnPropertyChanged("ТипНП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public РаспрНалСубРФТип507ОбРасч ОбРасч {
            get {
                return this.обРасчField;
            }
            set {
                if ((обРасчField.Equals(value) != true)) {
                    this.обРасчField = value;
                    this.OnPropertyChanged("ОбРасч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КППОП {
            get {
                return this.кППОПField;
            }
            set {
                if ((this.кППОПField != null)) {
                    if ((кППОПField.Equals(value) != true)) {
                        this.кППОПField = value;
                        this.OnPropertyChanged("КППОП");
                    }
                }
                else {
                    this.кППОПField = value;
                    this.OnPropertyChanged("КППОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public РаспрНалСубРФТип507ОбязУплНалОП ОбязУплНалОП {
            get {
                return this.обязУплНалОПField;
            }
            set {
                if ((обязУплНалОПField.Equals(value) != true)) {
                    this.обязУплНалОПField = value;
                    this.OnPropertyChanged("ОбязУплНалОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string НаимОП {
            get {
                return this.наимОПField;
            }
            set {
                if ((this.наимОПField != null)) {
                    if ((наимОПField.Equals(value) != true)) {
                        this.наимОПField = value;
                        this.OnPropertyChanged("НаимОП");
                    }
                }
                else {
                    this.наимОПField = value;
                    this.OnPropertyChanged("НаимОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалБазаОрг {
            get {
                return this.налБазаОргField;
            }
            set {
                if ((this.налБазаОргField != null)) {
                    if ((налБазаОргField.Equals(value) != true)) {
                        this.налБазаОргField = value;
                        this.OnPropertyChanged("НалБазаОрг");
                    }
                }
                else {
                    this.налБазаОргField = value;
                    this.OnPropertyChanged("НалБазаОрг");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалБазаБезЛиквОП {
            get {
                return this.налБазаБезЛиквОПField;
            }
            set {
                if ((this.налБазаБезЛиквОПField != null)) {
                    if ((налБазаБезЛиквОПField.Equals(value) != true)) {
                        this.налБазаБезЛиквОПField = value;
                        this.OnPropertyChanged("НалБазаБезЛиквОП");
                    }
                }
                else {
                    this.налБазаБезЛиквОПField = value;
                    this.OnPropertyChanged("НалБазаБезЛиквОП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ДоляНалБаз {
            get {
                return this.доляНалБазField;
            }
            set {
                if ((this.доляНалБазField != null)) {
                    if ((доляНалБазField.Equals(value) != true)) {
                        this.доляНалБазField = value;
                        this.OnPropertyChanged("ДоляНалБаз");
                    }
                }
                else {
                    this.доляНалБазField = value;
                    this.OnPropertyChanged("ДоляНалБаз");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ДоляНалБазSpecified {
            get {
                return this.доляНалБазFieldSpecified;
            }
            set {
                if ((доляНалБазFieldSpecified.Equals(value) != true)) {
                    this.доляНалБазFieldSpecified = value;
                    this.OnPropertyChanged("ДоляНалБазSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалБазаДоля {
            get {
                return this.налБазаДоляField;
            }
            set {
                if ((this.налБазаДоляField != null)) {
                    if ((налБазаДоляField.Equals(value) != true)) {
                        this.налБазаДоляField = value;
                        this.OnPropertyChanged("НалБазаДоля");
                    }
                }
                else {
                    this.налБазаДоляField = value;
                    this.OnPropertyChanged("НалБазаДоля");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалБазаДоляПнСт {
            get {
                return this.налБазаДоляПнСтField;
            }
            set {
                if ((this.налБазаДоляПнСтField != null)) {
                    if ((налБазаДоляПнСтField.Equals(value) != true)) {
                        this.налБазаДоляПнСтField = value;
                        this.OnPropertyChanged("НалБазаДоляПнСт");
                    }
                }
                else {
                    this.налБазаДоляПнСтField = value;
                    this.OnPropertyChanged("НалБазаДоляПнСт");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal СтавНалСубРФ {
            get {
                return this.ставНалСубРФField;
            }
            set {
                if ((this.ставНалСубРФField != null)) {
                    if ((ставНалСубРФField.Equals(value) != true)) {
                        this.ставНалСубРФField = value;
                        this.OnPropertyChanged("СтавНалСубРФ");
                    }
                }
                else {
                    this.ставНалСубРФField = value;
                    this.OnPropertyChanged("СтавНалСубРФ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool СтавНалСубРФSpecified {
            get {
                return this.ставНалСубРФFieldSpecified;
            }
            set {
                if ((ставНалСубРФFieldSpecified.Equals(value) != true)) {
                    this.ставНалСубРФFieldSpecified = value;
                    this.OnPropertyChanged("СтавНалСубРФSpecified");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумНал {
            get {
                return this.сумНалField;
            }
            set {
                if ((this.сумНалField != null)) {
                    if ((сумНалField.Equals(value) != true)) {
                        this.сумНалField = value;
                        this.OnPropertyChanged("СумНал");
                    }
                }
                else {
                    this.сумНалField = value;
                    this.OnPropertyChanged("СумНал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалНачислСубРФ {
            get {
                return this.налНачислСубРФField;
            }
            set {
                if ((this.налНачислСубРФField != null)) {
                    if ((налНачислСубРФField.Equals(value) != true)) {
                        this.налНачислСубРФField = value;
                        this.OnPropertyChanged("НалНачислСубРФ");
                    }
                }
                else {
                    this.налНачислСубРФField = value;
                    this.OnPropertyChanged("НалНачислСубРФ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НалВыплВнеРФ {
            get {
                return this.налВыплВнеРФField;
            }
            set {
                if ((this.налВыплВнеРФField != null)) {
                    if ((налВыплВнеРФField.Equals(value) != true)) {
                        this.налВыплВнеРФField = value;
                        this.OnPropertyChanged("НалВыплВнеРФ");
                    }
                }
                else {
                    this.налВыплВнеРФField = value;
                    this.OnPropertyChanged("НалВыплВнеРФ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ТСУплНачПер {
            get {
                return this.тСУплНачПерField;
            }
            set {
                if ((this.тСУплНачПерField != null)) {
                    if ((тСУплНачПерField.Equals(value) != true)) {
                        this.тСУплНачПерField = value;
                        this.OnPropertyChanged("ТСУплНачПер");
                    }
                }
                else {
                    this.тСУплНачПерField = value;
                    this.OnPropertyChanged("ТСУплНачПер");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ТСУменАвПред {
            get {
                return this.тСУменАвПредField;
            }
            set {
                if ((this.тСУменАвПредField != null)) {
                    if ((тСУменАвПредField.Equals(value) != true)) {
                        this.тСУменАвПредField = value;
                        this.OnPropertyChanged("ТСУменАвПред");
                    }
                }
                else {
                    this.тСУменАвПредField = value;
                    this.OnPropertyChanged("ТСУменАвПред");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ТСУменАвОтч {
            get {
                return this.тСУменАвОтчField;
            }
            set {
                if ((this.тСУменАвОтчField != null)) {
                    if ((тСУменАвОтчField.Equals(value) != true)) {
                        this.тСУменАвОтчField = value;
                        this.OnPropertyChanged("ТСУменАвОтч");
                    }
                }
                else {
                    this.тСУменАвОтчField = value;
                    this.OnPropertyChanged("ТСУменАвОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумНалП {
            get {
                return this.сумНалПField;
            }
            set {
                if ((this.сумНалПField != null)) {
                    if ((сумНалПField.Equals(value) != true)) {
                        this.сумНалПField = value;
                        this.OnPropertyChanged("СумНалП");
                    }
                }
                else {
                    this.сумНалПField = value;
                    this.OnPropertyChanged("СумНалП");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string МесАвПлат {
            get {
                return this.месАвПлатField;
            }
            set {
                if ((this.месАвПлатField != null)) {
                    if ((месАвПлатField.Equals(value) != true)) {
                        this.месАвПлатField = value;
                        this.OnPropertyChanged("МесАвПлат");
                    }
                }
                else {
                    this.месАвПлатField = value;
                    this.OnPropertyChanged("МесАвПлат");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string МесАвПлат1КвСлед {
            get {
                return this.месАвПлат1КвСледField;
            }
            set {
                if ((this.месАвПлат1КвСледField != null)) {
                    if ((месАвПлат1КвСледField.Equals(value) != true)) {
                        this.месАвПлат1КвСледField = value;
                        this.OnPropertyChanged("МесАвПлат1КвСлед");
                    }
                }
                else {
                    this.месАвПлат1КвСледField = value;
                    this.OnPropertyChanged("МесАвПлат1КвСлед");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(РаспрНалСубРФТип507));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ТипНПSpecified {
            get {
                return типНПFieldSpecified;
            }
            set {
                типНПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбРасчSpecified {
            get {
                return обРасчFieldSpecified;
            }
            set {
                обРасчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КППОПSpecified {
            get {
                return кППОПFieldSpecified;
            }
            set {
                кППОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ОбязУплНалОПSpecified {
            get {
                return обязУплНалОПFieldSpecified;
            }
            set {
                обязУплНалОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НаимОПSpecified {
            get {
                return наимОПFieldSpecified;
            }
            set {
                наимОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалБазаОргSpecified {
            get {
                return налБазаОргFieldSpecified;
            }
            set {
                налБазаОргFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалБазаБезЛиквОПSpecified {
            get {
                return налБазаБезЛиквОПFieldSpecified;
            }
            set {
                налБазаБезЛиквОПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалБазаДоляSpecified {
            get {
                return налБазаДоляFieldSpecified;
            }
            set {
                налБазаДоляFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалБазаДоляПнСтSpecified {
            get {
                return налБазаДоляПнСтFieldSpecified;
            }
            set {
                налБазаДоляПнСтFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумНалSpecified {
            get {
                return сумНалFieldSpecified;
            }
            set {
                сумНалFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалНачислСубРФSpecified {
            get {
                return налНачислСубРФFieldSpecified;
            }
            set {
                налНачислСубРФFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НалВыплВнеРФSpecified {
            get {
                return налВыплВнеРФFieldSpecified;
            }
            set {
                налВыплВнеРФFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТСУплНачПерSpecified {
            get {
                return тСУплНачПерFieldSpecified;
            }
            set {
                тСУплНачПерFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТСУменАвПредSpecified {
            get {
                return тСУменАвПредFieldSpecified;
            }
            set {
                тСУменАвПредFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ТСУменАвОтчSpecified {
            get {
                return тСУменАвОтчFieldSpecified;
            }
            set {
                тСУменАвОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумНалПSpecified {
            get {
                return сумНалПFieldSpecified;
            }
            set {
                сумНалПFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool МесАвПлатSpecified {
            get {
                return месАвПлатFieldSpecified;
            }
            set {
                месАвПлатFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool МесАвПлат1КвСледSpecified {
            get {
                return месАвПлат1КвСледFieldSpecified;
            }
            set {
                месАвПлат1КвСледFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current РаспрНалСубРФТип507 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an РаспрНалСубРФТип507 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output РаспрНалСубРФТип507 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out РаспрНалСубРФТип507 obj, out System.Exception exception) {
            exception = null;
            obj = default(РаспрНалСубРФТип507);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out РаспрНалСубРФТип507 obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static РаспрНалСубРФТип507 Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((РаспрНалСубРФТип507)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current РаспрНалСубРФТип507 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an РаспрНалСубРФТип507 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output РаспрНалСубРФТип507 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out РаспрНалСубРФТип507 obj, out System.Exception exception) {
            exception = null;
            obj = default(РаспрНалСубРФТип507);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out РаспрНалСубРФТип507 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static РаспрНалСубРФТип507 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum РаспрНалСубРФТип507ТипНП {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum РаспрНалСубРФТип507ОбРасч {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public enum РаспрНалСубРФТип507ОбязУплНалОП {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОтчПредНТипУБО : System.ComponentModel.INotifyPropertyChanged {
        
        private string поясненияField;
        
        private string кодСтрокиField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поясненияFieldSpecified;
        
        private bool кодСтрокиFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСтроки {
            get {
                return this.кодСтрокиField;
            }
            set {
                if ((this.кодСтрокиField != null)) {
                    if ((кодСтрокиField.Equals(value) != true)) {
                        this.кодСтрокиField = value;
                        this.OnPropertyChanged("КодСтроки");
                    }
                }
                else {
                    this.кодСтрокиField = value;
                    this.OnPropertyChanged("КодСтроки");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОтчПредНТипУБО));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСтрокиSpecified {
            get {
                return кодСтрокиFieldSpecified;
            }
            set {
                кодСтрокиFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОтчПредНТипУБО object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОтчПредНТипУБО object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОтчПредНТипУБО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОтчПредНТипУБО obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредНТипУБО);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОтчПредНТипУБО obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОтчПредНТипУБО Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОтчПредНТипУБО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОтчПредНТипУБО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОтчПредНТипУБО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОтчПредНТипУБО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОтчПредНТипУБО obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредНТипУБО);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОтчПредНТипУБО obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОтчПредНТипУБО LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОтчПредОТипУБО : System.ComponentModel.INotifyPropertyChanged {
        
        private string поясненияField;
        
        private string кодСтрокиField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поясненияFieldSpecified;
        
        private bool кодСтрокиFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСтроки {
            get {
                return this.кодСтрокиField;
            }
            set {
                if ((this.кодСтрокиField != null)) {
                    if ((кодСтрокиField.Equals(value) != true)) {
                        this.кодСтрокиField = value;
                        this.OnPropertyChanged("КодСтроки");
                    }
                }
                else {
                    this.кодСтрокиField = value;
                    this.OnPropertyChanged("КодСтроки");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОтчПредОТипУБО));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСтрокиSpecified {
            get {
                return кодСтрокиFieldSpecified;
            }
            set {
                кодСтрокиFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОтчПредОТипУБО object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОтчПредОТипУБО object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОтчПредОТипУБО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОтчПредОТипУБО obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредОТипУБО);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОтчПредОТипУБО obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОтчПредОТипУБО Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОтчПредОТипУБО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОтчПредОТипУБО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОтчПредОТипУБО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОтчПредОТипУБО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОтчПредОТипУБО obj, out System.Exception exception) {
            exception = null;
            obj = default(ОтчПредОТипУБО);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОтчПредОТипУБО obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОтчПредОТипУБО LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ДвижКапГодТипУБО : System.ComponentModel.INotifyPropertyChanged {
        
        private ДвижКапГодТипУБОУвеличКапитал увеличКапиталField;
        
        private ДвижКапГодТипУБОУменКапитал уменКапиталField;
        
        private ДвижКапГодТипУБОИзмДобавКап измДобавКапField;
        
        private ДвижКапГодТипУБОИзмРезервКап измРезервКапField;
        
        private ДвижКапПГод кап31декField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool увеличКапиталFieldSpecified;
        
        private bool уменКапиталFieldSpecified;
        
        private bool измДобавКапFieldSpecified;
        
        private bool измРезервКапFieldSpecified;
        
        private bool кап31декFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ДвижКапГодТипУБОУвеличКапитал УвеличКапитал {
            get {
                if ((this.увеличКапиталField == null)) {
                    this.увеличКапиталField = new ДвижКапГодТипУБОУвеличКапитал();
                }
                return this.увеличКапиталField;
            }
            set {
                if ((this.увеличКапиталField != null)) {
                    if ((увеличКапиталField.Equals(value) != true)) {
                        this.увеличКапиталField = value;
                        this.OnPropertyChanged("УвеличКапитал");
                    }
                }
                else {
                    this.увеличКапиталField = value;
                    this.OnPropertyChanged("УвеличКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ДвижКапГодТипУБОУменКапитал УменКапитал {
            get {
                if ((this.уменКапиталField == null)) {
                    this.уменКапиталField = new ДвижКапГодТипУБОУменКапитал();
                }
                return this.уменКапиталField;
            }
            set {
                if ((this.уменКапиталField != null)) {
                    if ((уменКапиталField.Equals(value) != true)) {
                        this.уменКапиталField = value;
                        this.OnPropertyChanged("УменКапитал");
                    }
                }
                else {
                    this.уменКапиталField = value;
                    this.OnPropertyChanged("УменКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ДвижКапГодТипУБОИзмДобавКап ИзмДобавКап {
            get {
                if ((this.измДобавКапField == null)) {
                    this.измДобавКапField = new ДвижКапГодТипУБОИзмДобавКап();
                }
                return this.измДобавКапField;
            }
            set {
                if ((this.измДобавКапField != null)) {
                    if ((измДобавКапField.Equals(value) != true)) {
                        this.измДобавКапField = value;
                        this.OnPropertyChanged("ИзмДобавКап");
                    }
                }
                else {
                    this.измДобавКапField = value;
                    this.OnPropertyChanged("ИзмДобавКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ДвижКапГодТипУБОИзмРезервКап ИзмРезервКап {
            get {
                if ((this.измРезервКапField == null)) {
                    this.измРезервКапField = new ДвижКапГодТипУБОИзмРезервКап();
                }
                return this.измРезервКапField;
            }
            set {
                if ((this.измРезервКапField != null)) {
                    if ((измРезервКапField.Equals(value) != true)) {
                        this.измРезервКапField = value;
                        this.OnPropertyChanged("ИзмРезервКап");
                    }
                }
                else {
                    this.измРезервКапField = value;
                    this.OnPropertyChanged("ИзмРезервКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ДвижКапПГод Кап31дек {
            get {
                if ((this.кап31декField == null)) {
                    this.кап31декField = new ДвижКапПГод();
                }
                return this.кап31декField;
            }
            set {
                if ((this.кап31декField != null)) {
                    if ((кап31декField.Equals(value) != true)) {
                        this.кап31декField = value;
                        this.OnPropertyChanged("Кап31дек");
                    }
                }
                else {
                    this.кап31декField = value;
                    this.OnPropertyChanged("Кап31дек");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБО));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УвеличКапиталSpecified {
            get {
                return увеличКапиталFieldSpecified;
            }
            set {
                увеличКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УменКапиталSpecified {
            get {
                return уменКапиталFieldSpecified;
            }
            set {
                уменКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмДобавКапSpecified {
            get {
                return измДобавКапFieldSpecified;
            }
            set {
                измДобавКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИзмРезервКапSpecified {
            get {
                return измРезервКапFieldSpecified;
            }
            set {
                измРезервКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool Кап31декSpecified {
            get {
                return кап31декFieldSpecified;
            }
            set {
                кап31декFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБО object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБО object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБО obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБО);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБО obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБО Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБО)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБО object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБО object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБО object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБО obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБО);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБО obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБО LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУвеличКапитал : System.ComponentModel.INotifyPropertyChanged {
        
        private ДвижКапПГод увеличКапВсField;
        
        private ДвижКапГодТипУБОУвеличКапиталЧистПриб чистПрибField;
        
        private ДвижКапГодТипУБОУвеличКапиталПереоцИмущ переоцИмущField;
        
        private ДвижКапГодТипУБОУвеличКапиталДохУвелКап дохУвелКапField;
        
        private ДвижКапГодТипУБОУвеличКапиталДопВыпАкций допВыпАкцийField;
        
        private ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц увеличНомАкцField;
        
        private ДвижКапПГод реорганизацияField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool увеличКапВсFieldSpecified;
        
        private bool чистПрибFieldSpecified;
        
        private bool переоцИмущFieldSpecified;
        
        private bool дохУвелКапFieldSpecified;
        
        private bool допВыпАкцийFieldSpecified;
        
        private bool увеличНомАкцFieldSpecified;
        
        private bool реорганизацияFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ДвижКапПГод УвеличКапВс {
            get {
                if ((this.увеличКапВсField == null)) {
                    this.увеличКапВсField = new ДвижКапПГод();
                }
                return this.увеличКапВсField;
            }
            set {
                if ((this.увеличКапВсField != null)) {
                    if ((увеличКапВсField.Equals(value) != true)) {
                        this.увеличКапВсField = value;
                        this.OnPropertyChanged("УвеличКапВс");
                    }
                }
                else {
                    this.увеличКапВсField = value;
                    this.OnPropertyChanged("УвеличКапВс");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ДвижКапГодТипУБОУвеличКапиталЧистПриб ЧистПриб {
            get {
                if ((this.чистПрибField == null)) {
                    this.чистПрибField = new ДвижКапГодТипУБОУвеличКапиталЧистПриб();
                }
                return this.чистПрибField;
            }
            set {
                if ((this.чистПрибField != null)) {
                    if ((чистПрибField.Equals(value) != true)) {
                        this.чистПрибField = value;
                        this.OnPropertyChanged("ЧистПриб");
                    }
                }
                else {
                    this.чистПрибField = value;
                    this.OnPropertyChanged("ЧистПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ДвижКапГодТипУБОУвеличКапиталПереоцИмущ ПереоцИмущ {
            get {
                if ((this.переоцИмущField == null)) {
                    this.переоцИмущField = new ДвижКапГодТипУБОУвеличКапиталПереоцИмущ();
                }
                return this.переоцИмущField;
            }
            set {
                if ((this.переоцИмущField != null)) {
                    if ((переоцИмущField.Equals(value) != true)) {
                        this.переоцИмущField = value;
                        this.OnPropertyChanged("ПереоцИмущ");
                    }
                }
                else {
                    this.переоцИмущField = value;
                    this.OnPropertyChanged("ПереоцИмущ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ДвижКапГодТипУБОУвеличКапиталДохУвелКап ДохУвелКап {
            get {
                if ((this.дохУвелКапField == null)) {
                    this.дохУвелКапField = new ДвижКапГодТипУБОУвеличКапиталДохУвелКап();
                }
                return this.дохУвелКапField;
            }
            set {
                if ((this.дохУвелКапField != null)) {
                    if ((дохУвелКапField.Equals(value) != true)) {
                        this.дохУвелКапField = value;
                        this.OnPropertyChanged("ДохУвелКап");
                    }
                }
                else {
                    this.дохУвелКапField = value;
                    this.OnPropertyChanged("ДохУвелКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ДвижКапГодТипУБОУвеличКапиталДопВыпАкций ДопВыпАкций {
            get {
                if ((this.допВыпАкцийField == null)) {
                    this.допВыпАкцийField = new ДвижКапГодТипУБОУвеличКапиталДопВыпАкций();
                }
                return this.допВыпАкцийField;
            }
            set {
                if ((this.допВыпАкцийField != null)) {
                    if ((допВыпАкцийField.Equals(value) != true)) {
                        this.допВыпАкцийField = value;
                        this.OnPropertyChanged("ДопВыпАкций");
                    }
                }
                else {
                    this.допВыпАкцийField = value;
                    this.OnPropertyChanged("ДопВыпАкций");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц УвеличНомАкц {
            get {
                if ((this.увеличНомАкцField == null)) {
                    this.увеличНомАкцField = new ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц();
                }
                return this.увеличНомАкцField;
            }
            set {
                if ((this.увеличНомАкцField != null)) {
                    if ((увеличНомАкцField.Equals(value) != true)) {
                        this.увеличНомАкцField = value;
                        this.OnPropertyChanged("УвеличНомАкц");
                    }
                }
                else {
                    this.увеличНомАкцField = value;
                    this.OnPropertyChanged("УвеличНомАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ДвижКапПГод Реорганизация {
            get {
                if ((this.реорганизацияField == null)) {
                    this.реорганизацияField = new ДвижКапПГод();
                }
                return this.реорганизацияField;
            }
            set {
                if ((this.реорганизацияField != null)) {
                    if ((реорганизацияField.Equals(value) != true)) {
                        this.реорганизацияField = value;
                        this.OnPropertyChanged("Реорганизация");
                    }
                }
                else {
                    this.реорганизацияField = value;
                    this.OnPropertyChanged("Реорганизация");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУвеличКапитал));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УвеличКапВсSpecified {
            get {
                return увеличКапВсFieldSpecified;
            }
            set {
                увеличКапВсFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ЧистПрибSpecified {
            get {
                return чистПрибFieldSpecified;
            }
            set {
                чистПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПереоцИмущSpecified {
            get {
                return переоцИмущFieldSpecified;
            }
            set {
                переоцИмущFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДохУвелКапSpecified {
            get {
                return дохУвелКапFieldSpecified;
            }
            set {
                дохУвелКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДопВыпАкцийSpecified {
            get {
                return допВыпАкцийFieldSpecified;
            }
            set {
                допВыпАкцийFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УвеличНомАкцSpecified {
            get {
                return увеличНомАкцFieldSpecified;
            }
            set {
                увеличНомАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РеорганизацияSpecified {
            get {
                return реорганизацияFieldSpecified;
            }
            set {
                реорганизацияFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапитал object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУвеличКапитал object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапитал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапитал obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапитал);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапитал obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапитал Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУвеличКапитал)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапитал object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУвеличКапитал object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапитал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапитал obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапитал);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапитал obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапитал LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУвеличКапиталЧистПриб : System.ComponentModel.INotifyPropertyChanged {
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУвеличКапиталЧистПриб));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапиталЧистПриб object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУвеличКапиталЧистПриб object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапиталЧистПриб object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапиталЧистПриб obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапиталЧистПриб);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапиталЧистПриб obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапиталЧистПриб Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУвеличКапиталЧистПриб)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапиталЧистПриб object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУвеличКапиталЧистПриб object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапиталЧистПриб object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапиталЧистПриб obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапиталЧистПриб);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапиталЧистПриб obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапиталЧистПриб LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУвеличКапиталПереоцИмущ : System.ComponentModel.INotifyPropertyChanged {
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУвеличКапиталПереоцИмущ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапиталПереоцИмущ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУвеличКапиталПереоцИмущ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапиталПереоцИмущ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапиталПереоцИмущ obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапиталПереоцИмущ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапиталПереоцИмущ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапиталПереоцИмущ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУвеличКапиталПереоцИмущ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапиталПереоцИмущ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУвеличКапиталПереоцИмущ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапиталПереоцИмущ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапиталПереоцИмущ obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапиталПереоцИмущ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапиталПереоцИмущ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапиталПереоцИмущ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУвеличКапиталДохУвелКап : System.ComponentModel.INotifyPropertyChanged {
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУвеличКапиталДохУвелКап));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапиталДохУвелКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУвеличКапиталДохУвелКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапиталДохУвелКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапиталДохУвелКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапиталДохУвелКап);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапиталДохУвелКап obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапиталДохУвелКап Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУвеличКапиталДохУвелКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапиталДохУвелКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУвеличКапиталДохУвелКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапиталДохУвелКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапиталДохУвелКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапиталДохУвелКап);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапиталДохУвелКап obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапиталДохУвелКап LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУвеличКапиталДопВыпАкций : System.ComponentModel.INotifyPropertyChanged {
        
        private string устКапиталField;
        
        private string собВыкупАкцField;
        
        private string добКапиталField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool устКапиталFieldSpecified;
        
        private bool собВыкупАкцFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string УстКапитал {
            get {
                return this.устКапиталField;
            }
            set {
                if ((this.устКапиталField != null)) {
                    if ((устКапиталField.Equals(value) != true)) {
                        this.устКапиталField = value;
                        this.OnPropertyChanged("УстКапитал");
                    }
                }
                else {
                    this.устКапиталField = value;
                    this.OnPropertyChanged("УстКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СобВыкупАкц {
            get {
                return this.собВыкупАкцField;
            }
            set {
                if ((this.собВыкупАкцField != null)) {
                    if ((собВыкупАкцField.Equals(value) != true)) {
                        this.собВыкупАкцField = value;
                        this.OnPropertyChanged("СобВыкупАкц");
                    }
                }
                else {
                    this.собВыкупАкцField = value;
                    this.OnPropertyChanged("СобВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУвеличКапиталДопВыпАкций));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УстКапиталSpecified {
            get {
                return устКапиталFieldSpecified;
            }
            set {
                устКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобВыкупАкцSpecified {
            get {
                return собВыкупАкцFieldSpecified;
            }
            set {
                собВыкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапиталДопВыпАкций object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУвеличКапиталДопВыпАкций object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапиталДопВыпАкций object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапиталДопВыпАкций obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапиталДопВыпАкций);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапиталДопВыпАкций obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапиталДопВыпАкций Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУвеличКапиталДопВыпАкций)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапиталДопВыпАкций object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУвеличКапиталДопВыпАкций object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапиталДопВыпАкций object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапиталДопВыпАкций obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапиталДопВыпАкций);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапиталДопВыпАкций obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапиталДопВыпАкций LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц : System.ComponentModel.INotifyPropertyChanged {
        
        private string устКапиталField;
        
        private string собВыкупАкцField;
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool устКапиталFieldSpecified;
        
        private bool собВыкупАкцFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string УстКапитал {
            get {
                return this.устКапиталField;
            }
            set {
                if ((this.устКапиталField != null)) {
                    if ((устКапиталField.Equals(value) != true)) {
                        this.устКапиталField = value;
                        this.OnPropertyChanged("УстКапитал");
                    }
                }
                else {
                    this.устКапиталField = value;
                    this.OnPropertyChanged("УстКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СобВыкупАкц {
            get {
                return this.собВыкупАкцField;
            }
            set {
                if ((this.собВыкупАкцField != null)) {
                    if ((собВыкупАкцField.Equals(value) != true)) {
                        this.собВыкупАкцField = value;
                        this.OnPropertyChanged("СобВыкупАкц");
                    }
                }
                else {
                    this.собВыкупАкцField = value;
                    this.OnPropertyChanged("СобВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УстКапиталSpecified {
            get {
                return устКапиталFieldSpecified;
            }
            set {
                устКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобВыкупАкцSpecified {
            get {
                return собВыкупАкцFieldSpecified;
            }
            set {
                собВыкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУвеличКапиталУвеличНомАкц LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУменКапитал : System.ComponentModel.INotifyPropertyChanged {
        
        private ДвижКапПГод уменКапВсField;
        
        private ДвижКапГодТипУБОУменКапиталУбыток убытокField;
        
        private ДвижКапГодТипУБОУменКапиталПереоцИмущ переоцИмущField;
        
        private ДвижКапГодТипУБОУменКапиталРасхУменКап расхУменКапField;
        
        private ДвижКапГодТипУБОУменКапиталУменНомАкц уменНомАкцField;
        
        private ДвижКапГодТипУБОУменКапиталУменКолАкций уменКолАкцийField;
        
        private ДвижКапПГод реорганизацияField;
        
        private ДвижКапГодТипУБОУменКапиталДивиденды дивидендыField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool уменКапВсFieldSpecified;
        
        private bool убытокFieldSpecified;
        
        private bool переоцИмущFieldSpecified;
        
        private bool расхУменКапFieldSpecified;
        
        private bool уменНомАкцFieldSpecified;
        
        private bool уменКолАкцийFieldSpecified;
        
        private bool реорганизацияFieldSpecified;
        
        private bool дивидендыFieldSpecified;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ДвижКапПГод УменКапВс {
            get {
                if ((this.уменКапВсField == null)) {
                    this.уменКапВсField = new ДвижКапПГод();
                }
                return this.уменКапВсField;
            }
            set {
                if ((this.уменКапВсField != null)) {
                    if ((уменКапВсField.Equals(value) != true)) {
                        this.уменКапВсField = value;
                        this.OnPropertyChanged("УменКапВс");
                    }
                }
                else {
                    this.уменКапВсField = value;
                    this.OnPropertyChanged("УменКапВс");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ДвижКапГодТипУБОУменКапиталУбыток Убыток {
            get {
                if ((this.убытокField == null)) {
                    this.убытокField = new ДвижКапГодТипУБОУменКапиталУбыток();
                }
                return this.убытокField;
            }
            set {
                if ((this.убытокField != null)) {
                    if ((убытокField.Equals(value) != true)) {
                        this.убытокField = value;
                        this.OnPropertyChanged("Убыток");
                    }
                }
                else {
                    this.убытокField = value;
                    this.OnPropertyChanged("Убыток");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ДвижКапГодТипУБОУменКапиталПереоцИмущ ПереоцИмущ {
            get {
                if ((this.переоцИмущField == null)) {
                    this.переоцИмущField = new ДвижКапГодТипУБОУменКапиталПереоцИмущ();
                }
                return this.переоцИмущField;
            }
            set {
                if ((this.переоцИмущField != null)) {
                    if ((переоцИмущField.Equals(value) != true)) {
                        this.переоцИмущField = value;
                        this.OnPropertyChanged("ПереоцИмущ");
                    }
                }
                else {
                    this.переоцИмущField = value;
                    this.OnPropertyChanged("ПереоцИмущ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public ДвижКапГодТипУБОУменКапиталРасхУменКап РасхУменКап {
            get {
                if ((this.расхУменКапField == null)) {
                    this.расхУменКапField = new ДвижКапГодТипУБОУменКапиталРасхУменКап();
                }
                return this.расхУменКапField;
            }
            set {
                if ((this.расхУменКапField != null)) {
                    if ((расхУменКапField.Equals(value) != true)) {
                        this.расхУменКапField = value;
                        this.OnPropertyChanged("РасхУменКап");
                    }
                }
                else {
                    this.расхУменКапField = value;
                    this.OnPropertyChanged("РасхУменКап");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public ДвижКапГодТипУБОУменКапиталУменНомАкц УменНомАкц {
            get {
                if ((this.уменНомАкцField == null)) {
                    this.уменНомАкцField = new ДвижКапГодТипУБОУменКапиталУменНомАкц();
                }
                return this.уменНомАкцField;
            }
            set {
                if ((this.уменНомАкцField != null)) {
                    if ((уменНомАкцField.Equals(value) != true)) {
                        this.уменНомАкцField = value;
                        this.OnPropertyChanged("УменНомАкц");
                    }
                }
                else {
                    this.уменНомАкцField = value;
                    this.OnPropertyChanged("УменНомАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ДвижКапГодТипУБОУменКапиталУменКолАкций УменКолАкций {
            get {
                if ((this.уменКолАкцийField == null)) {
                    this.уменКолАкцийField = new ДвижКапГодТипУБОУменКапиталУменКолАкций();
                }
                return this.уменКолАкцийField;
            }
            set {
                if ((this.уменКолАкцийField != null)) {
                    if ((уменКолАкцийField.Equals(value) != true)) {
                        this.уменКолАкцийField = value;
                        this.OnPropertyChanged("УменКолАкций");
                    }
                }
                else {
                    this.уменКолАкцийField = value;
                    this.OnPropertyChanged("УменКолАкций");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ДвижКапПГод Реорганизация {
            get {
                if ((this.реорганизацияField == null)) {
                    this.реорганизацияField = new ДвижКапПГод();
                }
                return this.реорганизацияField;
            }
            set {
                if ((this.реорганизацияField != null)) {
                    if ((реорганизацияField.Equals(value) != true)) {
                        this.реорганизацияField = value;
                        this.OnPropertyChanged("Реорганизация");
                    }
                }
                else {
                    this.реорганизацияField = value;
                    this.OnPropertyChanged("Реорганизация");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public ДвижКапГодТипУБОУменКапиталДивиденды Дивиденды {
            get {
                if ((this.дивидендыField == null)) {
                    this.дивидендыField = new ДвижКапГодТипУБОУменКапиталДивиденды();
                }
                return this.дивидендыField;
            }
            set {
                if ((this.дивидендыField != null)) {
                    if ((дивидендыField.Equals(value) != true)) {
                        this.дивидендыField = value;
                        this.OnPropertyChanged("Дивиденды");
                    }
                }
                else {
                    this.дивидендыField = value;
                    this.OnPropertyChanged("Дивиденды");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУменКапитал));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УменКапВсSpecified {
            get {
                return уменКапВсFieldSpecified;
            }
            set {
                уменКапВсFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УбытокSpecified {
            get {
                return убытокFieldSpecified;
            }
            set {
                убытокFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ПереоцИмущSpecified {
            get {
                return переоцИмущFieldSpecified;
            }
            set {
                переоцИмущFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РасхУменКапSpecified {
            get {
                return расхУменКапFieldSpecified;
            }
            set {
                расхУменКапFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УменНомАкцSpecified {
            get {
                return уменНомАкцFieldSpecified;
            }
            set {
                уменНомАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool УменКолАкцийSpecified {
            get {
                return уменКолАкцийFieldSpecified;
            }
            set {
                уменКолАкцийFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РеорганизацияSpecified {
            get {
                return реорганизацияFieldSpecified;
            }
            set {
                реорганизацияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДивидендыSpecified {
            get {
                return дивидендыFieldSpecified;
            }
            set {
                дивидендыFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапитал object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУменКапитал object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапитал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапитал obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапитал);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапитал obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапитал Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУменКапитал)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапитал object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУменКапитал object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапитал object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапитал obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапитал);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапитал obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапитал LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУменКапиталУбыток : System.ComponentModel.INotifyPropertyChanged {
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУменКапиталУбыток));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталУбыток object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУменКапиталУбыток object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталУбыток object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталУбыток obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталУбыток);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталУбыток obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталУбыток Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУменКапиталУбыток)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталУбыток object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУменКапиталУбыток object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталУбыток object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталУбыток obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталУбыток);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталУбыток obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталУбыток LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУменКапиталПереоцИмущ : System.ComponentModel.INotifyPropertyChanged {
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУменКапиталПереоцИмущ));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталПереоцИмущ object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУменКапиталПереоцИмущ object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталПереоцИмущ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталПереоцИмущ obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталПереоцИмущ);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталПереоцИмущ obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталПереоцИмущ Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУменКапиталПереоцИмущ)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталПереоцИмущ object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУменКапиталПереоцИмущ object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталПереоцИмущ object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталПереоцИмущ obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталПереоцИмущ);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталПереоцИмущ obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталПереоцИмущ LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУменКапиталРасхУменКап : System.ComponentModel.INotifyPropertyChanged {
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУменКапиталРасхУменКап));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталРасхУменКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУменКапиталРасхУменКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталРасхУменКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталРасхУменКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталРасхУменКап);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталРасхУменКап obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталРасхУменКап Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУменКапиталРасхУменКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталРасхУменКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУменКапиталРасхУменКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталРасхУменКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталРасхУменКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталРасхУменКап);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталРасхУменКап obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталРасхУменКап LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУменКапиталУменНомАкц : System.ComponentModel.INotifyPropertyChanged {
        
        private string устКапиталField;
        
        private string собВыкупАкцField;
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool устКапиталFieldSpecified;
        
        private bool собВыкупАкцFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string УстКапитал {
            get {
                return this.устКапиталField;
            }
            set {
                if ((this.устКапиталField != null)) {
                    if ((устКапиталField.Equals(value) != true)) {
                        this.устКапиталField = value;
                        this.OnPropertyChanged("УстКапитал");
                    }
                }
                else {
                    this.устКапиталField = value;
                    this.OnPropertyChanged("УстКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СобВыкупАкц {
            get {
                return this.собВыкупАкцField;
            }
            set {
                if ((this.собВыкупАкцField != null)) {
                    if ((собВыкупАкцField.Equals(value) != true)) {
                        this.собВыкупАкцField = value;
                        this.OnPropertyChanged("СобВыкупАкц");
                    }
                }
                else {
                    this.собВыкупАкцField = value;
                    this.OnPropertyChanged("СобВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУменКапиталУменНомАкц));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УстКапиталSpecified {
            get {
                return устКапиталFieldSpecified;
            }
            set {
                устКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобВыкупАкцSpecified {
            get {
                return собВыкупАкцFieldSpecified;
            }
            set {
                собВыкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталУменНомАкц object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУменКапиталУменНомАкц object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталУменНомАкц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталУменНомАкц obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталУменНомАкц);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталУменНомАкц obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталУменНомАкц Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУменКапиталУменНомАкц)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталУменНомАкц object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУменКапиталУменНомАкц object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталУменНомАкц object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталУменНомАкц obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталУменНомАкц);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталУменНомАкц obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталУменНомАкц LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУменКапиталУменКолАкций : System.ComponentModel.INotifyPropertyChanged {
        
        private string устКапиталField;
        
        private string собВыкупАкцField;
        
        private string добКапиталField;
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool устКапиталFieldSpecified;
        
        private bool собВыкупАкцFieldSpecified;
        
        private bool добКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string УстКапитал {
            get {
                return this.устКапиталField;
            }
            set {
                if ((this.устКапиталField != null)) {
                    if ((устКапиталField.Equals(value) != true)) {
                        this.устКапиталField = value;
                        this.OnPropertyChanged("УстКапитал");
                    }
                }
                else {
                    this.устКапиталField = value;
                    this.OnPropertyChanged("УстКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СобВыкупАкц {
            get {
                return this.собВыкупАкцField;
            }
            set {
                if ((this.собВыкупАкцField != null)) {
                    if ((собВыкупАкцField.Equals(value) != true)) {
                        this.собВыкупАкцField = value;
                        this.OnPropertyChanged("СобВыкупАкц");
                    }
                }
                else {
                    this.собВыкупАкцField = value;
                    this.OnPropertyChanged("СобВыкупАкц");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУменКапиталУменКолАкций));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool УстКапиталSpecified {
            get {
                return устКапиталFieldSpecified;
            }
            set {
                устКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СобВыкупАкцSpecified {
            get {
                return собВыкупАкцFieldSpecified;
            }
            set {
                собВыкупАкцFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталУменКолАкций object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУменКапиталУменКолАкций object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталУменКолАкций object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталУменКолАкций obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталУменКолАкций);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталУменКолАкций obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталУменКолАкций Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУменКапиталУменКолАкций)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталУменКолАкций object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУменКапиталУменКолАкций object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталУменКолАкций object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталУменКолАкций obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталУменКолАкций);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталУменКолАкций obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталУменКолАкций LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОУменКапиталДивиденды : System.ComponentModel.INotifyPropertyChanged {
        
        private string нераспПрибField;
        
        private string итогField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool нераспПрибFieldSpecified;
        
        private bool итогFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string Итог {
            get {
                return this.итогField;
            }
            set {
                if ((this.итогField != null)) {
                    if ((итогField.Equals(value) != true)) {
                        this.итогField = value;
                        this.OnPropertyChanged("Итог");
                    }
                }
                else {
                    this.итогField = value;
                    this.OnPropertyChanged("Итог");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОУменКапиталДивиденды));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool ИтогSpecified {
            get {
                return итогFieldSpecified;
            }
            set {
                итогFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталДивиденды object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОУменКапиталДивиденды object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталДивиденды object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталДивиденды obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталДивиденды);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОУменКапиталДивиденды obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталДивиденды Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОУменКапиталДивиденды)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОУменКапиталДивиденды object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОУменКапиталДивиденды object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОУменКапиталДивиденды object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталДивиденды obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОУменКапиталДивиденды);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОУменКапиталДивиденды obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОУменКапиталДивиденды LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОИзмДобавКап : System.ComponentModel.INotifyPropertyChanged {
        
        private string добКапиталField;
        
        private string резКапиталField;
        
        private string нераспПрибField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool добКапиталFieldSpecified;
        
        private bool резКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string ДобКапитал {
            get {
                return this.добКапиталField;
            }
            set {
                if ((this.добКапиталField != null)) {
                    if ((добКапиталField.Equals(value) != true)) {
                        this.добКапиталField = value;
                        this.OnPropertyChanged("ДобКапитал");
                    }
                }
                else {
                    this.добКапиталField = value;
                    this.OnPropertyChanged("ДобКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string РезКапитал {
            get {
                return this.резКапиталField;
            }
            set {
                if ((this.резКапиталField != null)) {
                    if ((резКапиталField.Equals(value) != true)) {
                        this.резКапиталField = value;
                        this.OnPropertyChanged("РезКапитал");
                    }
                }
                else {
                    this.резКапиталField = value;
                    this.OnPropertyChanged("РезКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОИзмДобавКап));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ДобКапиталSpecified {
            get {
                return добКапиталFieldSpecified;
            }
            set {
                добКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool РезКапиталSpecified {
            get {
                return резКапиталFieldSpecified;
            }
            set {
                резКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОИзмДобавКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОИзмДобавКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОИзмДобавКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОИзмДобавКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОИзмДобавКап);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОИзмДобавКап obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОИзмДобавКап Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОИзмДобавКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОИзмДобавКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОИзмДобавКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОИзмДобавКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОИзмДобавКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОИзмДобавКап);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОИзмДобавКап obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОИзмДобавКап LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class ДвижКапГодТипУБОИзмРезервКап : System.ComponentModel.INotifyPropertyChanged {
        
        private string резКапиталField;
        
        private string нераспПрибField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool резКапиталFieldSpecified;
        
        private bool нераспПрибFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string РезКапитал {
            get {
                return this.резКапиталField;
            }
            set {
                if ((this.резКапиталField != null)) {
                    if ((резКапиталField.Equals(value) != true)) {
                        this.резКапиталField = value;
                        this.OnPropertyChanged("РезКапитал");
                    }
                }
                else {
                    this.резКапиталField = value;
                    this.OnPropertyChanged("РезКапитал");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string НераспПриб {
            get {
                return this.нераспПрибField;
            }
            set {
                if ((this.нераспПрибField != null)) {
                    if ((нераспПрибField.Equals(value) != true)) {
                        this.нераспПрибField = value;
                        this.OnPropertyChanged("НераспПриб");
                    }
                }
                else {
                    this.нераспПрибField = value;
                    this.OnPropertyChanged("НераспПриб");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ДвижКапГодТипУБОИзмРезервКап));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool РезКапиталSpecified {
            get {
                return резКапиталFieldSpecified;
            }
            set {
                резКапиталFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool НераспПрибSpecified {
            get {
                return нераспПрибFieldSpecified;
            }
            set {
                нераспПрибFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОИзмРезервКап object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ДвижКапГодТипУБОИзмРезервКап object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОИзмРезервКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОИзмРезервКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОИзмРезервКап);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ДвижКапГодТипУБОИзмРезервКап obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОИзмРезервКап Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ДвижКапГодТипУБОИзмРезервКап)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ДвижКапГодТипУБОИзмРезервКап object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ДвижКапГодТипУБОИзмРезервКап object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ДвижКапГодТипУБОИзмРезервКап object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОИзмРезервКап obj, out System.Exception exception) {
            exception = null;
            obj = default(ДвижКапГодТипУБОИзмРезервКап);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ДвижКапГодТипУБОИзмРезервКап obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ДвижКапГодТипУБОИзмРезервКап LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОППТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string поясненияField;
        
        private string кодСтрокиField;
        
        private string сумОтчField;
        
        private string сумПрдщField;
        
        private string сумПрдшвField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool поясненияFieldSpecified;
        
        private bool кодСтрокиFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПрдщFieldSpecified;
        
        private bool сумПрдшвFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Пояснения {
            get {
                return this.поясненияField;
            }
            set {
                if ((this.поясненияField != null)) {
                    if ((поясненияField.Equals(value) != true)) {
                        this.поясненияField = value;
                        this.OnPropertyChanged("Пояснения");
                    }
                }
                else {
                    this.поясненияField = value;
                    this.OnPropertyChanged("Пояснения");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСтроки {
            get {
                return this.кодСтрокиField;
            }
            set {
                if ((this.кодСтрокиField != null)) {
                    if ((кодСтрокиField.Equals(value) != true)) {
                        this.кодСтрокиField = value;
                        this.OnPropertyChanged("КодСтроки");
                    }
                }
                else {
                    this.кодСтрокиField = value;
                    this.OnPropertyChanged("КодСтроки");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдщ {
            get {
                return this.сумПрдщField;
            }
            set {
                if ((this.сумПрдщField != null)) {
                    if ((сумПрдщField.Equals(value) != true)) {
                        this.сумПрдщField = value;
                        this.OnPropertyChanged("СумПрдщ");
                    }
                }
                else {
                    this.сумПрдщField = value;
                    this.OnPropertyChanged("СумПрдщ");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПрдшв {
            get {
                return this.сумПрдшвField;
            }
            set {
                if ((this.сумПрдшвField != null)) {
                    if ((сумПрдшвField.Equals(value) != true)) {
                        this.сумПрдшвField = value;
                        this.OnPropertyChanged("СумПрдшв");
                    }
                }
                else {
                    this.сумПрдшвField = value;
                    this.OnPropertyChanged("СумПрдшв");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОППТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool ПоясненияSpecified {
            get {
                return поясненияFieldSpecified;
            }
            set {
                поясненияFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool КодСтрокиSpecified {
            get {
                return кодСтрокиFieldSpecified;
            }
            set {
                кодСтрокиFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдщSpecified {
            get {
                return сумПрдщFieldSpecified;
            }
            set {
                сумПрдщFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПрдшвSpecified {
            get {
                return сумПрдшвFieldSpecified;
            }
            set {
                сумПрдшвFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОППТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОППТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОППТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОППТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОППТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОППТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОППТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОППТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОППТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОППТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОППТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОППТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОППТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОППТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОППТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3056.0")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class ОП_ОЦИСТип : System.ComponentModel.INotifyPropertyChanged {
        
        private string кодСтрокиField;
        
        private string сумОтчField;
        
        private string сумПредField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private bool кодСтрокиFieldSpecified;
        
        private bool сумОтчFieldSpecified;
        
        private bool сумПредFieldSpecified;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string КодСтроки {
            get {
                return this.кодСтрокиField;
            }
            set {
                if ((this.кодСтрокиField != null)) {
                    if ((кодСтрокиField.Equals(value) != true)) {
                        this.кодСтрокиField = value;
                        this.OnPropertyChanged("КодСтроки");
                    }
                }
                else {
                    this.кодСтрокиField = value;
                    this.OnPropertyChanged("КодСтроки");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумОтч {
            get {
                return this.сумОтчField;
            }
            set {
                if ((this.сумОтчField != null)) {
                    if ((сумОтчField.Equals(value) != true)) {
                        this.сумОтчField = value;
                        this.OnPropertyChanged("СумОтч");
                    }
                }
                else {
                    this.сумОтчField = value;
                    this.OnPropertyChanged("СумОтч");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string СумПред {
            get {
                return this.сумПредField;
            }
            set {
                if ((this.сумПредField != null)) {
                    if ((сумПредField.Equals(value) != true)) {
                        this.сумПредField = value;
                        this.OnPropertyChanged("СумПред");
                    }
                }
                else {
                    this.сумПредField = value;
                    this.OnPropertyChanged("СумПред");
                }
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ОП_ОЦИСТип));
                }
                return serializer;
            }
        }
        
        [XmlIgnore()]
        public bool КодСтрокиSpecified {
            get {
                return кодСтрокиFieldSpecified;
            }
            set {
                кодСтрокиFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумОтчSpecified {
            get {
                return сумОтчFieldSpecified;
            }
            set {
                сумОтчFieldSpecified = value;
            }
        }
        
        [XmlIgnore()]
        public bool СумПредSpecified {
            get {
                return сумПредFieldSpecified;
            }
            set {
                сумПредFieldSpecified = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ОП_ОЦИСТип object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ОП_ОЦИСТип object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ОП_ОЦИСТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ОП_ОЦИСТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОП_ОЦИСТип);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ОП_ОЦИСТип obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ОП_ОЦИСТип Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ОП_ОЦИСТип)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ОП_ОЦИСТип object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ОП_ОЦИСТип object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ОП_ОЦИСТип object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ОП_ОЦИСТип obj, out System.Exception exception) {
            exception = null;
            obj = default(ОП_ОЦИСТип);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ОП_ОЦИСТип obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ОП_ОЦИСТип LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
}
